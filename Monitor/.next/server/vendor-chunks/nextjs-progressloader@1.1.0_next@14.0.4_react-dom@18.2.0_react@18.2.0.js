"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nextjs-progressloader@1.1.0_next@14.0.4_react-dom@18.2.0_react@18.2.0";
exports.ids = ["vendor-chunks/nextjs-progressloader@1.1.0_next@14.0.4_react-dom@18.2.0_react@18.2.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/nextjs-progressloader@1.1.0_next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/nextjs-progressloader/dist/nextjs-progressloader.esm.js":
/*!***********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/nextjs-progressloader@1.1.0_next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/nextjs-progressloader/dist/nextjs-progressloader.esm.js ***!
  \***********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContainerLink: () => (/* binding */ ContainerLink),\n/* harmony export */   ProgressLoader: () => (/* binding */ ProgressLoader),\n/* harmony export */   changeRoute: () => (/* binding */ changeRoute),\n/* harmony export */   useRouter: () => (/* binding */ useRouter)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0_sass@1.69.6/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ \"(ssr)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0_sass@1.69.6/node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var nprogress__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! nprogress */ \"(ssr)/./node_modules/.pnpm/nprogress@0.2.0/node_modules/nprogress/nprogress.js\");\n/* harmony import */ var nprogress__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(nprogress__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/navigation */ \"(ssr)/./node_modules/.pnpm/next@14.0.4_react-dom@18.2.0_react@18.2.0_sass@1.69.6/node_modules/next/navigation.js\");\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_navigation__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\nvar eventEmitter = /*#__PURE__*/ new events__WEBPACK_IMPORTED_MODULE_2__.EventEmitter();\nfunction comparePassedLinks(links, _ref) {\n    var href = _ref.href, nickname = _ref.nickname;\n    var passedLink = links.filter(function(link) {\n        return link.href === href || link.href + \"/\" === href || nickname && link.nickname === nickname;\n    });\n    var existEqualLinks = false;\n    for(var index = 0; index < passedLink.length; index++){\n        var actualLink = passedLink[index];\n        var nextLink = passedLink[index + 1];\n        if (nextLink) {\n            if (actualLink.href === nextLink.href || actualLink.nickname === nextLink.nickname) {\n                existEqualLinks = true;\n                break;\n            } else {\n                if (actualLink.href[actualLink.href.length - 1] !== \"/\" && actualLink.href + \"/\" === nextLink.href) {\n                    existEqualLinks = true;\n                    break;\n                }\n                existEqualLinks = false;\n            }\n        } else {\n            existEqualLinks = false;\n        }\n    }\n    return existEqualLinks;\n}\nfunction existEvent(links, _ref2) {\n    var href = _ref2.href, nickname = _ref2.nickname;\n    var existEqualLinks = comparePassedLinks(links, {\n        href: href,\n        nickname: nickname\n    });\n    if (existEqualLinks === true || eventEmitter.listenerCount(\"route-\" + nickname) > 1 || eventEmitter.listenerCount(\"route-\" + href) > 1) {\n        return true;\n    }\n    return false;\n}\n/**\r\n * @deprecated Instead use the new useRouter() hook\r\n */ function changeRoute(RouteName, params) {\n    var eventCalled = eventEmitter.emit(\"route-\" + RouteName, params);\n    if (!eventCalled) {\n        throw new Error(\"The route name '\" + RouteName + \"' is not registered in the local and global Container Link!\");\n    }\n}\nfunction listenEmittedEvent(RouteName, callbackFn) {\n    eventEmitter.addListener(\"route-\" + RouteName, function(params) {\n        callbackFn(params);\n    });\n}\nfunction onEventListener(_ref3, callbackFn) {\n    var href = _ref3.href, nickname = _ref3.nickname;\n    listenEmittedEvent(href, callbackFn);\n    if (nickname) {\n        listenEmittedEvent(nickname, callbackFn);\n    }\n}\nfunction removeEventListener(_ref4) {\n    var href = _ref4.href, nickname = _ref4.nickname;\n    eventEmitter.removeAllListeners(\"route-\" + href);\n    if (nickname) {\n        eventEmitter.removeAllListeners(\"route-\" + nickname);\n    }\n}\nvar eventListener = {\n    on: onEventListener,\n    remove: removeEventListener\n};\nvar eventsService = {\n    existEvent: existEvent,\n    eventListener: eventListener\n};\nfunction _extends() {\n    _extends = Object.assign ? Object.assign.bind() : function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (it) return (it = it.call(o)).next.bind(it);\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n        var i = 0;\n        return function() {\n            if (i >= o.length) return {\n                done: true\n            };\n            return {\n                done: false,\n                value: o[i++]\n            };\n        };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction validateRoute(route, regex, routeType) {\n    if (route.includes(\"{}\")) {\n        throw new Error(\"Invalid route: Then '\" + route + \"' Route contains '{}', but no parameters were provided.\");\n    }\n    var openParenthesesCount = (route.match(/\\{/g) || []).length;\n    var closeParenthesesCount = (route.match(/\\}/g) || []).length;\n    if (openParenthesesCount === closeParenthesesCount && regex.test(route)) {\n        return true;\n    } else {\n        if (routeType === \"nickname\") {\n            throw new Error(\"invalid nickname: The '\" + route + \"' nickname contains invalid characters. Only uppercase end lowercase letters, numbers, and the following special characters are allowed: ( !, @, #, $, %, &, -, _, ?. ).\");\n        }\n        throw new Error(\"Invalid route: The route '\" + route + \"' can only contain letters, numbers, hyphens (-), underscores (_), slashes (/), and braces ({}).\");\n    }\n}\nfunction isAValidHrefRoute(route) {\n    if (route === \"/\") {\n        return true;\n    }\n    if (route[0] !== \"/\") {\n        throw new Error(\"Invalid route: The '\" + route + \"' route must begin with '/'\");\n    }\n    var regex = /^\\/(([a-zA-Z0-9-_]+|\\{[a-zA-Z0-9-_,]+\\})\\/?)+$/;\n    return validateRoute(route, regex, \"href\");\n}\nfunction isAValidNicknameRoute(route) {\n    var regex = /^[a-zA-Z0-9!@#$%&\\-_?.]+$/;\n    return validateRoute(route, regex, \"nickname\");\n}\nfunction isValidStringForURL(str) {\n    var pattern = /^[a-zA-Z0-9_-]+$/;\n    return pattern.test(str);\n}\nfunction matchDynamicRoute(absoluteUrl, dynamicValues) {\n    if (absoluteUrl === \"/\") {\n        return true;\n    }\n    if (!dynamicValues && absoluteUrl.includes(\"{\") && absoluteUrl.includes(\"}\")) {\n        throw new Error(\"Missing 'dynamicValues' parameter, but the \" + absoluteUrl + \" route contains dynamic keys.\");\n    }\n    var absoluteRouteParts = absoluteUrl.split(\"/\");\n    var dynamicKeys = dynamicValues == null ? void 0 : dynamicValues.map(function(dynamicValue) {\n        if (!isValidStringForURL(dynamicValue.value.toString())) {\n            throw new Error(\"The dynamicValue (\" + dynamicValue.value + \") of '\" + dynamicValue.key + \"' key contains invalid characters. Use only letters, numbers, underscores (_) and hyphens (-). Spaces and other characters are not allowed\");\n        }\n        return \"{\" + dynamicValue.key + \"}\";\n    });\n    var routeDynamicKeys = absoluteRouteParts.filter(function(part) {\n        return part.includes(\"{\") && part.includes(\"}\");\n    });\n    var dynamicKeysSet = new Set(dynamicKeys);\n    if (!routeDynamicKeys.length && typeof dynamicValues === \"undefined\") {\n        return true;\n    }\n    if (routeDynamicKeys.length !== (dynamicValues == null ? void 0 : dynamicValues.length)) {\n        throw new Error(\"The number of dynamic keys in the route does not match the number of dynamic values specified.\");\n    }\n    for(var _iterator = _createForOfIteratorHelperLoose(routeDynamicKeys), _step; !(_step = _iterator()).done;){\n        var part = _step.value;\n        if (!dynamicKeysSet.has(part)) {\n            throw new Error(\"The dynamic route '\" + part + \"' passed was not found in dynamicValues. Please check which prams are available!\");\n        }\n    }\n    return true;\n}\nfunction replaceDynamicValues(absoluteUrl, dynamicValues) {\n    var substitutedUrl = absoluteUrl;\n    if (dynamicValues) {\n        for(var _iterator2 = _createForOfIteratorHelperLoose(dynamicValues), _step2; !(_step2 = _iterator2()).done;){\n            var dynamicValue = _step2.value;\n            var key = \"{\" + dynamicValue.key + \"}\";\n            var value = dynamicValue.value;\n            substitutedUrl = substitutedUrl.replace(new RegExp(escapeRegExp(key), \"g\"), value.toString());\n        }\n    }\n    return substitutedUrl;\n}\nfunction escapeRegExp(key) {\n    return key.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\nfunction generateQueryString(queryStrings) {\n    var query = \"\";\n    queryStrings.forEach(function(param, index) {\n        var qy = param.key + \"=\" + param.value;\n        if (index === 0) {\n            query = \"?\" + qy;\n        } else {\n            query += \"&&\" + qy;\n        }\n    });\n    return query;\n}\nvar routeService = {\n    isAValidHrefRoute: isAValidHrefRoute,\n    matchDynamicRoute: matchDynamicRoute,\n    replaceDynamicValues: replaceDynamicValues,\n    generateQueryString: generateQueryString,\n    isAValidNicknameRoute: isAValidNicknameRoute\n};\nfunction Link(linkProps) {\n    var linkRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(linkProps.href), link = _useState[0], setLink = _useState[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        eventsService.eventListener.on(linkProps, function(event) {\n            var newLink = linkProps.href;\n            if (routeService.matchDynamicRoute(linkProps.href, event == null ? void 0 : event.dynamicRoute)) {\n                newLink = routeService.replaceDynamicValues(linkProps.href, event == null ? void 0 : event.dynamicRoute);\n            }\n            if (event != null && event.queryStrings && event.queryStrings.length > 0) {\n                newLink += routeService.generateQueryString(event.queryStrings);\n            }\n            if (newLink !== link) {\n                setLink(newLink);\n            }\n            if ((event == null ? void 0 : event.open) === \"newTab\") {\n                open(newLink, \"_blank\");\n                return;\n            }\n            setTimeout(function() {\n                var _linkRef$current;\n                (_linkRef$current = linkRef.current) == null || _linkRef$current.click();\n            }, 1);\n        });\n        return function() {\n            eventsService.eventListener.remove(linkProps);\n        };\n    }, [\n        linkProps\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((next_link__WEBPACK_IMPORTED_MODULE_1___default()), {\n        href: link,\n        ref: linkRef,\n        style: {\n            display: \"none\"\n        }\n    });\n}\nfunction ContainerLink(_ref) {\n    var links = _ref.links;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", null, links.map(function(link) {\n        if (eventsService.existEvent(links, link)) {\n            throw new Error(\"The href '\" + link.href + \"' or nickname '\" + link.nickname + \"' already exist in the local or global link list!\");\n        }\n        routeService.isAValidHrefRoute(link.href);\n        if (link.nickname) {\n            routeService.isAValidNicknameRoute(link.nickname);\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Link, {\n            href: link.href,\n            nickname: link.nickname,\n            key: link.href\n        });\n    }));\n}\nvar progress = {\n    done: function done$1() {\n        var npgclass = document.querySelectorAll(\"html\");\n        (0,nprogress__WEBPACK_IMPORTED_MODULE_3__.done)();\n        [].forEach.call(npgclass, function(el) {\n            el.classList.remove(\"nprogress-busy\");\n        });\n    },\n    start: function start$1() {\n        (0,nprogress__WEBPACK_IMPORTED_MODULE_3__.start)();\n    }\n};\nfunction isAnchorOfCurrentUrl(currentUrl, newUrl) {\n    var currentUrlObj = new URL(currentUrl);\n    var newUrlObj = new URL(newUrl);\n    // Compare hostname, pathname, and search parameters\n    if (currentUrlObj.hostname === newUrlObj.hostname && currentUrlObj.pathname === newUrlObj.pathname && currentUrlObj.search === newUrlObj.search) {\n        // Check if the new URL is just an anchor of the current URL page\n        var currentHash = currentUrlObj.hash;\n        var newHash = newUrlObj.hash;\n        return currentHash !== newHash && currentUrlObj.href.replace(currentHash, \"\") === newUrlObj.href.replace(newHash, \"\");\n    }\n    return false;\n}\nfunction findClosestAnchor(element) {\n    while(element && element.tagName.toLowerCase() !== \"a\"){\n        element = element.parentElement;\n    }\n    return element;\n}\nfunction isExternalLink(event, currentAnchor) {\n    if (event.altKey || event.ctrlKey || event.shiftKey || currentAnchor.target === \"_blank\") return true;\n    return false;\n}\nfunction handleClick(event) {\n    try {\n        var target = event.target;\n        var anchor = findClosestAnchor(target);\n        if (anchor) {\n            if (isExternalLink(event, anchor)) return;\n            var currentUrl = window.location.href;\n            var newUrl = anchor.href;\n            var isAnchor = isAnchorOfCurrentUrl(currentUrl, newUrl);\n            if (newUrl === currentUrl || isAnchor) {\n                progress.start();\n                progress.done();\n            } else {\n                progress.start();\n                (function(history) {\n                    var pushState = history.pushState;\n                    history.pushState = function() {\n                        progress.done();\n                        return pushState.apply(history, arguments);\n                    };\n                })(window.history);\n            }\n        }\n    } catch (err) {\n        // Log the error in development only!\n        console.log(\"NextTopLoader error: \", err);\n        progress.start();\n        (0,nprogress__WEBPACK_IMPORTED_MODULE_3__.done)();\n    }\n}\nvar ProgressLoader = function ProgressLoader(_ref) {\n    var propColor = _ref.color, propHeight = _ref.height, showSpinner = _ref.showSpinner, crawl = _ref.crawl, crawlSpeed = _ref.crawlSpeed, initialPosition = _ref.initialPosition, easing = _ref.easing, speed = _ref.speed, shadow = _ref.shadow, template = _ref.template, _ref$zIndex = _ref.zIndex, zIndex = _ref$zIndex === void 0 ? 1600 : _ref$zIndex;\n    var pathname = (0,next_navigation__WEBPACK_IMPORTED_MODULE_4__.usePathname)();\n    var searchParams = (0,next_navigation__WEBPACK_IMPORTED_MODULE_4__.useSearchParams)();\n    var defaultColor = \"#29d\";\n    var defaultHeight = 3;\n    var color = propColor != null ? propColor : defaultColor;\n    var height = propHeight != null ? propHeight : defaultHeight;\n    // Any falsy (except undefined) will disable the shadow\n    var boxShadow = !shadow && shadow !== undefined ? \"\" : shadow ? \"box-shadow:\" + shadow : \"box-shadow:0 0 10px \" + color + \",0 0 5px \" + color;\n    var styles = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"style\", null, \"#nprogress{pointer-events:none}#nprogress .bar{background:\" + color + \";position:fixed;z-index:\" + zIndex + \";top:0;left:0;width:100%;height:\" + height + \"px}#nprogress .peg{display:block;position:absolute;right:0;width:100px;height:100%;\" + boxShadow + \";opacity:1;-webkit-transform:rotate(3deg) translate(0px,-4px);-ms-transform:rotate(3deg) translate(0px,-4px);transform:rotate(3deg) translate(0px,-4px)}#nprogress .spinner{display:block;position:fixed;z-index:\" + zIndex + \";top:15px;right:15px}#nprogress .spinner-icon{width:18px;height:18px;box-sizing:border-box;border:2px solid transparent;border-top-color:\" + color + \";border-left-color:\" + color + \";border-radius:50%;-webkit-animation:nprogress-spinner 400ms linear infinite;animation:nprogress-spinner 400ms linear infinite}.nprogress-custom-parent{overflow:hidden;position:relative}.nprogress-custom-parent #nprogress .bar,.nprogress-custom-parent #nprogress .spinner{position:absolute}@-webkit-keyframes nprogress-spinner{0%{-webkit-transform:rotate(0deg)}100%{-webkit-transform:rotate(360deg)}}@keyframes nprogress-spinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}\");\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        (0,nprogress__WEBPACK_IMPORTED_MODULE_3__.configure)({\n            showSpinner: showSpinner != null ? showSpinner : true,\n            trickle: crawl != null ? crawl : true,\n            trickleSpeed: crawlSpeed != null ? crawlSpeed : 200,\n            minimum: initialPosition != null ? initialPosition : 0.1,\n            easing: easing != null ? easing : \"ease\",\n            speed: speed != null ? speed : 200,\n            template: template != null ? template : '<div class=\"bar\" role=\"bar\">\\n          <div class=\"peg\"></div>\\n        </div>\\n        <div class=\"spinner\" role=\"spinner\">\\n          <div class=\"spinner-icon\"></div>\\n        </div>'\n        });\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        // Add the global click event listener\n        document.addEventListener(\"click\", handleClick);\n        // Clean up the global click event listener when the component is unmounted\n        return function() {\n            document.removeEventListener(\"click\", handleClick);\n        };\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        progress.done();\n    }, [\n        pathname,\n        searchParams\n    ]);\n    return styles;\n};\n/**\r\n * The new and updated useRouter() hook\r\n */ function useRouter() {\n    var router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_4__.useRouter)();\n    function push(routeName, params) {\n        changeRoute(routeName, params);\n    }\n    function back() {\n        progress.start();\n        router.back();\n    }\n    function replace(routeName, params) {\n        changeRoute(routeName, params);\n    }\n    return _extends({}, router, {\n        push: push,\n        back: back,\n        replace: replace\n    });\n}\n //# sourceMappingURL=nextjs-progressloader.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dGpzLXByb2dyZXNzbG9hZGVyQDEuMS4wX25leHRAMTQuMC40X3JlYWN0LWRvbUAxOC4yLjBfcmVhY3RAMTguMi4wL25vZGVfbW9kdWxlcy9uZXh0anMtcHJvZ3Jlc3Nsb2FkZXIvZGlzdC9uZXh0anMtcHJvZ3Jlc3Nsb2FkZXIuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTJEO0FBQzFCO0FBQ0s7QUFDYTtBQUNzQztBQUV6RixJQUFJYSxlQUFlLFdBQVcsR0FBRSxJQUFJUixnREFBWUE7QUFDaEQsU0FBU1MsbUJBQW1CQyxLQUFLLEVBQUVDLElBQUk7SUFDckMsSUFBSUMsT0FBT0QsS0FBS0MsSUFBSSxFQUNsQkMsV0FBV0YsS0FBS0UsUUFBUTtJQUMxQixJQUFJQyxhQUFhSixNQUFNSyxNQUFNLENBQUMsU0FBVUMsSUFBSTtRQUMxQyxPQUFPQSxLQUFLSixJQUFJLEtBQUtBLFFBQVFJLEtBQUtKLElBQUksR0FBRyxRQUFRQSxRQUFRQyxZQUFZRyxLQUFLSCxRQUFRLEtBQUtBO0lBQ3pGO0lBQ0EsSUFBSUksa0JBQWtCO0lBQ3RCLElBQUssSUFBSUMsUUFBUSxHQUFHQSxRQUFRSixXQUFXSyxNQUFNLEVBQUVELFFBQVM7UUFDdEQsSUFBSUUsYUFBYU4sVUFBVSxDQUFDSSxNQUFNO1FBQ2xDLElBQUlHLFdBQVdQLFVBQVUsQ0FBQ0ksUUFBUSxFQUFFO1FBQ3BDLElBQUlHLFVBQVU7WUFDWixJQUFJRCxXQUFXUixJQUFJLEtBQUtTLFNBQVNULElBQUksSUFBSVEsV0FBV1AsUUFBUSxLQUFLUSxTQUFTUixRQUFRLEVBQUU7Z0JBQ2xGSSxrQkFBa0I7Z0JBQ2xCO1lBQ0YsT0FBTztnQkFDTCxJQUFJRyxXQUFXUixJQUFJLENBQUNRLFdBQVdSLElBQUksQ0FBQ08sTUFBTSxHQUFHLEVBQUUsS0FBSyxPQUFPQyxXQUFXUixJQUFJLEdBQUcsUUFBUVMsU0FBU1QsSUFBSSxFQUFFO29CQUNs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LGFBQWE7WUFDaERnQixTQUFTZixtQkFBbUIsT0FBT0Esa0JBQWtCO1lBQ3JEQyxRQUFRQSxVQUFVLE9BQU9BLFNBQVM7WUFDbENDLE9BQU9BLFNBQVMsT0FBT0EsUUFBUTtZQUMvQkUsVUFBVUEsWUFBWSxPQUFPQSxXQUFXO1FBQzFDO0lBQ0YsR0FBRyxFQUFFO0lBQ0xsTSxnREFBU0EsQ0FBQztRQUNSLHNDQUFzQztRQUN0Q2lKLFNBQVM2RCxnQkFBZ0IsQ0FBQyxTQUFTbEM7UUFDbkMsMkVBQTJFO1FBQzNFLE9BQU87WUFDTDNCLFNBQVMzRyxtQkFBbUIsQ0FBQyxTQUFTc0k7UUFDeEM7SUFDRixHQUFHLEVBQUU7SUFDTDVLLGdEQUFTQSxDQUFDO1FBQ1I4SSxTQUFTM0ksSUFBSTtJQUNmLEdBQUc7UUFBQzBKO1FBQVV3QztLQUFhO0lBQzNCLE9BQU9LO0FBQ1Q7QUFFQTs7Q0FFQyxHQUNELFNBQVNsTTtJQUNQLElBQUl1TSxTQUFTdE0sMERBQVdBO0lBQ3hCLFNBQVN1TSxLQUFLQyxTQUFTLEVBQUVwTCxNQUFNO1FBQzdCRixZQUFZc0wsV0FBV3BMO0lBQ3pCO0lBQ0EsU0FBU3FMO1FBQ1BwRSxTQUFTMUksS0FBSztRQUNkMk0sT0FBT0csSUFBSTtJQUNiO0lBQ0EsU0FBU2hHLFFBQVErRixTQUFTLEVBQUVwTCxNQUFNO1FBQ2hDRixZQUFZc0wsV0FBV3BMO0lBQ3pCO0lBQ0EsT0FBT2dCLFNBQVMsQ0FBQyxHQUFHa0ssUUFBUTtRQUMxQkMsTUFBTUE7UUFDTkUsTUFBTUE7UUFDTmhHLFNBQVNBO0lBQ1g7QUFDRjtBQUVpRSxDQUNqRSxxREFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRqcy1wcm9ncmVzc2xvYWRlckAxLjEuMF9uZXh0QDE0LjAuNF9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMC9ub2RlX21vZHVsZXMvbmV4dGpzLXByb2dyZXNzbG9hZGVyL2Rpc3QvbmV4dGpzLXByb2dyZXNzbG9hZGVyLmVzbS5qcz82OTZlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VSZWYsIHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgTmV4dExpbmsgZnJvbSAnbmV4dC9saW5rJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgeyBkb25lLCBzdGFydCwgY29uZmlndXJlIH0gZnJvbSAnbnByb2dyZXNzJztcbmltcG9ydCB7IHVzZVBhdGhuYW1lLCB1c2VTZWFyY2hQYXJhbXMsIHVzZVJvdXRlciBhcyB1c2VSb3V0ZXIkMSB9IGZyb20gJ25leHQvbmF2aWdhdGlvbic7XG5cbnZhciBldmVudEVtaXR0ZXIgPSAvKiNfX1BVUkVfXyovbmV3IEV2ZW50RW1pdHRlcigpO1xuZnVuY3Rpb24gY29tcGFyZVBhc3NlZExpbmtzKGxpbmtzLCBfcmVmKSB7XG4gIHZhciBocmVmID0gX3JlZi5ocmVmLFxuICAgIG5pY2tuYW1lID0gX3JlZi5uaWNrbmFtZTtcbiAgdmFyIHBhc3NlZExpbmsgPSBsaW5rcy5maWx0ZXIoZnVuY3Rpb24gKGxpbmspIHtcbiAgICByZXR1cm4gbGluay5ocmVmID09PSBocmVmIHx8IGxpbmsuaHJlZiArICcvJyA9PT0gaHJlZiB8fCBuaWNrbmFtZSAmJiBsaW5rLm5pY2tuYW1lID09PSBuaWNrbmFtZTtcbiAgfSk7XG4gIHZhciBleGlzdEVxdWFsTGlua3MgPSBmYWxzZTtcbiAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHBhc3NlZExpbmsubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgdmFyIGFjdHVhbExpbmsgPSBwYXNzZWRMaW5rW2luZGV4XTtcbiAgICB2YXIgbmV4dExpbmsgPSBwYXNzZWRMaW5rW2luZGV4ICsgMV07XG4gICAgaWYgKG5leHRMaW5rKSB7XG4gICAgICBpZiAoYWN0dWFsTGluay5ocmVmID09PSBuZXh0TGluay5ocmVmIHx8IGFjdHVhbExpbmsubmlja25hbWUgPT09IG5leHRMaW5rLm5pY2tuYW1lKSB7XG4gICAgICAgIGV4aXN0RXF1YWxMaW5rcyA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGFjdHVhbExpbmsuaHJlZlthY3R1YWxMaW5rLmhyZWYubGVuZ3RoIC0gMV0gIT09ICcvJyAmJiBhY3R1YWxMaW5rLmhyZWYgKyAnLycgPT09IG5leHRMaW5rLmhyZWYpIHtcbiAgICAgICAgICBleGlzdEVxdWFsTGlua3MgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGV4aXN0RXF1YWxMaW5rcyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBleGlzdEVxdWFsTGlua3MgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGV4aXN0RXF1YWxMaW5rcztcbn1cbmZ1bmN0aW9uIGV4aXN0RXZlbnQobGlua3MsIF9yZWYyKSB7XG4gIHZhciBocmVmID0gX3JlZjIuaHJlZixcbiAgICBuaWNrbmFtZSA9IF9yZWYyLm5pY2tuYW1lO1xuICB2YXIgZXhpc3RFcXVhbExpbmtzID0gY29tcGFyZVBhc3NlZExpbmtzKGxpbmtzLCB7XG4gICAgaHJlZjogaHJlZixcbiAgICBuaWNrbmFtZTogbmlja25hbWVcbiAgfSk7XG4gIGlmIChleGlzdEVxdWFsTGlua3MgPT09IHRydWUgfHwgZXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQoXCJyb3V0ZS1cIiArIG5pY2tuYW1lKSA+IDEgfHwgZXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQoXCJyb3V0ZS1cIiArIGhyZWYpID4gMSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxyXG4gKiBAZGVwcmVjYXRlZCBJbnN0ZWFkIHVzZSB0aGUgbmV3IHVzZVJvdXRlcigpIGhvb2tcclxuICovXG5mdW5jdGlvbiBjaGFuZ2VSb3V0ZShSb3V0ZU5hbWUsIHBhcmFtcykge1xuICB2YXIgZXZlbnRDYWxsZWQgPSBldmVudEVtaXR0ZXIuZW1pdChcInJvdXRlLVwiICsgUm91dGVOYW1lLCBwYXJhbXMpO1xuICBpZiAoIWV2ZW50Q2FsbGVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHJvdXRlIG5hbWUgJ1wiICsgUm91dGVOYW1lICsgXCInIGlzIG5vdCByZWdpc3RlcmVkIGluIHRoZSBsb2NhbCBhbmQgZ2xvYmFsIENvbnRhaW5lciBMaW5rIVwiKTtcbiAgfVxufVxuZnVuY3Rpb24gbGlzdGVuRW1pdHRlZEV2ZW50KFJvdXRlTmFtZSwgY2FsbGJhY2tGbikge1xuICBldmVudEVtaXR0ZXIuYWRkTGlzdGVuZXIoXCJyb3V0ZS1cIiArIFJvdXRlTmFtZSwgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIGNhbGxiYWNrRm4ocGFyYW1zKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBvbkV2ZW50TGlzdGVuZXIoX3JlZjMsIGNhbGxiYWNrRm4pIHtcbiAgdmFyIGhyZWYgPSBfcmVmMy5ocmVmLFxuICAgIG5pY2tuYW1lID0gX3JlZjMubmlja25hbWU7XG4gIGxpc3RlbkVtaXR0ZWRFdmVudChocmVmLCBjYWxsYmFja0ZuKTtcbiAgaWYgKG5pY2tuYW1lKSB7XG4gICAgbGlzdGVuRW1pdHRlZEV2ZW50KG5pY2tuYW1lLCBjYWxsYmFja0ZuKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihfcmVmNCkge1xuICB2YXIgaHJlZiA9IF9yZWY0LmhyZWYsXG4gICAgbmlja25hbWUgPSBfcmVmNC5uaWNrbmFtZTtcbiAgZXZlbnRFbWl0dGVyLnJlbW92ZUFsbExpc3RlbmVycyhcInJvdXRlLVwiICsgaHJlZik7XG4gIGlmIChuaWNrbmFtZSkge1xuICAgIGV2ZW50RW1pdHRlci5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJyb3V0ZS1cIiArIG5pY2tuYW1lKTtcbiAgfVxufVxudmFyIGV2ZW50TGlzdGVuZXIgPSB7XG4gIG9uOiBvbkV2ZW50TGlzdGVuZXIsXG4gIHJlbW92ZTogcmVtb3ZlRXZlbnRMaXN0ZW5lclxufTtcbnZhciBldmVudHNTZXJ2aWNlID0ge1xuICBleGlzdEV2ZW50OiBleGlzdEV2ZW50LFxuICBldmVudExpc3RlbmVyOiBldmVudExpc3RlbmVyXG59O1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG4gIHJldHVybiBhcnIyO1xufVxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShvLCBhbGxvd0FycmF5TGlrZSkge1xuICB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTtcbiAgaWYgKGl0KSByZXR1cm4gKGl0ID0gaXQuY2FsbChvKSkubmV4dC5iaW5kKGl0KTtcbiAgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmIChpdCkgbyA9IGl0O1xuICAgIHZhciBpID0gMDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7XG4gICAgICAgIGRvbmU6IHRydWVcbiAgICAgIH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IG9baSsrXVxuICAgICAgfTtcbiAgICB9O1xuICB9XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVSb3V0ZShyb3V0ZSwgcmVnZXgsIHJvdXRlVHlwZSkge1xuICBpZiAocm91dGUuaW5jbHVkZXMoJ3t9JykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHJvdXRlOiBUaGVuICdcIiArIHJvdXRlICsgXCInIFJvdXRlIGNvbnRhaW5zICd7fScsIGJ1dCBubyBwYXJhbWV0ZXJzIHdlcmUgcHJvdmlkZWQuXCIpO1xuICB9XG4gIHZhciBvcGVuUGFyZW50aGVzZXNDb3VudCA9IChyb3V0ZS5tYXRjaCgvXFx7L2cpIHx8IFtdKS5sZW5ndGg7XG4gIHZhciBjbG9zZVBhcmVudGhlc2VzQ291bnQgPSAocm91dGUubWF0Y2goL1xcfS9nKSB8fCBbXSkubGVuZ3RoO1xuICBpZiAob3BlblBhcmVudGhlc2VzQ291bnQgPT09IGNsb3NlUGFyZW50aGVzZXNDb3VudCAmJiByZWdleC50ZXN0KHJvdXRlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGlmIChyb3V0ZVR5cGUgPT09ICduaWNrbmFtZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgbmlja25hbWU6IFRoZSAnXCIgKyByb3V0ZSArIFwiJyBuaWNrbmFtZSBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMuIE9ubHkgdXBwZXJjYXNlIGVuZCBsb3dlcmNhc2UgbGV0dGVycywgbnVtYmVycywgYW5kIHRoZSBmb2xsb3dpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFyZSBhbGxvd2VkOiAoICEsIEAsICMsICQsICUsICYsIC0sIF8sID8uICkuXCIpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHJvdXRlOiBUaGUgcm91dGUgJ1wiICsgcm91dGUgKyBcIicgY2FuIG9ubHkgY29udGFpbiBsZXR0ZXJzLCBudW1iZXJzLCBoeXBoZW5zICgtKSwgdW5kZXJzY29yZXMgKF8pLCBzbGFzaGVzICgvKSwgYW5kIGJyYWNlcyAoe30pLlwiKTtcbiAgfVxufVxuZnVuY3Rpb24gaXNBVmFsaWRIcmVmUm91dGUocm91dGUpIHtcbiAgaWYgKHJvdXRlID09PSAnLycpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAocm91dGVbMF0gIT09ICcvJykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcm91dGU6IFRoZSAnXCIgKyByb3V0ZSArIFwiJyByb3V0ZSBtdXN0IGJlZ2luIHdpdGggJy8nXCIpO1xuICB9XG4gIHZhciByZWdleCA9IC9eXFwvKChbYS16QS1aMC05LV9dK3xcXHtbYS16QS1aMC05LV8sXStcXH0pXFwvPykrJC87XG4gIHJldHVybiB2YWxpZGF0ZVJvdXRlKHJvdXRlLCByZWdleCwgJ2hyZWYnKTtcbn1cbmZ1bmN0aW9uIGlzQVZhbGlkTmlja25hbWVSb3V0ZShyb3V0ZSkge1xuICB2YXIgcmVnZXggPSAvXlthLXpBLVowLTkhQCMkJSZcXC1fPy5dKyQvO1xuICByZXR1cm4gdmFsaWRhdGVSb3V0ZShyb3V0ZSwgcmVnZXgsICduaWNrbmFtZScpO1xufVxuZnVuY3Rpb24gaXNWYWxpZFN0cmluZ0ZvclVSTChzdHIpIHtcbiAgdmFyIHBhdHRlcm4gPSAvXlthLXpBLVowLTlfLV0rJC87XG4gIHJldHVybiBwYXR0ZXJuLnRlc3Qoc3RyKTtcbn1cbmZ1bmN0aW9uIG1hdGNoRHluYW1pY1JvdXRlKGFic29sdXRlVXJsLCBkeW5hbWljVmFsdWVzKSB7XG4gIGlmIChhYnNvbHV0ZVVybCA9PT0gJy8nKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKCFkeW5hbWljVmFsdWVzICYmIGFic29sdXRlVXJsLmluY2x1ZGVzKCd7JykgJiYgYWJzb2x1dGVVcmwuaW5jbHVkZXMoJ30nKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgJ2R5bmFtaWNWYWx1ZXMnIHBhcmFtZXRlciwgYnV0IHRoZSBcIiArIGFic29sdXRlVXJsICsgXCIgcm91dGUgY29udGFpbnMgZHluYW1pYyBrZXlzLlwiKTtcbiAgfVxuICB2YXIgYWJzb2x1dGVSb3V0ZVBhcnRzID0gYWJzb2x1dGVVcmwuc3BsaXQoJy8nKTtcbiAgdmFyIGR5bmFtaWNLZXlzID0gZHluYW1pY1ZhbHVlcyA9PSBudWxsID8gdm9pZCAwIDogZHluYW1pY1ZhbHVlcy5tYXAoZnVuY3Rpb24gKGR5bmFtaWNWYWx1ZSkge1xuICAgIGlmICghaXNWYWxpZFN0cmluZ0ZvclVSTChkeW5hbWljVmFsdWUudmFsdWUudG9TdHJpbmcoKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBkeW5hbWljVmFsdWUgKFwiICsgZHluYW1pY1ZhbHVlLnZhbHVlICsgXCIpIG9mICdcIiArIGR5bmFtaWNWYWx1ZS5rZXkgKyBcIicga2V5IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycy4gVXNlIG9ubHkgbGV0dGVycywgbnVtYmVycywgdW5kZXJzY29yZXMgKF8pIGFuZCBoeXBoZW5zICgtKS4gU3BhY2VzIGFuZCBvdGhlciBjaGFyYWN0ZXJzIGFyZSBub3QgYWxsb3dlZFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIFwie1wiICsgZHluYW1pY1ZhbHVlLmtleSArIFwifVwiO1xuICB9KTtcbiAgdmFyIHJvdXRlRHluYW1pY0tleXMgPSBhYnNvbHV0ZVJvdXRlUGFydHMuZmlsdGVyKGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgcmV0dXJuIHBhcnQuaW5jbHVkZXMoJ3snKSAmJiBwYXJ0LmluY2x1ZGVzKCd9Jyk7XG4gIH0pO1xuICB2YXIgZHluYW1pY0tleXNTZXQgPSBuZXcgU2V0KGR5bmFtaWNLZXlzKTtcbiAgaWYgKCFyb3V0ZUR5bmFtaWNLZXlzLmxlbmd0aCAmJiB0eXBlb2YgZHluYW1pY1ZhbHVlcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAocm91dGVEeW5hbWljS2V5cy5sZW5ndGggIT09IChkeW5hbWljVmFsdWVzID09IG51bGwgPyB2b2lkIDAgOiBkeW5hbWljVmFsdWVzLmxlbmd0aCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBudW1iZXIgb2YgZHluYW1pYyBrZXlzIGluIHRoZSByb3V0ZSBkb2VzIG5vdCBtYXRjaCB0aGUgbnVtYmVyIG9mIGR5bmFtaWMgdmFsdWVzIHNwZWNpZmllZC4nKTtcbiAgfVxuICBmb3IgKHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKHJvdXRlRHluYW1pY0tleXMpLCBfc3RlcDsgIShfc3RlcCA9IF9pdGVyYXRvcigpKS5kb25lOykge1xuICAgIHZhciBwYXJ0ID0gX3N0ZXAudmFsdWU7XG4gICAgaWYgKCFkeW5hbWljS2V5c1NldC5oYXMocGFydCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBkeW5hbWljIHJvdXRlICdcIiArIHBhcnQgKyBcIicgcGFzc2VkIHdhcyBub3QgZm91bmQgaW4gZHluYW1pY1ZhbHVlcy4gUGxlYXNlIGNoZWNrIHdoaWNoIHByYW1zIGFyZSBhdmFpbGFibGUhXCIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHJlcGxhY2VEeW5hbWljVmFsdWVzKGFic29sdXRlVXJsLCBkeW5hbWljVmFsdWVzKSB7XG4gIHZhciBzdWJzdGl0dXRlZFVybCA9IGFic29sdXRlVXJsO1xuICBpZiAoZHluYW1pY1ZhbHVlcykge1xuICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKGR5bmFtaWNWYWx1ZXMpLCBfc3RlcDI7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMigpKS5kb25lOykge1xuICAgICAgdmFyIGR5bmFtaWNWYWx1ZSA9IF9zdGVwMi52YWx1ZTtcbiAgICAgIHZhciBrZXkgPSBcIntcIiArIGR5bmFtaWNWYWx1ZS5rZXkgKyBcIn1cIjtcbiAgICAgIHZhciB2YWx1ZSA9IGR5bmFtaWNWYWx1ZS52YWx1ZTtcbiAgICAgIHN1YnN0aXR1dGVkVXJsID0gc3Vic3RpdHV0ZWRVcmwucmVwbGFjZShuZXcgUmVnRXhwKGVzY2FwZVJlZ0V4cChrZXkpLCAnZycpLCB2YWx1ZS50b1N0cmluZygpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN1YnN0aXR1dGVkVXJsO1xufVxuZnVuY3Rpb24gZXNjYXBlUmVnRXhwKGtleSkge1xuICByZXR1cm4ga2V5LnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLCAnXFxcXCQmJyk7XG59XG5mdW5jdGlvbiBnZW5lcmF0ZVF1ZXJ5U3RyaW5nKHF1ZXJ5U3RyaW5ncykge1xuICB2YXIgcXVlcnkgPSAnJztcbiAgcXVlcnlTdHJpbmdzLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtLCBpbmRleCkge1xuICAgIHZhciBxeSA9IHBhcmFtLmtleSArIFwiPVwiICsgcGFyYW0udmFsdWU7XG4gICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICBxdWVyeSA9ICc/JyArIHF5O1xuICAgIH0gZWxzZSB7XG4gICAgICBxdWVyeSArPSAnJiYnICsgcXk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHF1ZXJ5O1xufVxudmFyIHJvdXRlU2VydmljZSA9IHtcbiAgaXNBVmFsaWRIcmVmUm91dGU6IGlzQVZhbGlkSHJlZlJvdXRlLFxuICBtYXRjaER5bmFtaWNSb3V0ZTogbWF0Y2hEeW5hbWljUm91dGUsXG4gIHJlcGxhY2VEeW5hbWljVmFsdWVzOiByZXBsYWNlRHluYW1pY1ZhbHVlcyxcbiAgZ2VuZXJhdGVRdWVyeVN0cmluZzogZ2VuZXJhdGVRdWVyeVN0cmluZyxcbiAgaXNBVmFsaWROaWNrbmFtZVJvdXRlOiBpc0FWYWxpZE5pY2tuYW1lUm91dGVcbn07XG5cbmZ1bmN0aW9uIExpbmsobGlua1Byb3BzKSB7XG4gIHZhciBsaW5rUmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUobGlua1Byb3BzLmhyZWYpLFxuICAgIGxpbmsgPSBfdXNlU3RhdGVbMF0sXG4gICAgc2V0TGluayA9IF91c2VTdGF0ZVsxXTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBldmVudHNTZXJ2aWNlLmV2ZW50TGlzdGVuZXIub24obGlua1Byb3BzLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBuZXdMaW5rID0gbGlua1Byb3BzLmhyZWY7XG4gICAgICBpZiAocm91dGVTZXJ2aWNlLm1hdGNoRHluYW1pY1JvdXRlKGxpbmtQcm9wcy5ocmVmLCBldmVudCA9PSBudWxsID8gdm9pZCAwIDogZXZlbnQuZHluYW1pY1JvdXRlKSkge1xuICAgICAgICBuZXdMaW5rID0gcm91dGVTZXJ2aWNlLnJlcGxhY2VEeW5hbWljVmFsdWVzKGxpbmtQcm9wcy5ocmVmLCBldmVudCA9PSBudWxsID8gdm9pZCAwIDogZXZlbnQuZHluYW1pY1JvdXRlKTtcbiAgICAgIH1cbiAgICAgIGlmIChldmVudCAhPSBudWxsICYmIGV2ZW50LnF1ZXJ5U3RyaW5ncyAmJiBldmVudC5xdWVyeVN0cmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICBuZXdMaW5rICs9IHJvdXRlU2VydmljZS5nZW5lcmF0ZVF1ZXJ5U3RyaW5nKGV2ZW50LnF1ZXJ5U3RyaW5ncyk7XG4gICAgICB9XG4gICAgICBpZiAobmV3TGluayAhPT0gbGluaykge1xuICAgICAgICBzZXRMaW5rKG5ld0xpbmspO1xuICAgICAgfVxuICAgICAgaWYgKChldmVudCA9PSBudWxsID8gdm9pZCAwIDogZXZlbnQub3BlbikgPT09ICduZXdUYWInKSB7XG4gICAgICAgIG9wZW4obmV3TGluaywgJ19ibGFuaycpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9saW5rUmVmJGN1cnJlbnQ7XG4gICAgICAgIChfbGlua1JlZiRjdXJyZW50ID0gbGlua1JlZi5jdXJyZW50KSA9PSBudWxsIHx8IF9saW5rUmVmJGN1cnJlbnQuY2xpY2soKTtcbiAgICAgIH0sIDEpO1xuICAgIH0pO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBldmVudHNTZXJ2aWNlLmV2ZW50TGlzdGVuZXIucmVtb3ZlKGxpbmtQcm9wcyk7XG4gICAgfTtcbiAgfSwgW2xpbmtQcm9wc10pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChOZXh0TGluaywge1xuICAgIGhyZWY6IGxpbmssXG4gICAgcmVmOiBsaW5rUmVmLFxuICAgIHN0eWxlOiB7XG4gICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBDb250YWluZXJMaW5rKF9yZWYpIHtcbiAgdmFyIGxpbmtzID0gX3JlZi5saW5rcztcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgbGlua3MubWFwKGZ1bmN0aW9uIChsaW5rKSB7XG4gICAgaWYgKGV2ZW50c1NlcnZpY2UuZXhpc3RFdmVudChsaW5rcywgbGluaykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBocmVmICdcIiArIGxpbmsuaHJlZiArIFwiJyBvciBuaWNrbmFtZSAnXCIgKyBsaW5rLm5pY2tuYW1lICsgXCInIGFscmVhZHkgZXhpc3QgaW4gdGhlIGxvY2FsIG9yIGdsb2JhbCBsaW5rIGxpc3QhXCIpO1xuICAgIH1cbiAgICByb3V0ZVNlcnZpY2UuaXNBVmFsaWRIcmVmUm91dGUobGluay5ocmVmKTtcbiAgICBpZiAobGluay5uaWNrbmFtZSkge1xuICAgICAgcm91dGVTZXJ2aWNlLmlzQVZhbGlkTmlja25hbWVSb3V0ZShsaW5rLm5pY2tuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywge1xuICAgICAgaHJlZjogbGluay5ocmVmLFxuICAgICAgbmlja25hbWU6IGxpbmsubmlja25hbWUsXG4gICAgICBrZXk6IGxpbmsuaHJlZlxuICAgIH0pO1xuICB9KSk7XG59XG5cbnZhciBwcm9ncmVzcyA9IHtcbiAgZG9uZTogZnVuY3Rpb24gZG9uZSQxKCkge1xuICAgIHZhciBucGdjbGFzcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2h0bWwnKTtcbiAgICBkb25lKCk7XG4gICAgW10uZm9yRWFjaC5jYWxsKG5wZ2NsYXNzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ25wcm9ncmVzcy1idXN5Jyk7XG4gICAgfSk7XG4gIH0sXG4gIHN0YXJ0OiBmdW5jdGlvbiBzdGFydCQxKCkge1xuICAgIHN0YXJ0KCk7XG4gIH1cbn07XG5mdW5jdGlvbiBpc0FuY2hvck9mQ3VycmVudFVybChjdXJyZW50VXJsLCBuZXdVcmwpIHtcbiAgdmFyIGN1cnJlbnRVcmxPYmogPSBuZXcgVVJMKGN1cnJlbnRVcmwpO1xuICB2YXIgbmV3VXJsT2JqID0gbmV3IFVSTChuZXdVcmwpO1xuICAvLyBDb21wYXJlIGhvc3RuYW1lLCBwYXRobmFtZSwgYW5kIHNlYXJjaCBwYXJhbWV0ZXJzXG4gIGlmIChjdXJyZW50VXJsT2JqLmhvc3RuYW1lID09PSBuZXdVcmxPYmouaG9zdG5hbWUgJiYgY3VycmVudFVybE9iai5wYXRobmFtZSA9PT0gbmV3VXJsT2JqLnBhdGhuYW1lICYmIGN1cnJlbnRVcmxPYmouc2VhcmNoID09PSBuZXdVcmxPYmouc2VhcmNoKSB7XG4gICAgLy8gQ2hlY2sgaWYgdGhlIG5ldyBVUkwgaXMganVzdCBhbiBhbmNob3Igb2YgdGhlIGN1cnJlbnQgVVJMIHBhZ2VcbiAgICB2YXIgY3VycmVudEhhc2ggPSBjdXJyZW50VXJsT2JqLmhhc2g7XG4gICAgdmFyIG5ld0hhc2ggPSBuZXdVcmxPYmouaGFzaDtcbiAgICByZXR1cm4gY3VycmVudEhhc2ggIT09IG5ld0hhc2ggJiYgY3VycmVudFVybE9iai5ocmVmLnJlcGxhY2UoY3VycmVudEhhc2gsICcnKSA9PT0gbmV3VXJsT2JqLmhyZWYucmVwbGFjZShuZXdIYXNoLCAnJyk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gZmluZENsb3Nlc3RBbmNob3IoZWxlbWVudCkge1xuICB3aGlsZSAoZWxlbWVudCAmJiBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ2EnKSB7XG4gICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWxlbWVudDtcbn1cbmZ1bmN0aW9uIGlzRXh0ZXJuYWxMaW5rKGV2ZW50LCBjdXJyZW50QW5jaG9yKSB7XG4gIGlmIChldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSB8fCBjdXJyZW50QW5jaG9yLnRhcmdldCA9PT0gJ19ibGFuaycpIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICB0cnkge1xuICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgdmFyIGFuY2hvciA9IGZpbmRDbG9zZXN0QW5jaG9yKHRhcmdldCk7XG4gICAgaWYgKGFuY2hvcikge1xuICAgICAgaWYgKGlzRXh0ZXJuYWxMaW5rKGV2ZW50LCBhbmNob3IpKSByZXR1cm47XG4gICAgICB2YXIgY3VycmVudFVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgdmFyIG5ld1VybCA9IGFuY2hvci5ocmVmO1xuICAgICAgdmFyIGlzQW5jaG9yID0gaXNBbmNob3JPZkN1cnJlbnRVcmwoY3VycmVudFVybCwgbmV3VXJsKTtcbiAgICAgIGlmIChuZXdVcmwgPT09IGN1cnJlbnRVcmwgfHwgaXNBbmNob3IpIHtcbiAgICAgICAgcHJvZ3Jlc3Muc3RhcnQoKTtcbiAgICAgICAgcHJvZ3Jlc3MuZG9uZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvZ3Jlc3Muc3RhcnQoKTtcbiAgICAgICAgKGZ1bmN0aW9uIChoaXN0b3J5KSB7XG4gICAgICAgICAgdmFyIHB1c2hTdGF0ZSA9IGhpc3RvcnkucHVzaFN0YXRlO1xuICAgICAgICAgIGhpc3RvcnkucHVzaFN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcHJvZ3Jlc3MuZG9uZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHB1c2hTdGF0ZS5hcHBseShoaXN0b3J5LCBhcmd1bWVudHMpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHdpbmRvdy5oaXN0b3J5KTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIExvZyB0aGUgZXJyb3IgaW4gZGV2ZWxvcG1lbnQgb25seSFcbiAgICBjb25zb2xlLmxvZygnTmV4dFRvcExvYWRlciBlcnJvcjogJywgZXJyKTtcbiAgICBwcm9ncmVzcy5zdGFydCgpO1xuICAgIGRvbmUoKTtcbiAgfVxufVxuXG52YXIgUHJvZ3Jlc3NMb2FkZXIgPSBmdW5jdGlvbiBQcm9ncmVzc0xvYWRlcihfcmVmKSB7XG4gIHZhciBwcm9wQ29sb3IgPSBfcmVmLmNvbG9yLFxuICAgIHByb3BIZWlnaHQgPSBfcmVmLmhlaWdodCxcbiAgICBzaG93U3Bpbm5lciA9IF9yZWYuc2hvd1NwaW5uZXIsXG4gICAgY3Jhd2wgPSBfcmVmLmNyYXdsLFxuICAgIGNyYXdsU3BlZWQgPSBfcmVmLmNyYXdsU3BlZWQsXG4gICAgaW5pdGlhbFBvc2l0aW9uID0gX3JlZi5pbml0aWFsUG9zaXRpb24sXG4gICAgZWFzaW5nID0gX3JlZi5lYXNpbmcsXG4gICAgc3BlZWQgPSBfcmVmLnNwZWVkLFxuICAgIHNoYWRvdyA9IF9yZWYuc2hhZG93LFxuICAgIHRlbXBsYXRlID0gX3JlZi50ZW1wbGF0ZSxcbiAgICBfcmVmJHpJbmRleCA9IF9yZWYuekluZGV4LFxuICAgIHpJbmRleCA9IF9yZWYkekluZGV4ID09PSB2b2lkIDAgPyAxNjAwIDogX3JlZiR6SW5kZXg7XG4gIHZhciBwYXRobmFtZSA9IHVzZVBhdGhuYW1lKCk7XG4gIHZhciBzZWFyY2hQYXJhbXMgPSB1c2VTZWFyY2hQYXJhbXMoKTtcbiAgdmFyIGRlZmF1bHRDb2xvciA9ICcjMjlkJztcbiAgdmFyIGRlZmF1bHRIZWlnaHQgPSAzO1xuICB2YXIgY29sb3IgPSBwcm9wQ29sb3IgIT0gbnVsbCA/IHByb3BDb2xvciA6IGRlZmF1bHRDb2xvcjtcbiAgdmFyIGhlaWdodCA9IHByb3BIZWlnaHQgIT0gbnVsbCA/IHByb3BIZWlnaHQgOiBkZWZhdWx0SGVpZ2h0O1xuICAvLyBBbnkgZmFsc3kgKGV4Y2VwdCB1bmRlZmluZWQpIHdpbGwgZGlzYWJsZSB0aGUgc2hhZG93XG4gIHZhciBib3hTaGFkb3cgPSAhc2hhZG93ICYmIHNoYWRvdyAhPT0gdW5kZWZpbmVkID8gJycgOiBzaGFkb3cgPyBcImJveC1zaGFkb3c6XCIgKyBzaGFkb3cgOiBcImJveC1zaGFkb3c6MCAwIDEwcHggXCIgKyBjb2xvciArIFwiLDAgMCA1cHggXCIgKyBjb2xvcjtcbiAgdmFyIHN0eWxlcyA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiLCBudWxsLCBcIiNucHJvZ3Jlc3N7cG9pbnRlci1ldmVudHM6bm9uZX0jbnByb2dyZXNzIC5iYXJ7YmFja2dyb3VuZDpcIiArIGNvbG9yICsgXCI7cG9zaXRpb246Zml4ZWQ7ei1pbmRleDpcIiArIHpJbmRleCArIFwiO3RvcDowO2xlZnQ6MDt3aWR0aDoxMDAlO2hlaWdodDpcIiArIGhlaWdodCArIFwicHh9I25wcm9ncmVzcyAucGVne2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MDt3aWR0aDoxMDBweDtoZWlnaHQ6MTAwJTtcIiArIGJveFNoYWRvdyArIFwiO29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoM2RlZykgdHJhbnNsYXRlKDBweCwtNHB4KTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgzZGVnKSB0cmFuc2xhdGUoMHB4LC00cHgpO3RyYW5zZm9ybTpyb3RhdGUoM2RlZykgdHJhbnNsYXRlKDBweCwtNHB4KX0jbnByb2dyZXNzIC5zcGlubmVye2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246Zml4ZWQ7ei1pbmRleDpcIiArIHpJbmRleCArIFwiO3RvcDoxNXB4O3JpZ2h0OjE1cHh9I25wcm9ncmVzcyAuc3Bpbm5lci1pY29ue3dpZHRoOjE4cHg7aGVpZ2h0OjE4cHg7Ym94LXNpemluZzpib3JkZXItYm94O2JvcmRlcjoycHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLXRvcC1jb2xvcjpcIiArIGNvbG9yICsgXCI7Ym9yZGVyLWxlZnQtY29sb3I6XCIgKyBjb2xvciArIFwiO2JvcmRlci1yYWRpdXM6NTAlOy13ZWJraXQtYW5pbWF0aW9uOm5wcm9ncmVzcy1zcGlubmVyIDQwMG1zIGxpbmVhciBpbmZpbml0ZTthbmltYXRpb246bnByb2dyZXNzLXNwaW5uZXIgNDAwbXMgbGluZWFyIGluZmluaXRlfS5ucHJvZ3Jlc3MtY3VzdG9tLXBhcmVudHtvdmVyZmxvdzpoaWRkZW47cG9zaXRpb246cmVsYXRpdmV9Lm5wcm9ncmVzcy1jdXN0b20tcGFyZW50ICNucHJvZ3Jlc3MgLmJhciwubnByb2dyZXNzLWN1c3RvbS1wYXJlbnQgI25wcm9ncmVzcyAuc3Bpbm5lcntwb3NpdGlvbjphYnNvbHV0ZX1ALXdlYmtpdC1rZXlmcmFtZXMgbnByb2dyZXNzLXNwaW5uZXJ7MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDBkZWcpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDM2MGRlZyl9fUBrZXlmcmFtZXMgbnByb2dyZXNzLXNwaW5uZXJ7MCV7dHJhbnNmb3JtOnJvdGF0ZSgwZGVnKX0xMDAle3RyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKX19XCIpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGNvbmZpZ3VyZSh7XG4gICAgICBzaG93U3Bpbm5lcjogc2hvd1NwaW5uZXIgIT0gbnVsbCA/IHNob3dTcGlubmVyIDogdHJ1ZSxcbiAgICAgIHRyaWNrbGU6IGNyYXdsICE9IG51bGwgPyBjcmF3bCA6IHRydWUsXG4gICAgICB0cmlja2xlU3BlZWQ6IGNyYXdsU3BlZWQgIT0gbnVsbCA/IGNyYXdsU3BlZWQgOiAyMDAsXG4gICAgICBtaW5pbXVtOiBpbml0aWFsUG9zaXRpb24gIT0gbnVsbCA/IGluaXRpYWxQb3NpdGlvbiA6IDAuMSxcbiAgICAgIGVhc2luZzogZWFzaW5nICE9IG51bGwgPyBlYXNpbmcgOiAnZWFzZScsXG4gICAgICBzcGVlZDogc3BlZWQgIT0gbnVsbCA/IHNwZWVkIDogMjAwLFxuICAgICAgdGVtcGxhdGU6IHRlbXBsYXRlICE9IG51bGwgPyB0ZW1wbGF0ZSA6IFwiPGRpdiBjbGFzcz1cXFwiYmFyXFxcIiByb2xlPVxcXCJiYXJcXFwiPlxcbiAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwZWdcXFwiPjwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzcGlubmVyXFxcIiByb2xlPVxcXCJzcGlubmVyXFxcIj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cXFwic3Bpbm5lci1pY29uXFxcIj48L2Rpdj5cXG4gICAgICAgIDwvZGl2PlwiXG4gICAgfSk7XG4gIH0sIFtdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAvLyBBZGQgdGhlIGdsb2JhbCBjbGljayBldmVudCBsaXN0ZW5lclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ2xpY2spO1xuICAgIC8vIENsZWFuIHVwIHRoZSBnbG9iYWwgY2xpY2sgZXZlbnQgbGlzdGVuZXIgd2hlbiB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZFxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUNsaWNrKTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcHJvZ3Jlc3MuZG9uZSgpO1xuICB9LCBbcGF0aG5hbWUsIHNlYXJjaFBhcmFtc10pO1xuICByZXR1cm4gc3R5bGVzO1xufTtcblxuLyoqXHJcbiAqIFRoZSBuZXcgYW5kIHVwZGF0ZWQgdXNlUm91dGVyKCkgaG9va1xyXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlcigpIHtcbiAgdmFyIHJvdXRlciA9IHVzZVJvdXRlciQxKCk7XG4gIGZ1bmN0aW9uIHB1c2gocm91dGVOYW1lLCBwYXJhbXMpIHtcbiAgICBjaGFuZ2VSb3V0ZShyb3V0ZU5hbWUsIHBhcmFtcyk7XG4gIH1cbiAgZnVuY3Rpb24gYmFjaygpIHtcbiAgICBwcm9ncmVzcy5zdGFydCgpO1xuICAgIHJvdXRlci5iYWNrKCk7XG4gIH1cbiAgZnVuY3Rpb24gcmVwbGFjZShyb3V0ZU5hbWUsIHBhcmFtcykge1xuICAgIGNoYW5nZVJvdXRlKHJvdXRlTmFtZSwgcGFyYW1zKTtcbiAgfVxuICByZXR1cm4gX2V4dGVuZHMoe30sIHJvdXRlciwge1xuICAgIHB1c2g6IHB1c2gsXG4gICAgYmFjazogYmFjayxcbiAgICByZXBsYWNlOiByZXBsYWNlXG4gIH0pO1xufVxuXG5leHBvcnQgeyBDb250YWluZXJMaW5rLCBQcm9ncmVzc0xvYWRlciwgY2hhbmdlUm91dGUsIHVzZVJvdXRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV4dGpzLXByb2dyZXNzbG9hZGVyLmVzbS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiTmV4dExpbmsiLCJFdmVudEVtaXR0ZXIiLCJkb25lIiwic3RhcnQiLCJjb25maWd1cmUiLCJ1c2VQYXRobmFtZSIsInVzZVNlYXJjaFBhcmFtcyIsInVzZVJvdXRlciIsInVzZVJvdXRlciQxIiwiZXZlbnRFbWl0dGVyIiwiY29tcGFyZVBhc3NlZExpbmtzIiwibGlua3MiLCJfcmVmIiwiaHJlZiIsIm5pY2tuYW1lIiwicGFzc2VkTGluayIsImZpbHRlciIsImxpbmsiLCJleGlzdEVxdWFsTGlua3MiLCJpbmRleCIsImxlbmd0aCIsImFjdHVhbExpbmsiLCJuZXh0TGluayIsImV4aXN0RXZlbnQiLCJfcmVmMiIsImxpc3RlbmVyQ291bnQiLCJjaGFuZ2VSb3V0ZSIsIlJvdXRlTmFtZSIsInBhcmFtcyIsImV2ZW50Q2FsbGVkIiwiZW1pdCIsIkVycm9yIiwibGlzdGVuRW1pdHRlZEV2ZW50IiwiY2FsbGJhY2tGbiIsImFkZExpc3RlbmVyIiwib25FdmVudExpc3RlbmVyIiwiX3JlZjMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiX3JlZjQiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJldmVudExpc3RlbmVyIiwib24iLCJyZW1vdmUiLCJldmVudHNTZXJ2aWNlIiwiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJiaW5kIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwibyIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwibiIsInRvU3RyaW5nIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJBcnJheSIsImZyb20iLCJ0ZXN0IiwiYXJyIiwibGVuIiwiYXJyMiIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UiLCJhbGxvd0FycmF5TGlrZSIsIml0IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuZXh0IiwiaXNBcnJheSIsInZhbHVlIiwiVHlwZUVycm9yIiwidmFsaWRhdGVSb3V0ZSIsInJvdXRlIiwicmVnZXgiLCJyb3V0ZVR5cGUiLCJpbmNsdWRlcyIsIm9wZW5QYXJlbnRoZXNlc0NvdW50IiwibWF0Y2giLCJjbG9zZVBhcmVudGhlc2VzQ291bnQiLCJpc0FWYWxpZEhyZWZSb3V0ZSIsImlzQVZhbGlkTmlja25hbWVSb3V0ZSIsImlzVmFsaWRTdHJpbmdGb3JVUkwiLCJzdHIiLCJwYXR0ZXJuIiwibWF0Y2hEeW5hbWljUm91dGUiLCJhYnNvbHV0ZVVybCIsImR5bmFtaWNWYWx1ZXMiLCJhYnNvbHV0ZVJvdXRlUGFydHMiLCJzcGxpdCIsImR5bmFtaWNLZXlzIiwibWFwIiwiZHluYW1pY1ZhbHVlIiwicm91dGVEeW5hbWljS2V5cyIsInBhcnQiLCJkeW5hbWljS2V5c1NldCIsIlNldCIsIl9pdGVyYXRvciIsIl9zdGVwIiwiaGFzIiwicmVwbGFjZUR5bmFtaWNWYWx1ZXMiLCJzdWJzdGl0dXRlZFVybCIsIl9pdGVyYXRvcjIiLCJfc3RlcDIiLCJyZXBsYWNlIiwiUmVnRXhwIiwiZXNjYXBlUmVnRXhwIiwiZ2VuZXJhdGVRdWVyeVN0cmluZyIsInF1ZXJ5U3RyaW5ncyIsInF1ZXJ5IiwiZm9yRWFjaCIsInBhcmFtIiwicXkiLCJyb3V0ZVNlcnZpY2UiLCJMaW5rIiwibGlua1Byb3BzIiwibGlua1JlZiIsIl91c2VTdGF0ZSIsInNldExpbmsiLCJldmVudCIsIm5ld0xpbmsiLCJkeW5hbWljUm91dGUiLCJvcGVuIiwic2V0VGltZW91dCIsIl9saW5rUmVmJGN1cnJlbnQiLCJjdXJyZW50IiwiY2xpY2siLCJjcmVhdGVFbGVtZW50IiwicmVmIiwic3R5bGUiLCJkaXNwbGF5IiwiQ29udGFpbmVyTGluayIsInByb2dyZXNzIiwiZG9uZSQxIiwibnBnY2xhc3MiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJlbCIsImNsYXNzTGlzdCIsInN0YXJ0JDEiLCJpc0FuY2hvck9mQ3VycmVudFVybCIsImN1cnJlbnRVcmwiLCJuZXdVcmwiLCJjdXJyZW50VXJsT2JqIiwiVVJMIiwibmV3VXJsT2JqIiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsInNlYXJjaCIsImN1cnJlbnRIYXNoIiwiaGFzaCIsIm5ld0hhc2giLCJmaW5kQ2xvc2VzdEFuY2hvciIsImVsZW1lbnQiLCJ0YWdOYW1lIiwidG9Mb3dlckNhc2UiLCJwYXJlbnRFbGVtZW50IiwiaXNFeHRlcm5hbExpbmsiLCJjdXJyZW50QW5jaG9yIiwiYWx0S2V5IiwiY3RybEtleSIsInNoaWZ0S2V5IiwiaGFuZGxlQ2xpY2siLCJhbmNob3IiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImlzQW5jaG9yIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJQcm9ncmVzc0xvYWRlciIsInByb3BDb2xvciIsImNvbG9yIiwicHJvcEhlaWdodCIsImhlaWdodCIsInNob3dTcGlubmVyIiwiY3Jhd2wiLCJjcmF3bFNwZWVkIiwiaW5pdGlhbFBvc2l0aW9uIiwiZWFzaW5nIiwic3BlZWQiLCJzaGFkb3ciLCJ0ZW1wbGF0ZSIsIl9yZWYkekluZGV4IiwiekluZGV4Iiwic2VhcmNoUGFyYW1zIiwiZGVmYXVsdENvbG9yIiwiZGVmYXVsdEhlaWdodCIsImJveFNoYWRvdyIsInVuZGVmaW5lZCIsInN0eWxlcyIsInRyaWNrbGUiLCJ0cmlja2xlU3BlZWQiLCJtaW5pbXVtIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJvdXRlciIsInB1c2giLCJyb3V0ZU5hbWUiLCJiYWNrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/nextjs-progressloader@1.1.0_next@14.0.4_react-dom@18.2.0_react@18.2.0/node_modules/nextjs-progressloader/dist/nextjs-progressloader.esm.js\n");

/***/ })

};
;
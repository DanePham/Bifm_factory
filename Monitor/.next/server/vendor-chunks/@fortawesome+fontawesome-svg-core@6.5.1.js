"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@fortawesome+fontawesome-svg-core@6.5.1";
exports.ids = ["vendor-chunks/@fortawesome+fontawesome-svg-core@6.5.1"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@fortawesome+fontawesome-svg-core@6.5.1/node_modules/@fortawesome/fontawesome-svg-core/styles.css":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@fortawesome+fontawesome-svg-core@6.5.1/node_modules/@fortawesome/fontawesome-svg-core/styles.css ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"e413b35717b1\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGZvcnRhd2Vzb21lK2ZvbnRhd2Vzb21lLXN2Zy1jb3JlQDYuNS4xL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtc3ZnLWNvcmUvc3R5bGVzLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvLnBucG0vQGZvcnRhd2Vzb21lK2ZvbnRhd2Vzb21lLXN2Zy1jb3JlQDYuNS4xL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtc3ZnLWNvcmUvc3R5bGVzLmNzcz9kNTM0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiZTQxM2IzNTcxN2IxXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@fortawesome+fontawesome-svg-core@6.5.1/node_modules/@fortawesome/fontawesome-svg-core/styles.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@fortawesome+fontawesome-svg-core@6.5.1/node_modules/@fortawesome/fontawesome-svg-core/index.mjs":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@fortawesome+fontawesome-svg-core@6.5.1/node_modules/@fortawesome/fontawesome-svg-core/index.mjs ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   api: () => (/* binding */ api),\n/* harmony export */   config: () => (/* binding */ config$1),\n/* harmony export */   counter: () => (/* binding */ counter),\n/* harmony export */   dom: () => (/* binding */ dom$1),\n/* harmony export */   findIconDefinition: () => (/* binding */ findIconDefinition$1),\n/* harmony export */   icon: () => (/* binding */ icon),\n/* harmony export */   layer: () => (/* binding */ layer),\n/* harmony export */   library: () => (/* binding */ library$1),\n/* harmony export */   noAuto: () => (/* binding */ noAuto$1),\n/* harmony export */   parse: () => (/* binding */ parse$1),\n/* harmony export */   text: () => (/* binding */ text),\n/* harmony export */   toHtml: () => (/* binding */ toHtml$1)\n/* harmony export */ });\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction _wrapRegExp() {\n    _wrapRegExp = function(re, groups) {\n        return new BabelRegExp(re, void 0, groups);\n    };\n    var _super = RegExp.prototype, _groups = new WeakMap();\n    function BabelRegExp(re, flags, groups) {\n        var _this = new RegExp(re, flags);\n        return _groups.set(_this, groups || _groups.get(re)), _setPrototypeOf(_this, BabelRegExp.prototype);\n    }\n    function buildGroups(result, re) {\n        var g = _groups.get(re);\n        return Object.keys(g).reduce(function(groups, name) {\n            return groups[name] = result[g[name]], groups;\n        }, Object.create(null));\n    }\n    return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function(str) {\n        var result = _super.exec.call(this, str);\n        return result && (result.groups = buildGroups(result, this)), result;\n    }, BabelRegExp.prototype[Symbol.replace] = function(str, substitution) {\n        if (\"string\" == typeof substitution) {\n            var groups = _groups.get(this);\n            return _super[Symbol.replace].call(this, str, substitution.replace(/\\$<([^>]+)>/g, function(_, name) {\n                return \"$\" + groups[name];\n            }));\n        }\n        if (\"function\" == typeof substitution) {\n            var _this = this;\n            return _super[Symbol.replace].call(this, str, function() {\n                var args = arguments;\n                return \"object\" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args);\n            });\n        }\n        return _super[Symbol.replace].call(this, str, substitution);\n    }, _wrapRegExp.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n        writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nvar noop = function noop() {};\nvar _WINDOW = {};\nvar _DOCUMENT = {};\nvar _MUTATION_OBSERVER = null;\nvar _PERFORMANCE = {\n    mark: noop,\n    measure: noop\n};\ntry {\n    if (false) {}\n    if (typeof document !== \"undefined\") _DOCUMENT = document;\n    if (typeof MutationObserver !== \"undefined\") _MUTATION_OBSERVER = MutationObserver;\n    if (typeof performance !== \"undefined\") _PERFORMANCE = performance;\n} catch (e) {}\nvar _ref = _WINDOW.navigator || {}, _ref$userAgent = _ref.userAgent, userAgent = _ref$userAgent === void 0 ? \"\" : _ref$userAgent;\nvar WINDOW = _WINDOW;\nvar DOCUMENT = _DOCUMENT;\nvar MUTATION_OBSERVER = _MUTATION_OBSERVER;\nvar PERFORMANCE = _PERFORMANCE;\nvar IS_BROWSER = !!WINDOW.document;\nvar IS_DOM = !!DOCUMENT.documentElement && !!DOCUMENT.head && typeof DOCUMENT.addEventListener === \"function\" && typeof DOCUMENT.createElement === \"function\";\nvar IS_IE = ~userAgent.indexOf(\"MSIE\") || ~userAgent.indexOf(\"Trident/\");\nvar _familyProxy, _familyProxy2, _familyProxy3, _familyProxy4, _familyProxy5;\nvar NAMESPACE_IDENTIFIER = \"___FONT_AWESOME___\";\nvar UNITS_IN_GRID = 16;\nvar DEFAULT_CSS_PREFIX = \"fa\";\nvar DEFAULT_REPLACEMENT_CLASS = \"svg-inline--fa\";\nvar DATA_FA_I2SVG = \"data-fa-i2svg\";\nvar DATA_FA_PSEUDO_ELEMENT = \"data-fa-pseudo-element\";\nvar DATA_FA_PSEUDO_ELEMENT_PENDING = \"data-fa-pseudo-element-pending\";\nvar DATA_PREFIX = \"data-prefix\";\nvar DATA_ICON = \"data-icon\";\nvar HTML_CLASS_I2SVG_BASE_CLASS = \"fontawesome-i2svg\";\nvar MUTATION_APPROACH_ASYNC = \"async\";\nvar TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS = [\n    \"HTML\",\n    \"HEAD\",\n    \"STYLE\",\n    \"SCRIPT\"\n];\nvar PRODUCTION = function() {\n    try {\n        return \"development\" === \"production\";\n    } catch (e) {\n        return false;\n    }\n}();\nvar FAMILY_CLASSIC = \"classic\";\nvar FAMILY_SHARP = \"sharp\";\nvar FAMILIES = [\n    FAMILY_CLASSIC,\n    FAMILY_SHARP\n];\nfunction familyProxy(obj) {\n    // Defaults to the classic family if family is not available\n    return new Proxy(obj, {\n        get: function get(target, prop) {\n            return prop in target ? target[prop] : target[FAMILY_CLASSIC];\n        }\n    });\n}\nvar PREFIX_TO_STYLE = familyProxy((_familyProxy = {}, _defineProperty(_familyProxy, FAMILY_CLASSIC, {\n    \"fa\": \"solid\",\n    \"fas\": \"solid\",\n    \"fa-solid\": \"solid\",\n    \"far\": \"regular\",\n    \"fa-regular\": \"regular\",\n    \"fal\": \"light\",\n    \"fa-light\": \"light\",\n    \"fat\": \"thin\",\n    \"fa-thin\": \"thin\",\n    \"fad\": \"duotone\",\n    \"fa-duotone\": \"duotone\",\n    \"fab\": \"brands\",\n    \"fa-brands\": \"brands\",\n    \"fak\": \"kit\",\n    \"fakd\": \"kit\",\n    \"fa-kit\": \"kit\",\n    \"fa-kit-duotone\": \"kit\"\n}), _defineProperty(_familyProxy, FAMILY_SHARP, {\n    \"fa\": \"solid\",\n    \"fass\": \"solid\",\n    \"fa-solid\": \"solid\",\n    \"fasr\": \"regular\",\n    \"fa-regular\": \"regular\",\n    \"fasl\": \"light\",\n    \"fa-light\": \"light\",\n    \"fast\": \"thin\",\n    \"fa-thin\": \"thin\"\n}), _familyProxy));\nvar STYLE_TO_PREFIX = familyProxy((_familyProxy2 = {}, _defineProperty(_familyProxy2, FAMILY_CLASSIC, {\n    solid: \"fas\",\n    regular: \"far\",\n    light: \"fal\",\n    thin: \"fat\",\n    duotone: \"fad\",\n    brands: \"fab\",\n    kit: \"fak\"\n}), _defineProperty(_familyProxy2, FAMILY_SHARP, {\n    solid: \"fass\",\n    regular: \"fasr\",\n    light: \"fasl\",\n    thin: \"fast\"\n}), _familyProxy2));\nvar PREFIX_TO_LONG_STYLE = familyProxy((_familyProxy3 = {}, _defineProperty(_familyProxy3, FAMILY_CLASSIC, {\n    fab: \"fa-brands\",\n    fad: \"fa-duotone\",\n    fak: \"fa-kit\",\n    fal: \"fa-light\",\n    far: \"fa-regular\",\n    fas: \"fa-solid\",\n    fat: \"fa-thin\"\n}), _defineProperty(_familyProxy3, FAMILY_SHARP, {\n    fass: \"fa-solid\",\n    fasr: \"fa-regular\",\n    fasl: \"fa-light\",\n    fast: \"fa-thin\"\n}), _familyProxy3));\nvar LONG_STYLE_TO_PREFIX = familyProxy((_familyProxy4 = {}, _defineProperty(_familyProxy4, FAMILY_CLASSIC, {\n    \"fa-brands\": \"fab\",\n    \"fa-duotone\": \"fad\",\n    \"fa-kit\": \"fak\",\n    \"fa-light\": \"fal\",\n    \"fa-regular\": \"far\",\n    \"fa-solid\": \"fas\",\n    \"fa-thin\": \"fat\"\n}), _defineProperty(_familyProxy4, FAMILY_SHARP, {\n    \"fa-solid\": \"fass\",\n    \"fa-regular\": \"fasr\",\n    \"fa-light\": \"fasl\",\n    \"fa-thin\": \"fast\"\n}), _familyProxy4));\nvar ICON_SELECTION_SYNTAX_PATTERN = /fa(s|r|l|t|d|b|k|ss|sr|sl|st)?[\\-\\ ]/; // eslint-disable-line no-useless-escape\nvar LAYERS_TEXT_CLASSNAME = \"fa-layers-text\";\nvar FONT_FAMILY_PATTERN = /Font ?Awesome ?([56 ]*)(Solid|Regular|Light|Thin|Duotone|Brands|Free|Pro|Sharp|Kit)?.*/i;\nvar FONT_WEIGHT_TO_PREFIX = familyProxy((_familyProxy5 = {}, _defineProperty(_familyProxy5, FAMILY_CLASSIC, {\n    900: \"fas\",\n    400: \"far\",\n    normal: \"far\",\n    300: \"fal\",\n    100: \"fat\"\n}), _defineProperty(_familyProxy5, FAMILY_SHARP, {\n    900: \"fass\",\n    400: \"fasr\",\n    300: \"fasl\",\n    100: \"fast\"\n}), _familyProxy5));\nvar oneToTen = [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10\n];\nvar oneToTwenty = oneToTen.concat([\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20\n]);\nvar ATTRIBUTES_WATCHED_FOR_MUTATION = [\n    \"class\",\n    \"data-prefix\",\n    \"data-icon\",\n    \"data-fa-transform\",\n    \"data-fa-mask\"\n];\nvar DUOTONE_CLASSES = {\n    GROUP: \"duotone-group\",\n    SWAP_OPACITY: \"swap-opacity\",\n    PRIMARY: \"primary\",\n    SECONDARY: \"secondary\"\n};\nvar prefixes = new Set();\nObject.keys(STYLE_TO_PREFIX[FAMILY_CLASSIC]).map(prefixes.add.bind(prefixes));\nObject.keys(STYLE_TO_PREFIX[FAMILY_SHARP]).map(prefixes.add.bind(prefixes));\nvar RESERVED_CLASSES = [].concat(FAMILIES, _toConsumableArray(prefixes), [\n    \"2xs\",\n    \"xs\",\n    \"sm\",\n    \"lg\",\n    \"xl\",\n    \"2xl\",\n    \"beat\",\n    \"border\",\n    \"fade\",\n    \"beat-fade\",\n    \"bounce\",\n    \"flip-both\",\n    \"flip-horizontal\",\n    \"flip-vertical\",\n    \"flip\",\n    \"fw\",\n    \"inverse\",\n    \"layers-counter\",\n    \"layers-text\",\n    \"layers\",\n    \"li\",\n    \"pull-left\",\n    \"pull-right\",\n    \"pulse\",\n    \"rotate-180\",\n    \"rotate-270\",\n    \"rotate-90\",\n    \"rotate-by\",\n    \"shake\",\n    \"spin-pulse\",\n    \"spin-reverse\",\n    \"spin\",\n    \"stack-1x\",\n    \"stack-2x\",\n    \"stack\",\n    \"ul\",\n    DUOTONE_CLASSES.GROUP,\n    DUOTONE_CLASSES.SWAP_OPACITY,\n    DUOTONE_CLASSES.PRIMARY,\n    DUOTONE_CLASSES.SECONDARY\n]).concat(oneToTen.map(function(n) {\n    return \"\".concat(n, \"x\");\n})).concat(oneToTwenty.map(function(n) {\n    return \"w-\".concat(n);\n}));\nvar initial = WINDOW.FontAwesomeConfig || {};\nfunction getAttrConfig(attr) {\n    var element = DOCUMENT.querySelector(\"script[\" + attr + \"]\");\n    if (element) {\n        return element.getAttribute(attr);\n    }\n}\nfunction coerce(val) {\n    // Getting an empty string will occur if the attribute is set on the HTML tag but without a value\n    // We'll assume that this is an indication that it should be toggled to true\n    if (val === \"\") return true;\n    if (val === \"false\") return false;\n    if (val === \"true\") return true;\n    return val;\n}\nif (DOCUMENT && typeof DOCUMENT.querySelector === \"function\") {\n    var attrs = [\n        [\n            \"data-family-prefix\",\n            \"familyPrefix\"\n        ],\n        [\n            \"data-css-prefix\",\n            \"cssPrefix\"\n        ],\n        [\n            \"data-family-default\",\n            \"familyDefault\"\n        ],\n        [\n            \"data-style-default\",\n            \"styleDefault\"\n        ],\n        [\n            \"data-replacement-class\",\n            \"replacementClass\"\n        ],\n        [\n            \"data-auto-replace-svg\",\n            \"autoReplaceSvg\"\n        ],\n        [\n            \"data-auto-add-css\",\n            \"autoAddCss\"\n        ],\n        [\n            \"data-auto-a11y\",\n            \"autoA11y\"\n        ],\n        [\n            \"data-search-pseudo-elements\",\n            \"searchPseudoElements\"\n        ],\n        [\n            \"data-observe-mutations\",\n            \"observeMutations\"\n        ],\n        [\n            \"data-mutate-approach\",\n            \"mutateApproach\"\n        ],\n        [\n            \"data-keep-original-source\",\n            \"keepOriginalSource\"\n        ],\n        [\n            \"data-measure-performance\",\n            \"measurePerformance\"\n        ],\n        [\n            \"data-show-missing-icons\",\n            \"showMissingIcons\"\n        ]\n    ];\n    attrs.forEach(function(_ref) {\n        var _ref2 = _slicedToArray(_ref, 2), attr = _ref2[0], key = _ref2[1];\n        var val = coerce(getAttrConfig(attr));\n        if (val !== undefined && val !== null) {\n            initial[key] = val;\n        }\n    });\n}\nvar _default = {\n    styleDefault: \"solid\",\n    familyDefault: \"classic\",\n    cssPrefix: DEFAULT_CSS_PREFIX,\n    replacementClass: DEFAULT_REPLACEMENT_CLASS,\n    autoReplaceSvg: true,\n    autoAddCss: true,\n    autoA11y: true,\n    searchPseudoElements: false,\n    observeMutations: true,\n    mutateApproach: \"async\",\n    keepOriginalSource: true,\n    measurePerformance: false,\n    showMissingIcons: true\n}; // familyPrefix is deprecated but we must still support it if present\nif (initial.familyPrefix) {\n    initial.cssPrefix = initial.familyPrefix;\n}\nvar _config = _objectSpread2(_objectSpread2({}, _default), initial);\nif (!_config.autoReplaceSvg) _config.observeMutations = false;\nvar config = {};\nObject.keys(_default).forEach(function(key) {\n    Object.defineProperty(config, key, {\n        enumerable: true,\n        set: function set(val) {\n            _config[key] = val;\n            _onChangeCb.forEach(function(cb) {\n                return cb(config);\n            });\n        },\n        get: function get() {\n            return _config[key];\n        }\n    });\n}); // familyPrefix is deprecated as of 6.2.0 and should be removed in 7.0.0\nObject.defineProperty(config, \"familyPrefix\", {\n    enumerable: true,\n    set: function set(val) {\n        _config.cssPrefix = val;\n        _onChangeCb.forEach(function(cb) {\n            return cb(config);\n        });\n    },\n    get: function get() {\n        return _config.cssPrefix;\n    }\n});\nWINDOW.FontAwesomeConfig = config;\nvar _onChangeCb = [];\nfunction onChange(cb) {\n    _onChangeCb.push(cb);\n    return function() {\n        _onChangeCb.splice(_onChangeCb.indexOf(cb), 1);\n    };\n}\nvar d = UNITS_IN_GRID;\nvar meaninglessTransform = {\n    size: 16,\n    x: 0,\n    y: 0,\n    rotate: 0,\n    flipX: false,\n    flipY: false\n};\nfunction insertCss(css) {\n    if (!css || !IS_DOM) {\n        return;\n    }\n    var style = DOCUMENT.createElement(\"style\");\n    style.setAttribute(\"type\", \"text/css\");\n    style.innerHTML = css;\n    var headChildren = DOCUMENT.head.childNodes;\n    var beforeChild = null;\n    for(var i = headChildren.length - 1; i > -1; i--){\n        var child = headChildren[i];\n        var tagName = (child.tagName || \"\").toUpperCase();\n        if ([\n            \"STYLE\",\n            \"LINK\"\n        ].indexOf(tagName) > -1) {\n            beforeChild = child;\n        }\n    }\n    DOCUMENT.head.insertBefore(style, beforeChild);\n    return css;\n}\nvar idPool = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nfunction nextUniqueId() {\n    var size = 12;\n    var id = \"\";\n    while(size-- > 0){\n        id += idPool[Math.random() * 62 | 0];\n    }\n    return id;\n}\nfunction toArray(obj) {\n    var array = [];\n    for(var i = (obj || []).length >>> 0; i--;){\n        array[i] = obj[i];\n    }\n    return array;\n}\nfunction classArray(node) {\n    if (node.classList) {\n        return toArray(node.classList);\n    } else {\n        return (node.getAttribute(\"class\") || \"\").split(\" \").filter(function(i) {\n            return i;\n        });\n    }\n}\nfunction htmlEscape(str) {\n    return \"\".concat(str).replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\nfunction joinAttributes(attributes) {\n    return Object.keys(attributes || {}).reduce(function(acc, attributeName) {\n        return acc + \"\".concat(attributeName, '=\"').concat(htmlEscape(attributes[attributeName]), '\" ');\n    }, \"\").trim();\n}\nfunction joinStyles(styles) {\n    return Object.keys(styles || {}).reduce(function(acc, styleName) {\n        return acc + \"\".concat(styleName, \": \").concat(styles[styleName].trim(), \";\");\n    }, \"\");\n}\nfunction transformIsMeaningful(transform) {\n    return transform.size !== meaninglessTransform.size || transform.x !== meaninglessTransform.x || transform.y !== meaninglessTransform.y || transform.rotate !== meaninglessTransform.rotate || transform.flipX || transform.flipY;\n}\nfunction transformForSvg(_ref) {\n    var transform = _ref.transform, containerWidth = _ref.containerWidth, iconWidth = _ref.iconWidth;\n    var outer = {\n        transform: \"translate(\".concat(containerWidth / 2, \" 256)\")\n    };\n    var innerTranslate = \"translate(\".concat(transform.x * 32, \", \").concat(transform.y * 32, \") \");\n    var innerScale = \"scale(\".concat(transform.size / 16 * (transform.flipX ? -1 : 1), \", \").concat(transform.size / 16 * (transform.flipY ? -1 : 1), \") \");\n    var innerRotate = \"rotate(\".concat(transform.rotate, \" 0 0)\");\n    var inner = {\n        transform: \"\".concat(innerTranslate, \" \").concat(innerScale, \" \").concat(innerRotate)\n    };\n    var path = {\n        transform: \"translate(\".concat(iconWidth / 2 * -1, \" -256)\")\n    };\n    return {\n        outer: outer,\n        inner: inner,\n        path: path\n    };\n}\nfunction transformForCss(_ref2) {\n    var transform = _ref2.transform, _ref2$width = _ref2.width, width = _ref2$width === void 0 ? UNITS_IN_GRID : _ref2$width, _ref2$height = _ref2.height, height = _ref2$height === void 0 ? UNITS_IN_GRID : _ref2$height, _ref2$startCentered = _ref2.startCentered, startCentered = _ref2$startCentered === void 0 ? false : _ref2$startCentered;\n    var val = \"\";\n    if (startCentered && IS_IE) {\n        val += \"translate(\".concat(transform.x / d - width / 2, \"em, \").concat(transform.y / d - height / 2, \"em) \");\n    } else if (startCentered) {\n        val += \"translate(calc(-50% + \".concat(transform.x / d, \"em), calc(-50% + \").concat(transform.y / d, \"em)) \");\n    } else {\n        val += \"translate(\".concat(transform.x / d, \"em, \").concat(transform.y / d, \"em) \");\n    }\n    val += \"scale(\".concat(transform.size / d * (transform.flipX ? -1 : 1), \", \").concat(transform.size / d * (transform.flipY ? -1 : 1), \") \");\n    val += \"rotate(\".concat(transform.rotate, \"deg) \");\n    return val;\n}\nvar baseStyles = ':root, :host {\\n  --fa-font-solid: normal 900 1em/1 \"Font Awesome 6 Solid\";\\n  --fa-font-regular: normal 400 1em/1 \"Font Awesome 6 Regular\";\\n  --fa-font-light: normal 300 1em/1 \"Font Awesome 6 Light\";\\n  --fa-font-thin: normal 100 1em/1 \"Font Awesome 6 Thin\";\\n  --fa-font-duotone: normal 900 1em/1 \"Font Awesome 6 Duotone\";\\n  --fa-font-sharp-solid: normal 900 1em/1 \"Font Awesome 6 Sharp\";\\n  --fa-font-sharp-regular: normal 400 1em/1 \"Font Awesome 6 Sharp\";\\n  --fa-font-sharp-light: normal 300 1em/1 \"Font Awesome 6 Sharp\";\\n  --fa-font-sharp-thin: normal 100 1em/1 \"Font Awesome 6 Sharp\";\\n  --fa-font-brands: normal 400 1em/1 \"Font Awesome 6 Brands\";\\n}\\n\\nsvg:not(:root).svg-inline--fa, svg:not(:host).svg-inline--fa {\\n  overflow: visible;\\n  box-sizing: content-box;\\n}\\n\\n.svg-inline--fa {\\n  display: var(--fa-display, inline-block);\\n  height: 1em;\\n  overflow: visible;\\n  vertical-align: -0.125em;\\n}\\n.svg-inline--fa.fa-2xs {\\n  vertical-align: 0.1em;\\n}\\n.svg-inline--fa.fa-xs {\\n  vertical-align: 0em;\\n}\\n.svg-inline--fa.fa-sm {\\n  vertical-align: -0.0714285705em;\\n}\\n.svg-inline--fa.fa-lg {\\n  vertical-align: -0.2em;\\n}\\n.svg-inline--fa.fa-xl {\\n  vertical-align: -0.25em;\\n}\\n.svg-inline--fa.fa-2xl {\\n  vertical-align: -0.3125em;\\n}\\n.svg-inline--fa.fa-pull-left {\\n  margin-right: var(--fa-pull-margin, 0.3em);\\n  width: auto;\\n}\\n.svg-inline--fa.fa-pull-right {\\n  margin-left: var(--fa-pull-margin, 0.3em);\\n  width: auto;\\n}\\n.svg-inline--fa.fa-li {\\n  width: var(--fa-li-width, 2em);\\n  top: 0.25em;\\n}\\n.svg-inline--fa.fa-fw {\\n  width: var(--fa-fw-width, 1.25em);\\n}\\n\\n.fa-layers svg.svg-inline--fa {\\n  bottom: 0;\\n  left: 0;\\n  margin: auto;\\n  position: absolute;\\n  right: 0;\\n  top: 0;\\n}\\n\\n.fa-layers-counter, .fa-layers-text {\\n  display: inline-block;\\n  position: absolute;\\n  text-align: center;\\n}\\n\\n.fa-layers {\\n  display: inline-block;\\n  height: 1em;\\n  position: relative;\\n  text-align: center;\\n  vertical-align: -0.125em;\\n  width: 1em;\\n}\\n.fa-layers svg.svg-inline--fa {\\n  -webkit-transform-origin: center center;\\n          transform-origin: center center;\\n}\\n\\n.fa-layers-text {\\n  left: 50%;\\n  top: 50%;\\n  -webkit-transform: translate(-50%, -50%);\\n          transform: translate(-50%, -50%);\\n  -webkit-transform-origin: center center;\\n          transform-origin: center center;\\n}\\n\\n.fa-layers-counter {\\n  background-color: var(--fa-counter-background-color, #ff253a);\\n  border-radius: var(--fa-counter-border-radius, 1em);\\n  box-sizing: border-box;\\n  color: var(--fa-inverse, #fff);\\n  line-height: var(--fa-counter-line-height, 1);\\n  max-width: var(--fa-counter-max-width, 5em);\\n  min-width: var(--fa-counter-min-width, 1.5em);\\n  overflow: hidden;\\n  padding: var(--fa-counter-padding, 0.25em 0.5em);\\n  right: var(--fa-right, 0);\\n  text-overflow: ellipsis;\\n  top: var(--fa-top, 0);\\n  -webkit-transform: scale(var(--fa-counter-scale, 0.25));\\n          transform: scale(var(--fa-counter-scale, 0.25));\\n  -webkit-transform-origin: top right;\\n          transform-origin: top right;\\n}\\n\\n.fa-layers-bottom-right {\\n  bottom: var(--fa-bottom, 0);\\n  right: var(--fa-right, 0);\\n  top: auto;\\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\\n          transform: scale(var(--fa-layers-scale, 0.25));\\n  -webkit-transform-origin: bottom right;\\n          transform-origin: bottom right;\\n}\\n\\n.fa-layers-bottom-left {\\n  bottom: var(--fa-bottom, 0);\\n  left: var(--fa-left, 0);\\n  right: auto;\\n  top: auto;\\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\\n          transform: scale(var(--fa-layers-scale, 0.25));\\n  -webkit-transform-origin: bottom left;\\n          transform-origin: bottom left;\\n}\\n\\n.fa-layers-top-right {\\n  top: var(--fa-top, 0);\\n  right: var(--fa-right, 0);\\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\\n          transform: scale(var(--fa-layers-scale, 0.25));\\n  -webkit-transform-origin: top right;\\n          transform-origin: top right;\\n}\\n\\n.fa-layers-top-left {\\n  left: var(--fa-left, 0);\\n  right: auto;\\n  top: var(--fa-top, 0);\\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\\n          transform: scale(var(--fa-layers-scale, 0.25));\\n  -webkit-transform-origin: top left;\\n          transform-origin: top left;\\n}\\n\\n.fa-1x {\\n  font-size: 1em;\\n}\\n\\n.fa-2x {\\n  font-size: 2em;\\n}\\n\\n.fa-3x {\\n  font-size: 3em;\\n}\\n\\n.fa-4x {\\n  font-size: 4em;\\n}\\n\\n.fa-5x {\\n  font-size: 5em;\\n}\\n\\n.fa-6x {\\n  font-size: 6em;\\n}\\n\\n.fa-7x {\\n  font-size: 7em;\\n}\\n\\n.fa-8x {\\n  font-size: 8em;\\n}\\n\\n.fa-9x {\\n  font-size: 9em;\\n}\\n\\n.fa-10x {\\n  font-size: 10em;\\n}\\n\\n.fa-2xs {\\n  font-size: 0.625em;\\n  line-height: 0.1em;\\n  vertical-align: 0.225em;\\n}\\n\\n.fa-xs {\\n  font-size: 0.75em;\\n  line-height: 0.0833333337em;\\n  vertical-align: 0.125em;\\n}\\n\\n.fa-sm {\\n  font-size: 0.875em;\\n  line-height: 0.0714285718em;\\n  vertical-align: 0.0535714295em;\\n}\\n\\n.fa-lg {\\n  font-size: 1.25em;\\n  line-height: 0.05em;\\n  vertical-align: -0.075em;\\n}\\n\\n.fa-xl {\\n  font-size: 1.5em;\\n  line-height: 0.0416666682em;\\n  vertical-align: -0.125em;\\n}\\n\\n.fa-2xl {\\n  font-size: 2em;\\n  line-height: 0.03125em;\\n  vertical-align: -0.1875em;\\n}\\n\\n.fa-fw {\\n  text-align: center;\\n  width: 1.25em;\\n}\\n\\n.fa-ul {\\n  list-style-type: none;\\n  margin-left: var(--fa-li-margin, 2.5em);\\n  padding-left: 0;\\n}\\n.fa-ul > li {\\n  position: relative;\\n}\\n\\n.fa-li {\\n  left: calc(var(--fa-li-width, 2em) * -1);\\n  position: absolute;\\n  text-align: center;\\n  width: var(--fa-li-width, 2em);\\n  line-height: inherit;\\n}\\n\\n.fa-border {\\n  border-color: var(--fa-border-color, #eee);\\n  border-radius: var(--fa-border-radius, 0.1em);\\n  border-style: var(--fa-border-style, solid);\\n  border-width: var(--fa-border-width, 0.08em);\\n  padding: var(--fa-border-padding, 0.2em 0.25em 0.15em);\\n}\\n\\n.fa-pull-left {\\n  float: left;\\n  margin-right: var(--fa-pull-margin, 0.3em);\\n}\\n\\n.fa-pull-right {\\n  float: right;\\n  margin-left: var(--fa-pull-margin, 0.3em);\\n}\\n\\n.fa-beat {\\n  -webkit-animation-name: fa-beat;\\n          animation-name: fa-beat;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\\n}\\n\\n.fa-bounce {\\n  -webkit-animation-name: fa-bounce;\\n          animation-name: fa-bounce;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\\n}\\n\\n.fa-fade {\\n  -webkit-animation-name: fa-fade;\\n          animation-name: fa-fade;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\\n}\\n\\n.fa-beat-fade {\\n  -webkit-animation-name: fa-beat-fade;\\n          animation-name: fa-beat-fade;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\\n}\\n\\n.fa-flip {\\n  -webkit-animation-name: fa-flip;\\n          animation-name: fa-flip;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\\n}\\n\\n.fa-shake {\\n  -webkit-animation-name: fa-shake;\\n          animation-name: fa-shake;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\\n          animation-timing-function: var(--fa-animation-timing, linear);\\n}\\n\\n.fa-spin {\\n  -webkit-animation-name: fa-spin;\\n          animation-name: fa-spin;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 2s);\\n          animation-duration: var(--fa-animation-duration, 2s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\\n          animation-timing-function: var(--fa-animation-timing, linear);\\n}\\n\\n.fa-spin-reverse {\\n  --fa-animation-direction: reverse;\\n}\\n\\n.fa-pulse,\\n.fa-spin-pulse {\\n  -webkit-animation-name: fa-spin;\\n          animation-name: fa-spin;\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, steps(8));\\n          animation-timing-function: var(--fa-animation-timing, steps(8));\\n}\\n\\n@media (prefers-reduced-motion: reduce) {\\n  .fa-beat,\\n.fa-bounce,\\n.fa-fade,\\n.fa-beat-fade,\\n.fa-flip,\\n.fa-pulse,\\n.fa-shake,\\n.fa-spin,\\n.fa-spin-pulse {\\n    -webkit-animation-delay: -1ms;\\n            animation-delay: -1ms;\\n    -webkit-animation-duration: 1ms;\\n            animation-duration: 1ms;\\n    -webkit-animation-iteration-count: 1;\\n            animation-iteration-count: 1;\\n    -webkit-transition-delay: 0s;\\n            transition-delay: 0s;\\n    -webkit-transition-duration: 0s;\\n            transition-duration: 0s;\\n  }\\n}\\n@-webkit-keyframes fa-beat {\\n  0%, 90% {\\n    -webkit-transform: scale(1);\\n            transform: scale(1);\\n  }\\n  45% {\\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\\n            transform: scale(var(--fa-beat-scale, 1.25));\\n  }\\n}\\n@keyframes fa-beat {\\n  0%, 90% {\\n    -webkit-transform: scale(1);\\n            transform: scale(1);\\n  }\\n  45% {\\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\\n            transform: scale(var(--fa-beat-scale, 1.25));\\n  }\\n}\\n@-webkit-keyframes fa-bounce {\\n  0% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n  10% {\\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\\n  }\\n  30% {\\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\\n  }\\n  50% {\\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\\n  }\\n  57% {\\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\\n  }\\n  64% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n  100% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n}\\n@keyframes fa-bounce {\\n  0% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n  10% {\\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\\n  }\\n  30% {\\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\\n  }\\n  50% {\\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\\n  }\\n  57% {\\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\\n  }\\n  64% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n  100% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n}\\n@-webkit-keyframes fa-fade {\\n  50% {\\n    opacity: var(--fa-fade-opacity, 0.4);\\n  }\\n}\\n@keyframes fa-fade {\\n  50% {\\n    opacity: var(--fa-fade-opacity, 0.4);\\n  }\\n}\\n@-webkit-keyframes fa-beat-fade {\\n  0%, 100% {\\n    opacity: var(--fa-beat-fade-opacity, 0.4);\\n    -webkit-transform: scale(1);\\n            transform: scale(1);\\n  }\\n  50% {\\n    opacity: 1;\\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\\n  }\\n}\\n@keyframes fa-beat-fade {\\n  0%, 100% {\\n    opacity: var(--fa-beat-fade-opacity, 0.4);\\n    -webkit-transform: scale(1);\\n            transform: scale(1);\\n  }\\n  50% {\\n    opacity: 1;\\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\\n  }\\n}\\n@-webkit-keyframes fa-flip {\\n  50% {\\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\\n  }\\n}\\n@keyframes fa-flip {\\n  50% {\\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\\n  }\\n}\\n@-webkit-keyframes fa-shake {\\n  0% {\\n    -webkit-transform: rotate(-15deg);\\n            transform: rotate(-15deg);\\n  }\\n  4% {\\n    -webkit-transform: rotate(15deg);\\n            transform: rotate(15deg);\\n  }\\n  8%, 24% {\\n    -webkit-transform: rotate(-18deg);\\n            transform: rotate(-18deg);\\n  }\\n  12%, 28% {\\n    -webkit-transform: rotate(18deg);\\n            transform: rotate(18deg);\\n  }\\n  16% {\\n    -webkit-transform: rotate(-22deg);\\n            transform: rotate(-22deg);\\n  }\\n  20% {\\n    -webkit-transform: rotate(22deg);\\n            transform: rotate(22deg);\\n  }\\n  32% {\\n    -webkit-transform: rotate(-12deg);\\n            transform: rotate(-12deg);\\n  }\\n  36% {\\n    -webkit-transform: rotate(12deg);\\n            transform: rotate(12deg);\\n  }\\n  40%, 100% {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n  }\\n}\\n@keyframes fa-shake {\\n  0% {\\n    -webkit-transform: rotate(-15deg);\\n            transform: rotate(-15deg);\\n  }\\n  4% {\\n    -webkit-transform: rotate(15deg);\\n            transform: rotate(15deg);\\n  }\\n  8%, 24% {\\n    -webkit-transform: rotate(-18deg);\\n            transform: rotate(-18deg);\\n  }\\n  12%, 28% {\\n    -webkit-transform: rotate(18deg);\\n            transform: rotate(18deg);\\n  }\\n  16% {\\n    -webkit-transform: rotate(-22deg);\\n            transform: rotate(-22deg);\\n  }\\n  20% {\\n    -webkit-transform: rotate(22deg);\\n            transform: rotate(22deg);\\n  }\\n  32% {\\n    -webkit-transform: rotate(-12deg);\\n            transform: rotate(-12deg);\\n  }\\n  36% {\\n    -webkit-transform: rotate(12deg);\\n            transform: rotate(12deg);\\n  }\\n  40%, 100% {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n  }\\n}\\n@-webkit-keyframes fa-spin {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n            transform: rotate(360deg);\\n  }\\n}\\n@keyframes fa-spin {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n            transform: rotate(360deg);\\n  }\\n}\\n.fa-rotate-90 {\\n  -webkit-transform: rotate(90deg);\\n          transform: rotate(90deg);\\n}\\n\\n.fa-rotate-180 {\\n  -webkit-transform: rotate(180deg);\\n          transform: rotate(180deg);\\n}\\n\\n.fa-rotate-270 {\\n  -webkit-transform: rotate(270deg);\\n          transform: rotate(270deg);\\n}\\n\\n.fa-flip-horizontal {\\n  -webkit-transform: scale(-1, 1);\\n          transform: scale(-1, 1);\\n}\\n\\n.fa-flip-vertical {\\n  -webkit-transform: scale(1, -1);\\n          transform: scale(1, -1);\\n}\\n\\n.fa-flip-both,\\n.fa-flip-horizontal.fa-flip-vertical {\\n  -webkit-transform: scale(-1, -1);\\n          transform: scale(-1, -1);\\n}\\n\\n.fa-rotate-by {\\n  -webkit-transform: rotate(var(--fa-rotate-angle, none));\\n          transform: rotate(var(--fa-rotate-angle, none));\\n}\\n\\n.fa-stack {\\n  display: inline-block;\\n  vertical-align: middle;\\n  height: 2em;\\n  position: relative;\\n  width: 2.5em;\\n}\\n\\n.fa-stack-1x,\\n.fa-stack-2x {\\n  bottom: 0;\\n  left: 0;\\n  margin: auto;\\n  position: absolute;\\n  right: 0;\\n  top: 0;\\n  z-index: var(--fa-stack-z-index, auto);\\n}\\n\\n.svg-inline--fa.fa-stack-1x {\\n  height: 1em;\\n  width: 1.25em;\\n}\\n.svg-inline--fa.fa-stack-2x {\\n  height: 2em;\\n  width: 2.5em;\\n}\\n\\n.fa-inverse {\\n  color: var(--fa-inverse, #fff);\\n}\\n\\n.sr-only,\\n.fa-sr-only {\\n  position: absolute;\\n  width: 1px;\\n  height: 1px;\\n  padding: 0;\\n  margin: -1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0);\\n  white-space: nowrap;\\n  border-width: 0;\\n}\\n\\n.sr-only-focusable:not(:focus),\\n.fa-sr-only-focusable:not(:focus) {\\n  position: absolute;\\n  width: 1px;\\n  height: 1px;\\n  padding: 0;\\n  margin: -1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0);\\n  white-space: nowrap;\\n  border-width: 0;\\n}\\n\\n.svg-inline--fa .fa-primary {\\n  fill: var(--fa-primary-color, currentColor);\\n  opacity: var(--fa-primary-opacity, 1);\\n}\\n\\n.svg-inline--fa .fa-secondary {\\n  fill: var(--fa-secondary-color, currentColor);\\n  opacity: var(--fa-secondary-opacity, 0.4);\\n}\\n\\n.svg-inline--fa.fa-swap-opacity .fa-primary {\\n  opacity: var(--fa-secondary-opacity, 0.4);\\n}\\n\\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\\n  opacity: var(--fa-primary-opacity, 1);\\n}\\n\\n.svg-inline--fa mask .fa-primary,\\n.svg-inline--fa mask .fa-secondary {\\n  fill: black;\\n}\\n\\n.fad.fa-inverse,\\n.fa-duotone.fa-inverse {\\n  color: var(--fa-inverse, #fff);\\n}';\nfunction css() {\n    var dcp = DEFAULT_CSS_PREFIX;\n    var drc = DEFAULT_REPLACEMENT_CLASS;\n    var fp = config.cssPrefix;\n    var rc = config.replacementClass;\n    var s = baseStyles;\n    if (fp !== dcp || rc !== drc) {\n        var dPatt = new RegExp(\"\\\\.\".concat(dcp, \"\\\\-\"), \"g\");\n        var customPropPatt = new RegExp(\"\\\\--\".concat(dcp, \"\\\\-\"), \"g\");\n        var rPatt = new RegExp(\"\\\\.\".concat(drc), \"g\");\n        s = s.replace(dPatt, \".\".concat(fp, \"-\")).replace(customPropPatt, \"--\".concat(fp, \"-\")).replace(rPatt, \".\".concat(rc));\n    }\n    return s;\n}\nvar _cssInserted = false;\nfunction ensureCss() {\n    if (config.autoAddCss && !_cssInserted) {\n        insertCss(css());\n        _cssInserted = true;\n    }\n}\nvar InjectCSS = {\n    mixout: function mixout() {\n        return {\n            dom: {\n                css: css,\n                insertCss: ensureCss\n            }\n        };\n    },\n    hooks: function hooks() {\n        return {\n            beforeDOMElementCreation: function beforeDOMElementCreation() {\n                ensureCss();\n            },\n            beforeI2svg: function beforeI2svg() {\n                ensureCss();\n            }\n        };\n    }\n};\nvar w = WINDOW || {};\nif (!w[NAMESPACE_IDENTIFIER]) w[NAMESPACE_IDENTIFIER] = {};\nif (!w[NAMESPACE_IDENTIFIER].styles) w[NAMESPACE_IDENTIFIER].styles = {};\nif (!w[NAMESPACE_IDENTIFIER].hooks) w[NAMESPACE_IDENTIFIER].hooks = {};\nif (!w[NAMESPACE_IDENTIFIER].shims) w[NAMESPACE_IDENTIFIER].shims = [];\nvar namespace = w[NAMESPACE_IDENTIFIER];\nvar functions = [];\nvar listener = function listener() {\n    DOCUMENT.removeEventListener(\"DOMContentLoaded\", listener);\n    loaded = 1;\n    functions.map(function(fn) {\n        return fn();\n    });\n};\nvar loaded = false;\nif (IS_DOM) {\n    loaded = (DOCUMENT.documentElement.doScroll ? /^loaded|^c/ : /^loaded|^i|^c/).test(DOCUMENT.readyState);\n    if (!loaded) DOCUMENT.addEventListener(\"DOMContentLoaded\", listener);\n}\nfunction domready(fn) {\n    if (!IS_DOM) return;\n    loaded ? setTimeout(fn, 0) : functions.push(fn);\n}\nfunction toHtml(abstractNodes) {\n    var tag = abstractNodes.tag, _abstractNodes$attrib = abstractNodes.attributes, attributes = _abstractNodes$attrib === void 0 ? {} : _abstractNodes$attrib, _abstractNodes$childr = abstractNodes.children, children = _abstractNodes$childr === void 0 ? [] : _abstractNodes$childr;\n    if (typeof abstractNodes === \"string\") {\n        return htmlEscape(abstractNodes);\n    } else {\n        return \"<\".concat(tag, \" \").concat(joinAttributes(attributes), \">\").concat(children.map(toHtml).join(\"\"), \"</\").concat(tag, \">\");\n    }\n}\nfunction iconFromMapping(mapping, prefix, iconName) {\n    if (mapping && mapping[prefix] && mapping[prefix][iconName]) {\n        return {\n            prefix: prefix,\n            iconName: iconName,\n            icon: mapping[prefix][iconName]\n        };\n    }\n}\n/**\n * Internal helper to bind a function known to have 4 arguments\n * to a given context.\n */ var bindInternal4 = function bindInternal4(func, thisContext) {\n    return function(a, b, c, d) {\n        return func.call(thisContext, a, b, c, d);\n    };\n};\n/**\n * # Reduce\n *\n * A fast object `.reduce()` implementation.\n *\n * @param  {Object}   subject      The object to reduce over.\n * @param  {Function} fn           The reducer function.\n * @param  {mixed}    initialValue The initial value for the reducer, defaults to subject[0].\n * @param  {Object}   thisContext  The context for the reducer.\n * @return {mixed}                 The final result.\n */ var reduce = function fastReduceObject(subject, fn, initialValue, thisContext) {\n    var keys = Object.keys(subject), length = keys.length, iterator = thisContext !== undefined ? bindInternal4(fn, thisContext) : fn, i, key, result;\n    if (initialValue === undefined) {\n        i = 1;\n        result = subject[keys[0]];\n    } else {\n        i = 0;\n        result = initialValue;\n    }\n    for(; i < length; i++){\n        key = keys[i];\n        result = iterator(result, subject[key], key, subject);\n    }\n    return result;\n};\n/**\n * ucs2decode() and codePointAt() are both works of Mathias Bynens and licensed under MIT\n *\n * Copyright Mathias Bynens <https://mathiasbynens.be/>\n\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */ function ucs2decode(string) {\n    var output = [];\n    var counter = 0;\n    var length = string.length;\n    while(counter < length){\n        var value = string.charCodeAt(counter++);\n        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n            var extra = string.charCodeAt(counter++);\n            if ((extra & 0xFC00) == 0xDC00) {\n                // eslint-disable-line eqeqeq\n                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n            } else {\n                output.push(value);\n                counter--;\n            }\n        } else {\n            output.push(value);\n        }\n    }\n    return output;\n}\nfunction toHex(unicode) {\n    var decoded = ucs2decode(unicode);\n    return decoded.length === 1 ? decoded[0].toString(16) : null;\n}\nfunction codePointAt(string, index) {\n    var size = string.length;\n    var first = string.charCodeAt(index);\n    var second;\n    if (first >= 0xD800 && first <= 0xDBFF && size > index + 1) {\n        second = string.charCodeAt(index + 1);\n        if (second >= 0xDC00 && second <= 0xDFFF) {\n            return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        }\n    }\n    return first;\n}\nfunction normalizeIcons(icons) {\n    return Object.keys(icons).reduce(function(acc, iconName) {\n        var icon = icons[iconName];\n        var expanded = !!icon.icon;\n        if (expanded) {\n            acc[icon.iconName] = icon.icon;\n        } else {\n            acc[iconName] = icon;\n        }\n        return acc;\n    }, {});\n}\nfunction defineIcons(prefix, icons) {\n    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var _params$skipHooks = params.skipHooks, skipHooks = _params$skipHooks === void 0 ? false : _params$skipHooks;\n    var normalized = normalizeIcons(icons);\n    if (typeof namespace.hooks.addPack === \"function\" && !skipHooks) {\n        namespace.hooks.addPack(prefix, normalizeIcons(icons));\n    } else {\n        namespace.styles[prefix] = _objectSpread2(_objectSpread2({}, namespace.styles[prefix] || {}), normalized);\n    }\n    /**\n   * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction\n   * of new styles we needed to differentiate between them. Prefix `fa` is now an alias\n   * for `fas` so we'll ease the upgrade process for our users by automatically defining\n   * this as well.\n   */ if (prefix === \"fas\") {\n        defineIcons(\"fa\", icons);\n    }\n}\nvar duotonePathRe = [\n    /*#__PURE__*/ _wrapRegExp(/path d=\"((?:(?!\")[\\s\\S])+)\".*path d=\"((?:(?!\")[\\s\\S])+)\"/, {\n        d1: 1,\n        d2: 2\n    }),\n    /*#__PURE__*/ _wrapRegExp(/path class=\"((?:(?!\")[\\s\\S])+)\".*d=\"((?:(?!\")[\\s\\S])+)\".*path class=\"((?:(?!\")[\\s\\S])+)\".*d=\"((?:(?!\")[\\s\\S])+)\"/, {\n        cls1: 1,\n        d1: 2,\n        cls2: 3,\n        d2: 4\n    }),\n    /*#__PURE__*/ _wrapRegExp(/path class=\"((?:(?!\")[\\s\\S])+)\".*d=\"((?:(?!\")[\\s\\S])+)\"/, {\n        cls1: 1,\n        d1: 2\n    })\n];\nvar _LONG_STYLE, _PREFIXES, _PREFIXES_FOR_FAMILY;\nvar styles = namespace.styles, shims = namespace.shims;\nvar LONG_STYLE = (_LONG_STYLE = {}, _defineProperty(_LONG_STYLE, FAMILY_CLASSIC, Object.values(PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC])), _defineProperty(_LONG_STYLE, FAMILY_SHARP, Object.values(PREFIX_TO_LONG_STYLE[FAMILY_SHARP])), _LONG_STYLE);\nvar _defaultUsablePrefix = null;\nvar _byUnicode = {};\nvar _byLigature = {};\nvar _byOldName = {};\nvar _byOldUnicode = {};\nvar _byAlias = {};\nvar PREFIXES = (_PREFIXES = {}, _defineProperty(_PREFIXES, FAMILY_CLASSIC, Object.keys(PREFIX_TO_STYLE[FAMILY_CLASSIC])), _defineProperty(_PREFIXES, FAMILY_SHARP, Object.keys(PREFIX_TO_STYLE[FAMILY_SHARP])), _PREFIXES);\nfunction isReserved(name) {\n    return ~RESERVED_CLASSES.indexOf(name);\n}\nfunction getIconName(cssPrefix, cls) {\n    var parts = cls.split(\"-\");\n    var prefix = parts[0];\n    var iconName = parts.slice(1).join(\"-\");\n    if (prefix === cssPrefix && iconName !== \"\" && !isReserved(iconName)) {\n        return iconName;\n    } else {\n        return null;\n    }\n}\nvar build = function build() {\n    var lookup = function lookup(reducer) {\n        return reduce(styles, function(o, style, prefix) {\n            o[prefix] = reduce(style, reducer, {});\n            return o;\n        }, {});\n    };\n    _byUnicode = lookup(function(acc, icon, iconName) {\n        if (icon[3]) {\n            acc[icon[3]] = iconName;\n        }\n        if (icon[2]) {\n            var aliases = icon[2].filter(function(a) {\n                return typeof a === \"number\";\n            });\n            aliases.forEach(function(alias) {\n                acc[alias.toString(16)] = iconName;\n            });\n        }\n        return acc;\n    });\n    _byLigature = lookup(function(acc, icon, iconName) {\n        acc[iconName] = iconName;\n        if (icon[2]) {\n            var aliases = icon[2].filter(function(a) {\n                return typeof a === \"string\";\n            });\n            aliases.forEach(function(alias) {\n                acc[alias] = iconName;\n            });\n        }\n        return acc;\n    });\n    _byAlias = lookup(function(acc, icon, iconName) {\n        var aliases = icon[2];\n        acc[iconName] = iconName;\n        aliases.forEach(function(alias) {\n            acc[alias] = iconName;\n        });\n        return acc;\n    }); // If we have a Kit, we can't determine if regular is available since we\n    // could be auto-fetching it. We'll have to assume that it is available.\n    var hasRegular = \"far\" in styles || config.autoFetchSvg;\n    var shimLookups = reduce(shims, function(acc, shim) {\n        var maybeNameMaybeUnicode = shim[0];\n        var prefix = shim[1];\n        var iconName = shim[2];\n        if (prefix === \"far\" && !hasRegular) {\n            prefix = \"fas\";\n        }\n        if (typeof maybeNameMaybeUnicode === \"string\") {\n            acc.names[maybeNameMaybeUnicode] = {\n                prefix: prefix,\n                iconName: iconName\n            };\n        }\n        if (typeof maybeNameMaybeUnicode === \"number\") {\n            acc.unicodes[maybeNameMaybeUnicode.toString(16)] = {\n                prefix: prefix,\n                iconName: iconName\n            };\n        }\n        return acc;\n    }, {\n        names: {},\n        unicodes: {}\n    });\n    _byOldName = shimLookups.names;\n    _byOldUnicode = shimLookups.unicodes;\n    _defaultUsablePrefix = getCanonicalPrefix(config.styleDefault, {\n        family: config.familyDefault\n    });\n};\nonChange(function(c) {\n    _defaultUsablePrefix = getCanonicalPrefix(c.styleDefault, {\n        family: config.familyDefault\n    });\n});\nbuild();\nfunction byUnicode(prefix, unicode) {\n    return (_byUnicode[prefix] || {})[unicode];\n}\nfunction byLigature(prefix, ligature) {\n    return (_byLigature[prefix] || {})[ligature];\n}\nfunction byAlias(prefix, alias) {\n    return (_byAlias[prefix] || {})[alias];\n}\nfunction byOldName(name) {\n    return _byOldName[name] || {\n        prefix: null,\n        iconName: null\n    };\n}\nfunction byOldUnicode(unicode) {\n    var oldUnicode = _byOldUnicode[unicode];\n    var newUnicode = byUnicode(\"fas\", unicode);\n    return oldUnicode || (newUnicode ? {\n        prefix: \"fas\",\n        iconName: newUnicode\n    } : null) || {\n        prefix: null,\n        iconName: null\n    };\n}\nfunction getDefaultUsablePrefix() {\n    return _defaultUsablePrefix;\n}\nvar emptyCanonicalIcon = function emptyCanonicalIcon() {\n    return {\n        prefix: null,\n        iconName: null,\n        rest: []\n    };\n};\nfunction getCanonicalPrefix(styleOrPrefix) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _params$family = params.family, family = _params$family === void 0 ? FAMILY_CLASSIC : _params$family;\n    var style = PREFIX_TO_STYLE[family][styleOrPrefix];\n    var prefix = STYLE_TO_PREFIX[family][styleOrPrefix] || STYLE_TO_PREFIX[family][style];\n    var defined = styleOrPrefix in namespace.styles ? styleOrPrefix : null;\n    return prefix || defined || null;\n}\nvar PREFIXES_FOR_FAMILY = (_PREFIXES_FOR_FAMILY = {}, _defineProperty(_PREFIXES_FOR_FAMILY, FAMILY_CLASSIC, Object.keys(PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC])), _defineProperty(_PREFIXES_FOR_FAMILY, FAMILY_SHARP, Object.keys(PREFIX_TO_LONG_STYLE[FAMILY_SHARP])), _PREFIXES_FOR_FAMILY);\nfunction getCanonicalIcon(values) {\n    var _famProps;\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _params$skipLookups = params.skipLookups, skipLookups = _params$skipLookups === void 0 ? false : _params$skipLookups;\n    var famProps = (_famProps = {}, _defineProperty(_famProps, FAMILY_CLASSIC, \"\".concat(config.cssPrefix, \"-\").concat(FAMILY_CLASSIC)), _defineProperty(_famProps, FAMILY_SHARP, \"\".concat(config.cssPrefix, \"-\").concat(FAMILY_SHARP)), _famProps);\n    var givenPrefix = null;\n    var family = FAMILY_CLASSIC;\n    if (values.includes(famProps[FAMILY_CLASSIC]) || values.some(function(v) {\n        return PREFIXES_FOR_FAMILY[FAMILY_CLASSIC].includes(v);\n    })) {\n        family = FAMILY_CLASSIC;\n    }\n    if (values.includes(famProps[FAMILY_SHARP]) || values.some(function(v) {\n        return PREFIXES_FOR_FAMILY[FAMILY_SHARP].includes(v);\n    })) {\n        family = FAMILY_SHARP;\n    }\n    var canonical = values.reduce(function(acc, cls) {\n        var iconName = getIconName(config.cssPrefix, cls);\n        if (styles[cls]) {\n            cls = LONG_STYLE[family].includes(cls) ? LONG_STYLE_TO_PREFIX[family][cls] : cls;\n            givenPrefix = cls;\n            acc.prefix = cls;\n        } else if (PREFIXES[family].indexOf(cls) > -1) {\n            givenPrefix = cls;\n            acc.prefix = getCanonicalPrefix(cls, {\n                family: family\n            });\n        } else if (iconName) {\n            acc.iconName = iconName;\n        } else if (cls !== config.replacementClass && cls !== famProps[FAMILY_CLASSIC] && cls !== famProps[FAMILY_SHARP]) {\n            acc.rest.push(cls);\n        }\n        if (!skipLookups && acc.prefix && acc.iconName) {\n            var shim = givenPrefix === \"fa\" ? byOldName(acc.iconName) : {};\n            var aliasIconName = byAlias(acc.prefix, acc.iconName);\n            if (shim.prefix) {\n                givenPrefix = null;\n            }\n            acc.iconName = shim.iconName || aliasIconName || acc.iconName;\n            acc.prefix = shim.prefix || acc.prefix;\n            if (acc.prefix === \"far\" && !styles[\"far\"] && styles[\"fas\"] && !config.autoFetchSvg) {\n                // Allow a fallback from the regular style to solid if regular is not available\n                // but only if we aren't auto-fetching SVGs\n                acc.prefix = \"fas\";\n            }\n        }\n        return acc;\n    }, emptyCanonicalIcon());\n    if (values.includes(\"fa-brands\") || values.includes(\"fab\")) {\n        canonical.prefix = \"fab\";\n    }\n    if (values.includes(\"fa-duotone\") || values.includes(\"fad\")) {\n        canonical.prefix = \"fad\";\n    }\n    if (!canonical.prefix && family === FAMILY_SHARP && (styles[\"fass\"] || config.autoFetchSvg)) {\n        canonical.prefix = \"fass\";\n        canonical.iconName = byAlias(canonical.prefix, canonical.iconName) || canonical.iconName;\n    }\n    if (canonical.prefix === \"fa\" || givenPrefix === \"fa\") {\n        // The fa prefix is not canonical. So if it has made it through until this point\n        // we will shift it to the correct prefix.\n        canonical.prefix = getDefaultUsablePrefix() || \"fas\";\n    }\n    return canonical;\n}\nvar Library = /*#__PURE__*/ function() {\n    function Library() {\n        _classCallCheck(this, Library);\n        this.definitions = {};\n    }\n    _createClass(Library, [\n        {\n            key: \"add\",\n            value: function add() {\n                var _this = this;\n                for(var _len = arguments.length, definitions = new Array(_len), _key = 0; _key < _len; _key++){\n                    definitions[_key] = arguments[_key];\n                }\n                var additions = definitions.reduce(this._pullDefinitions, {});\n                Object.keys(additions).forEach(function(key) {\n                    _this.definitions[key] = _objectSpread2(_objectSpread2({}, _this.definitions[key] || {}), additions[key]);\n                    defineIcons(key, additions[key]); // TODO can we stop doing this? We can't get the icons by 'fa-solid' any longer so this probably needs to change\n                    var longPrefix = PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC][key];\n                    if (longPrefix) defineIcons(longPrefix, additions[key]);\n                    build();\n                });\n            }\n        },\n        {\n            key: \"reset\",\n            value: function reset() {\n                this.definitions = {};\n            }\n        },\n        {\n            key: \"_pullDefinitions\",\n            value: function _pullDefinitions(additions, definition) {\n                var normalized = definition.prefix && definition.iconName && definition.icon ? {\n                    0: definition\n                } : definition;\n                Object.keys(normalized).map(function(key) {\n                    var _normalized$key = normalized[key], prefix = _normalized$key.prefix, iconName = _normalized$key.iconName, icon = _normalized$key.icon;\n                    var aliases = icon[2];\n                    if (!additions[prefix]) additions[prefix] = {};\n                    if (aliases.length > 0) {\n                        aliases.forEach(function(alias) {\n                            if (typeof alias === \"string\") {\n                                additions[prefix][alias] = icon;\n                            }\n                        });\n                    }\n                    additions[prefix][iconName] = icon;\n                });\n                return additions;\n            }\n        }\n    ]);\n    return Library;\n}();\nvar _plugins = [];\nvar _hooks = {};\nvar providers = {};\nvar defaultProviderKeys = Object.keys(providers);\nfunction registerPlugins(nextPlugins, _ref) {\n    var obj = _ref.mixoutsTo;\n    _plugins = nextPlugins;\n    _hooks = {};\n    Object.keys(providers).forEach(function(k) {\n        if (defaultProviderKeys.indexOf(k) === -1) {\n            delete providers[k];\n        }\n    });\n    _plugins.forEach(function(plugin) {\n        var mixout = plugin.mixout ? plugin.mixout() : {};\n        Object.keys(mixout).forEach(function(tk) {\n            if (typeof mixout[tk] === \"function\") {\n                obj[tk] = mixout[tk];\n            }\n            if (_typeof(mixout[tk]) === \"object\") {\n                Object.keys(mixout[tk]).forEach(function(sk) {\n                    if (!obj[tk]) {\n                        obj[tk] = {};\n                    }\n                    obj[tk][sk] = mixout[tk][sk];\n                });\n            }\n        });\n        if (plugin.hooks) {\n            var hooks = plugin.hooks();\n            Object.keys(hooks).forEach(function(hook) {\n                if (!_hooks[hook]) {\n                    _hooks[hook] = [];\n                }\n                _hooks[hook].push(hooks[hook]);\n            });\n        }\n        if (plugin.provides) {\n            plugin.provides(providers);\n        }\n    });\n    return obj;\n}\nfunction chainHooks(hook, accumulator) {\n    for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n        args[_key - 2] = arguments[_key];\n    }\n    var hookFns = _hooks[hook] || [];\n    hookFns.forEach(function(hookFn) {\n        accumulator = hookFn.apply(null, [\n            accumulator\n        ].concat(args)); // eslint-disable-line no-useless-call\n    });\n    return accumulator;\n}\nfunction callHooks(hook) {\n    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n        args[_key2 - 1] = arguments[_key2];\n    }\n    var hookFns = _hooks[hook] || [];\n    hookFns.forEach(function(hookFn) {\n        hookFn.apply(null, args);\n    });\n    return undefined;\n}\nfunction callProvided() {\n    var hook = arguments[0];\n    var args = Array.prototype.slice.call(arguments, 1);\n    return providers[hook] ? providers[hook].apply(null, args) : undefined;\n}\nfunction findIconDefinition(iconLookup) {\n    if (iconLookup.prefix === \"fa\") {\n        iconLookup.prefix = \"fas\";\n    }\n    var iconName = iconLookup.iconName;\n    var prefix = iconLookup.prefix || getDefaultUsablePrefix();\n    if (!iconName) return;\n    iconName = byAlias(prefix, iconName) || iconName;\n    return iconFromMapping(library.definitions, prefix, iconName) || iconFromMapping(namespace.styles, prefix, iconName);\n}\nvar library = new Library();\nvar noAuto = function noAuto() {\n    config.autoReplaceSvg = false;\n    config.observeMutations = false;\n    callHooks(\"noAuto\");\n};\nvar dom = {\n    i2svg: function i2svg() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (IS_DOM) {\n            callHooks(\"beforeI2svg\", params);\n            callProvided(\"pseudoElements2svg\", params);\n            return callProvided(\"i2svg\", params);\n        } else {\n            return Promise.reject(\"Operation requires a DOM of some kind.\");\n        }\n    },\n    watch: function watch() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var autoReplaceSvgRoot = params.autoReplaceSvgRoot;\n        if (config.autoReplaceSvg === false) {\n            config.autoReplaceSvg = true;\n        }\n        config.observeMutations = true;\n        domready(function() {\n            autoReplace({\n                autoReplaceSvgRoot: autoReplaceSvgRoot\n            });\n            callHooks(\"watch\", params);\n        });\n    }\n};\nvar parse = {\n    icon: function icon(_icon) {\n        if (_icon === null) {\n            return null;\n        }\n        if (_typeof(_icon) === \"object\" && _icon.prefix && _icon.iconName) {\n            return {\n                prefix: _icon.prefix,\n                iconName: byAlias(_icon.prefix, _icon.iconName) || _icon.iconName\n            };\n        }\n        if (Array.isArray(_icon) && _icon.length === 2) {\n            var iconName = _icon[1].indexOf(\"fa-\") === 0 ? _icon[1].slice(3) : _icon[1];\n            var prefix = getCanonicalPrefix(_icon[0]);\n            return {\n                prefix: prefix,\n                iconName: byAlias(prefix, iconName) || iconName\n            };\n        }\n        if (typeof _icon === \"string\" && (_icon.indexOf(\"\".concat(config.cssPrefix, \"-\")) > -1 || _icon.match(ICON_SELECTION_SYNTAX_PATTERN))) {\n            var canonicalIcon = getCanonicalIcon(_icon.split(\" \"), {\n                skipLookups: true\n            });\n            return {\n                prefix: canonicalIcon.prefix || getDefaultUsablePrefix(),\n                iconName: byAlias(canonicalIcon.prefix, canonicalIcon.iconName) || canonicalIcon.iconName\n            };\n        }\n        if (typeof _icon === \"string\") {\n            var _prefix = getDefaultUsablePrefix();\n            return {\n                prefix: _prefix,\n                iconName: byAlias(_prefix, _icon) || _icon\n            };\n        }\n    }\n};\nvar api = {\n    noAuto: noAuto,\n    config: config,\n    dom: dom,\n    parse: parse,\n    library: library,\n    findIconDefinition: findIconDefinition,\n    toHtml: toHtml\n};\nvar autoReplace = function autoReplace() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _params$autoReplaceSv = params.autoReplaceSvgRoot, autoReplaceSvgRoot = _params$autoReplaceSv === void 0 ? DOCUMENT : _params$autoReplaceSv;\n    if ((Object.keys(namespace.styles).length > 0 || config.autoFetchSvg) && IS_DOM && config.autoReplaceSvg) api.dom.i2svg({\n        node: autoReplaceSvgRoot\n    });\n};\nfunction domVariants(val, abstractCreator) {\n    Object.defineProperty(val, \"abstract\", {\n        get: abstractCreator\n    });\n    Object.defineProperty(val, \"html\", {\n        get: function get() {\n            return val.abstract.map(function(a) {\n                return toHtml(a);\n            });\n        }\n    });\n    Object.defineProperty(val, \"node\", {\n        get: function get() {\n            if (!IS_DOM) return;\n            var container = DOCUMENT.createElement(\"div\");\n            container.innerHTML = val.html;\n            return container.children;\n        }\n    });\n    return val;\n}\nfunction asIcon(_ref) {\n    var children = _ref.children, main = _ref.main, mask = _ref.mask, attributes = _ref.attributes, styles = _ref.styles, transform = _ref.transform;\n    if (transformIsMeaningful(transform) && main.found && !mask.found) {\n        var width = main.width, height = main.height;\n        var offset = {\n            x: width / height / 2,\n            y: 0.5\n        };\n        attributes[\"style\"] = joinStyles(_objectSpread2(_objectSpread2({}, styles), {}, {\n            \"transform-origin\": \"\".concat(offset.x + transform.x / 16, \"em \").concat(offset.y + transform.y / 16, \"em\")\n        }));\n    }\n    return [\n        {\n            tag: \"svg\",\n            attributes: attributes,\n            children: children\n        }\n    ];\n}\nfunction asSymbol(_ref) {\n    var prefix = _ref.prefix, iconName = _ref.iconName, children = _ref.children, attributes = _ref.attributes, symbol = _ref.symbol;\n    var id = symbol === true ? \"\".concat(prefix, \"-\").concat(config.cssPrefix, \"-\").concat(iconName) : symbol;\n    return [\n        {\n            tag: \"svg\",\n            attributes: {\n                style: \"display: none;\"\n            },\n            children: [\n                {\n                    tag: \"symbol\",\n                    attributes: _objectSpread2(_objectSpread2({}, attributes), {}, {\n                        id: id\n                    }),\n                    children: children\n                }\n            ]\n        }\n    ];\n}\nfunction makeInlineSvgAbstract(params) {\n    var _params$icons = params.icons, main = _params$icons.main, mask = _params$icons.mask, prefix = params.prefix, iconName = params.iconName, transform = params.transform, symbol = params.symbol, title = params.title, maskId = params.maskId, titleId = params.titleId, extra = params.extra, _params$watchable = params.watchable, watchable = _params$watchable === void 0 ? false : _params$watchable;\n    var _ref = mask.found ? mask : main, width = _ref.width, height = _ref.height;\n    var isUploadedIcon = prefix === \"fak\";\n    var attrClass = [\n        config.replacementClass,\n        iconName ? \"\".concat(config.cssPrefix, \"-\").concat(iconName) : \"\"\n    ].filter(function(c) {\n        return extra.classes.indexOf(c) === -1;\n    }).filter(function(c) {\n        return c !== \"\" || !!c;\n    }).concat(extra.classes).join(\" \");\n    var content = {\n        children: [],\n        attributes: _objectSpread2(_objectSpread2({}, extra.attributes), {}, {\n            \"data-prefix\": prefix,\n            \"data-icon\": iconName,\n            \"class\": attrClass,\n            \"role\": extra.attributes.role || \"img\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\",\n            \"viewBox\": \"0 0 \".concat(width, \" \").concat(height)\n        })\n    };\n    var uploadedIconWidthStyle = isUploadedIcon && !~extra.classes.indexOf(\"fa-fw\") ? {\n        width: \"\".concat(width / height * 16 * 0.0625, \"em\")\n    } : {};\n    if (watchable) {\n        content.attributes[DATA_FA_I2SVG] = \"\";\n    }\n    if (title) {\n        content.children.push({\n            tag: \"title\",\n            attributes: {\n                id: content.attributes[\"aria-labelledby\"] || \"title-\".concat(titleId || nextUniqueId())\n            },\n            children: [\n                title\n            ]\n        });\n        delete content.attributes.title;\n    }\n    var args = _objectSpread2(_objectSpread2({}, content), {}, {\n        prefix: prefix,\n        iconName: iconName,\n        main: main,\n        mask: mask,\n        maskId: maskId,\n        transform: transform,\n        symbol: symbol,\n        styles: _objectSpread2(_objectSpread2({}, uploadedIconWidthStyle), extra.styles)\n    });\n    var _ref2 = mask.found && main.found ? callProvided(\"generateAbstractMask\", args) || {\n        children: [],\n        attributes: {}\n    } : callProvided(\"generateAbstractIcon\", args) || {\n        children: [],\n        attributes: {}\n    }, children = _ref2.children, attributes = _ref2.attributes;\n    args.children = children;\n    args.attributes = attributes;\n    if (symbol) {\n        return asSymbol(args);\n    } else {\n        return asIcon(args);\n    }\n}\nfunction makeLayersTextAbstract(params) {\n    var content = params.content, width = params.width, height = params.height, transform = params.transform, title = params.title, extra = params.extra, _params$watchable2 = params.watchable, watchable = _params$watchable2 === void 0 ? false : _params$watchable2;\n    var attributes = _objectSpread2(_objectSpread2(_objectSpread2({}, extra.attributes), title ? {\n        \"title\": title\n    } : {}), {}, {\n        \"class\": extra.classes.join(\" \")\n    });\n    if (watchable) {\n        attributes[DATA_FA_I2SVG] = \"\";\n    }\n    var styles = _objectSpread2({}, extra.styles);\n    if (transformIsMeaningful(transform)) {\n        styles[\"transform\"] = transformForCss({\n            transform: transform,\n            startCentered: true,\n            width: width,\n            height: height\n        });\n        styles[\"-webkit-transform\"] = styles[\"transform\"];\n    }\n    var styleString = joinStyles(styles);\n    if (styleString.length > 0) {\n        attributes[\"style\"] = styleString;\n    }\n    var val = [];\n    val.push({\n        tag: \"span\",\n        attributes: attributes,\n        children: [\n            content\n        ]\n    });\n    if (title) {\n        val.push({\n            tag: \"span\",\n            attributes: {\n                class: \"sr-only\"\n            },\n            children: [\n                title\n            ]\n        });\n    }\n    return val;\n}\nfunction makeLayersCounterAbstract(params) {\n    var content = params.content, title = params.title, extra = params.extra;\n    var attributes = _objectSpread2(_objectSpread2(_objectSpread2({}, extra.attributes), title ? {\n        \"title\": title\n    } : {}), {}, {\n        \"class\": extra.classes.join(\" \")\n    });\n    var styleString = joinStyles(extra.styles);\n    if (styleString.length > 0) {\n        attributes[\"style\"] = styleString;\n    }\n    var val = [];\n    val.push({\n        tag: \"span\",\n        attributes: attributes,\n        children: [\n            content\n        ]\n    });\n    if (title) {\n        val.push({\n            tag: \"span\",\n            attributes: {\n                class: \"sr-only\"\n            },\n            children: [\n                title\n            ]\n        });\n    }\n    return val;\n}\nvar styles$1 = namespace.styles;\nfunction asFoundIcon(icon) {\n    var width = icon[0];\n    var height = icon[1];\n    var _icon$slice = icon.slice(4), _icon$slice2 = _slicedToArray(_icon$slice, 1), vectorData = _icon$slice2[0];\n    var element = null;\n    if (Array.isArray(vectorData)) {\n        element = {\n            tag: \"g\",\n            attributes: {\n                class: \"\".concat(config.cssPrefix, \"-\").concat(DUOTONE_CLASSES.GROUP)\n            },\n            children: [\n                {\n                    tag: \"path\",\n                    attributes: {\n                        class: \"\".concat(config.cssPrefix, \"-\").concat(DUOTONE_CLASSES.SECONDARY),\n                        fill: \"currentColor\",\n                        d: vectorData[0]\n                    }\n                },\n                {\n                    tag: \"path\",\n                    attributes: {\n                        class: \"\".concat(config.cssPrefix, \"-\").concat(DUOTONE_CLASSES.PRIMARY),\n                        fill: \"currentColor\",\n                        d: vectorData[1]\n                    }\n                }\n            ]\n        };\n    } else {\n        element = {\n            tag: \"path\",\n            attributes: {\n                fill: \"currentColor\",\n                d: vectorData\n            }\n        };\n    }\n    return {\n        found: true,\n        width: width,\n        height: height,\n        icon: element\n    };\n}\nvar missingIconResolutionMixin = {\n    found: false,\n    width: 512,\n    height: 512\n};\nfunction maybeNotifyMissing(iconName, prefix) {\n    if (!PRODUCTION && !config.showMissingIcons && iconName) {\n        console.error('Icon with name \"'.concat(iconName, '\" and prefix \"').concat(prefix, '\" is missing.'));\n    }\n}\nfunction findIcon(iconName, prefix) {\n    var givenPrefix = prefix;\n    if (prefix === \"fa\" && config.styleDefault !== null) {\n        prefix = getDefaultUsablePrefix();\n    }\n    return new Promise(function(resolve, reject) {\n        var val = {\n            found: false,\n            width: 512,\n            height: 512,\n            icon: callProvided(\"missingIconAbstract\") || {}\n        };\n        if (givenPrefix === \"fa\") {\n            var shim = byOldName(iconName) || {};\n            iconName = shim.iconName || iconName;\n            prefix = shim.prefix || prefix;\n        }\n        if (iconName && prefix && styles$1[prefix] && styles$1[prefix][iconName]) {\n            var icon = styles$1[prefix][iconName];\n            return resolve(asFoundIcon(icon));\n        }\n        maybeNotifyMissing(iconName, prefix);\n        resolve(_objectSpread2(_objectSpread2({}, missingIconResolutionMixin), {}, {\n            icon: config.showMissingIcons && iconName ? callProvided(\"missingIconAbstract\") || {} : {}\n        }));\n    });\n}\nvar noop$1 = function noop() {};\nvar p = config.measurePerformance && PERFORMANCE && PERFORMANCE.mark && PERFORMANCE.measure ? PERFORMANCE : {\n    mark: noop$1,\n    measure: noop$1\n};\nvar preamble = 'FA \"6.5.1\"';\nvar begin = function begin(name) {\n    p.mark(\"\".concat(preamble, \" \").concat(name, \" begins\"));\n    return function() {\n        return end(name);\n    };\n};\nvar end = function end(name) {\n    p.mark(\"\".concat(preamble, \" \").concat(name, \" ends\"));\n    p.measure(\"\".concat(preamble, \" \").concat(name), \"\".concat(preamble, \" \").concat(name, \" begins\"), \"\".concat(preamble, \" \").concat(name, \" ends\"));\n};\nvar perf = {\n    begin: begin,\n    end: end\n};\nvar noop$2 = function noop() {};\nfunction isWatched(node) {\n    var i2svg = node.getAttribute ? node.getAttribute(DATA_FA_I2SVG) : null;\n    return typeof i2svg === \"string\";\n}\nfunction hasPrefixAndIcon(node) {\n    var prefix = node.getAttribute ? node.getAttribute(DATA_PREFIX) : null;\n    var icon = node.getAttribute ? node.getAttribute(DATA_ICON) : null;\n    return prefix && icon;\n}\nfunction hasBeenReplaced(node) {\n    return node && node.classList && node.classList.contains && node.classList.contains(config.replacementClass);\n}\nfunction getMutator() {\n    if (config.autoReplaceSvg === true) {\n        return mutators.replace;\n    }\n    var mutator = mutators[config.autoReplaceSvg];\n    return mutator || mutators.replace;\n}\nfunction createElementNS(tag) {\n    return DOCUMENT.createElementNS(\"http://www.w3.org/2000/svg\", tag);\n}\nfunction createElement(tag) {\n    return DOCUMENT.createElement(tag);\n}\nfunction convertSVG(abstractObj) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _params$ceFn = params.ceFn, ceFn = _params$ceFn === void 0 ? abstractObj.tag === \"svg\" ? createElementNS : createElement : _params$ceFn;\n    if (typeof abstractObj === \"string\") {\n        return DOCUMENT.createTextNode(abstractObj);\n    }\n    var tag = ceFn(abstractObj.tag);\n    Object.keys(abstractObj.attributes || []).forEach(function(key) {\n        tag.setAttribute(key, abstractObj.attributes[key]);\n    });\n    var children = abstractObj.children || [];\n    children.forEach(function(child) {\n        tag.appendChild(convertSVG(child, {\n            ceFn: ceFn\n        }));\n    });\n    return tag;\n}\nfunction nodeAsComment(node) {\n    var comment = \" \".concat(node.outerHTML, \" \");\n    /* BEGIN.ATTRIBUTION */ comment = \"\".concat(comment, \"Font Awesome fontawesome.com \");\n    /* END.ATTRIBUTION */ return comment;\n}\nvar mutators = {\n    replace: function replace(mutation) {\n        var node = mutation[0];\n        if (node.parentNode) {\n            mutation[1].forEach(function(_abstract) {\n                node.parentNode.insertBefore(convertSVG(_abstract), node);\n            });\n            if (node.getAttribute(DATA_FA_I2SVG) === null && config.keepOriginalSource) {\n                var comment = DOCUMENT.createComment(nodeAsComment(node));\n                node.parentNode.replaceChild(comment, node);\n            } else {\n                node.remove();\n            }\n        }\n    },\n    nest: function nest(mutation) {\n        var node = mutation[0];\n        var _abstract2 = mutation[1]; // If we already have a replaced node we do not want to continue nesting within it.\n        // Short-circuit to the standard replacement\n        if (~classArray(node).indexOf(config.replacementClass)) {\n            return mutators.replace(mutation);\n        }\n        var forSvg = new RegExp(\"\".concat(config.cssPrefix, \"-.*\"));\n        delete _abstract2[0].attributes.id;\n        if (_abstract2[0].attributes.class) {\n            var splitClasses = _abstract2[0].attributes.class.split(\" \").reduce(function(acc, cls) {\n                if (cls === config.replacementClass || cls.match(forSvg)) {\n                    acc.toSvg.push(cls);\n                } else {\n                    acc.toNode.push(cls);\n                }\n                return acc;\n            }, {\n                toNode: [],\n                toSvg: []\n            });\n            _abstract2[0].attributes.class = splitClasses.toSvg.join(\" \");\n            if (splitClasses.toNode.length === 0) {\n                node.removeAttribute(\"class\");\n            } else {\n                node.setAttribute(\"class\", splitClasses.toNode.join(\" \"));\n            }\n        }\n        var newInnerHTML = _abstract2.map(function(a) {\n            return toHtml(a);\n        }).join(\"\\n\");\n        node.setAttribute(DATA_FA_I2SVG, \"\");\n        node.innerHTML = newInnerHTML;\n    }\n};\nfunction performOperationSync(op) {\n    op();\n}\nfunction perform(mutations, callback) {\n    var callbackFunction = typeof callback === \"function\" ? callback : noop$2;\n    if (mutations.length === 0) {\n        callbackFunction();\n    } else {\n        var frame = performOperationSync;\n        if (config.mutateApproach === MUTATION_APPROACH_ASYNC) {\n            frame = WINDOW.requestAnimationFrame || performOperationSync;\n        }\n        frame(function() {\n            var mutator = getMutator();\n            var mark = perf.begin(\"mutate\");\n            mutations.map(mutator);\n            mark();\n            callbackFunction();\n        });\n    }\n}\nvar disabled = false;\nfunction disableObservation() {\n    disabled = true;\n}\nfunction enableObservation() {\n    disabled = false;\n}\nvar mo = null;\nfunction observe(options) {\n    if (!MUTATION_OBSERVER) {\n        return;\n    }\n    if (!config.observeMutations) {\n        return;\n    }\n    var _options$treeCallback = options.treeCallback, treeCallback = _options$treeCallback === void 0 ? noop$2 : _options$treeCallback, _options$nodeCallback = options.nodeCallback, nodeCallback = _options$nodeCallback === void 0 ? noop$2 : _options$nodeCallback, _options$pseudoElemen = options.pseudoElementsCallback, pseudoElementsCallback = _options$pseudoElemen === void 0 ? noop$2 : _options$pseudoElemen, _options$observeMutat = options.observeMutationsRoot, observeMutationsRoot = _options$observeMutat === void 0 ? DOCUMENT : _options$observeMutat;\n    mo = new MUTATION_OBSERVER(function(objects) {\n        if (disabled) return;\n        var defaultPrefix = getDefaultUsablePrefix();\n        toArray(objects).forEach(function(mutationRecord) {\n            if (mutationRecord.type === \"childList\" && mutationRecord.addedNodes.length > 0 && !isWatched(mutationRecord.addedNodes[0])) {\n                if (config.searchPseudoElements) {\n                    pseudoElementsCallback(mutationRecord.target);\n                }\n                treeCallback(mutationRecord.target);\n            }\n            if (mutationRecord.type === \"attributes\" && mutationRecord.target.parentNode && config.searchPseudoElements) {\n                pseudoElementsCallback(mutationRecord.target.parentNode);\n            }\n            if (mutationRecord.type === \"attributes\" && isWatched(mutationRecord.target) && ~ATTRIBUTES_WATCHED_FOR_MUTATION.indexOf(mutationRecord.attributeName)) {\n                if (mutationRecord.attributeName === \"class\" && hasPrefixAndIcon(mutationRecord.target)) {\n                    var _getCanonicalIcon = getCanonicalIcon(classArray(mutationRecord.target)), prefix = _getCanonicalIcon.prefix, iconName = _getCanonicalIcon.iconName;\n                    mutationRecord.target.setAttribute(DATA_PREFIX, prefix || defaultPrefix);\n                    if (iconName) mutationRecord.target.setAttribute(DATA_ICON, iconName);\n                } else if (hasBeenReplaced(mutationRecord.target)) {\n                    nodeCallback(mutationRecord.target);\n                }\n            }\n        });\n    });\n    if (!IS_DOM) return;\n    mo.observe(observeMutationsRoot, {\n        childList: true,\n        attributes: true,\n        characterData: true,\n        subtree: true\n    });\n}\nfunction disconnect() {\n    if (!mo) return;\n    mo.disconnect();\n}\nfunction styleParser(node) {\n    var style = node.getAttribute(\"style\");\n    var val = [];\n    if (style) {\n        val = style.split(\";\").reduce(function(acc, style) {\n            var styles = style.split(\":\");\n            var prop = styles[0];\n            var value = styles.slice(1);\n            if (prop && value.length > 0) {\n                acc[prop] = value.join(\":\").trim();\n            }\n            return acc;\n        }, {});\n    }\n    return val;\n}\nfunction classParser(node) {\n    var existingPrefix = node.getAttribute(\"data-prefix\");\n    var existingIconName = node.getAttribute(\"data-icon\");\n    var innerText = node.innerText !== undefined ? node.innerText.trim() : \"\";\n    var val = getCanonicalIcon(classArray(node));\n    if (!val.prefix) {\n        val.prefix = getDefaultUsablePrefix();\n    }\n    if (existingPrefix && existingIconName) {\n        val.prefix = existingPrefix;\n        val.iconName = existingIconName;\n    }\n    if (val.iconName && val.prefix) {\n        return val;\n    }\n    if (val.prefix && innerText.length > 0) {\n        val.iconName = byLigature(val.prefix, node.innerText) || byUnicode(val.prefix, toHex(node.innerText));\n    }\n    if (!val.iconName && config.autoFetchSvg && node.firstChild && node.firstChild.nodeType === Node.TEXT_NODE) {\n        val.iconName = node.firstChild.data;\n    }\n    return val;\n}\nfunction attributesParser(node) {\n    var extraAttributes = toArray(node.attributes).reduce(function(acc, attr) {\n        if (acc.name !== \"class\" && acc.name !== \"style\") {\n            acc[attr.name] = attr.value;\n        }\n        return acc;\n    }, {});\n    var title = node.getAttribute(\"title\");\n    var titleId = node.getAttribute(\"data-fa-title-id\");\n    if (config.autoA11y) {\n        if (title) {\n            extraAttributes[\"aria-labelledby\"] = \"\".concat(config.replacementClass, \"-title-\").concat(titleId || nextUniqueId());\n        } else {\n            extraAttributes[\"aria-hidden\"] = \"true\";\n            extraAttributes[\"focusable\"] = \"false\";\n        }\n    }\n    return extraAttributes;\n}\nfunction blankMeta() {\n    return {\n        iconName: null,\n        title: null,\n        titleId: null,\n        prefix: null,\n        transform: meaninglessTransform,\n        symbol: false,\n        mask: {\n            iconName: null,\n            prefix: null,\n            rest: []\n        },\n        maskId: null,\n        extra: {\n            classes: [],\n            styles: {},\n            attributes: {}\n        }\n    };\n}\nfunction parseMeta(node) {\n    var parser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        styleParser: true\n    };\n    var _classParser = classParser(node), iconName = _classParser.iconName, prefix = _classParser.prefix, extraClasses = _classParser.rest;\n    var extraAttributes = attributesParser(node);\n    var pluginMeta = chainHooks(\"parseNodeAttributes\", {}, node);\n    var extraStyles = parser.styleParser ? styleParser(node) : [];\n    return _objectSpread2({\n        iconName: iconName,\n        title: node.getAttribute(\"title\"),\n        titleId: node.getAttribute(\"data-fa-title-id\"),\n        prefix: prefix,\n        transform: meaninglessTransform,\n        mask: {\n            iconName: null,\n            prefix: null,\n            rest: []\n        },\n        maskId: null,\n        symbol: false,\n        extra: {\n            classes: extraClasses,\n            styles: extraStyles,\n            attributes: extraAttributes\n        }\n    }, pluginMeta);\n}\nvar styles$2 = namespace.styles;\nfunction generateMutation(node) {\n    var nodeMeta = config.autoReplaceSvg === \"nest\" ? parseMeta(node, {\n        styleParser: false\n    }) : parseMeta(node);\n    if (~nodeMeta.extra.classes.indexOf(LAYERS_TEXT_CLASSNAME)) {\n        return callProvided(\"generateLayersText\", node, nodeMeta);\n    } else {\n        return callProvided(\"generateSvgReplacementMutation\", node, nodeMeta);\n    }\n}\nvar knownPrefixes = new Set();\nFAMILIES.map(function(family) {\n    knownPrefixes.add(\"fa-\".concat(family));\n});\nObject.keys(PREFIX_TO_STYLE[FAMILY_CLASSIC]).map(knownPrefixes.add.bind(knownPrefixes));\nObject.keys(PREFIX_TO_STYLE[FAMILY_SHARP]).map(knownPrefixes.add.bind(knownPrefixes));\nknownPrefixes = _toConsumableArray(knownPrefixes);\nfunction onTree(root) {\n    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (!IS_DOM) return Promise.resolve();\n    var htmlClassList = DOCUMENT.documentElement.classList;\n    var hclAdd = function hclAdd(suffix) {\n        return htmlClassList.add(\"\".concat(HTML_CLASS_I2SVG_BASE_CLASS, \"-\").concat(suffix));\n    };\n    var hclRemove = function hclRemove(suffix) {\n        return htmlClassList.remove(\"\".concat(HTML_CLASS_I2SVG_BASE_CLASS, \"-\").concat(suffix));\n    };\n    var prefixes = config.autoFetchSvg ? knownPrefixes : FAMILIES.map(function(f) {\n        return \"fa-\".concat(f);\n    }).concat(Object.keys(styles$2));\n    if (!prefixes.includes(\"fa\")) {\n        prefixes.push(\"fa\");\n    }\n    var prefixesDomQuery = [\n        \".\".concat(LAYERS_TEXT_CLASSNAME, \":not([\").concat(DATA_FA_I2SVG, \"])\")\n    ].concat(prefixes.map(function(p) {\n        return \".\".concat(p, \":not([\").concat(DATA_FA_I2SVG, \"])\");\n    })).join(\", \");\n    if (prefixesDomQuery.length === 0) {\n        return Promise.resolve();\n    }\n    var candidates = [];\n    try {\n        candidates = toArray(root.querySelectorAll(prefixesDomQuery));\n    } catch (e) {}\n    if (candidates.length > 0) {\n        hclAdd(\"pending\");\n        hclRemove(\"complete\");\n    } else {\n        return Promise.resolve();\n    }\n    var mark = perf.begin(\"onTree\");\n    var mutations = candidates.reduce(function(acc, node) {\n        try {\n            var mutation = generateMutation(node);\n            if (mutation) {\n                acc.push(mutation);\n            }\n        } catch (e) {\n            if (!PRODUCTION) {\n                if (e.name === \"MissingIcon\") {\n                    console.error(e);\n                }\n            }\n        }\n        return acc;\n    }, []);\n    return new Promise(function(resolve, reject) {\n        Promise.all(mutations).then(function(resolvedMutations) {\n            perform(resolvedMutations, function() {\n                hclAdd(\"active\");\n                hclAdd(\"complete\");\n                hclRemove(\"pending\");\n                if (typeof callback === \"function\") callback();\n                mark();\n                resolve();\n            });\n        }).catch(function(e) {\n            mark();\n            reject(e);\n        });\n    });\n}\nfunction onNode(node) {\n    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    generateMutation(node).then(function(mutation) {\n        if (mutation) {\n            perform([\n                mutation\n            ], callback);\n        }\n    });\n}\nfunction resolveIcons(next) {\n    return function(maybeIconDefinition) {\n        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var iconDefinition = (maybeIconDefinition || {}).icon ? maybeIconDefinition : findIconDefinition(maybeIconDefinition || {});\n        var mask = params.mask;\n        if (mask) {\n            mask = (mask || {}).icon ? mask : findIconDefinition(mask || {});\n        }\n        return next(iconDefinition, _objectSpread2(_objectSpread2({}, params), {}, {\n            mask: mask\n        }));\n    };\n}\nvar render = function render(iconDefinition) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _params$transform = params.transform, transform = _params$transform === void 0 ? meaninglessTransform : _params$transform, _params$symbol = params.symbol, symbol = _params$symbol === void 0 ? false : _params$symbol, _params$mask = params.mask, mask = _params$mask === void 0 ? null : _params$mask, _params$maskId = params.maskId, maskId = _params$maskId === void 0 ? null : _params$maskId, _params$title = params.title, title = _params$title === void 0 ? null : _params$title, _params$titleId = params.titleId, titleId = _params$titleId === void 0 ? null : _params$titleId, _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes, _params$attributes = params.attributes, attributes = _params$attributes === void 0 ? {} : _params$attributes, _params$styles = params.styles, styles = _params$styles === void 0 ? {} : _params$styles;\n    if (!iconDefinition) return;\n    var prefix = iconDefinition.prefix, iconName = iconDefinition.iconName, icon = iconDefinition.icon;\n    return domVariants(_objectSpread2({\n        type: \"icon\"\n    }, iconDefinition), function() {\n        callHooks(\"beforeDOMElementCreation\", {\n            iconDefinition: iconDefinition,\n            params: params\n        });\n        if (config.autoA11y) {\n            if (title) {\n                attributes[\"aria-labelledby\"] = \"\".concat(config.replacementClass, \"-title-\").concat(titleId || nextUniqueId());\n            } else {\n                attributes[\"aria-hidden\"] = \"true\";\n                attributes[\"focusable\"] = \"false\";\n            }\n        }\n        return makeInlineSvgAbstract({\n            icons: {\n                main: asFoundIcon(icon),\n                mask: mask ? asFoundIcon(mask.icon) : {\n                    found: false,\n                    width: null,\n                    height: null,\n                    icon: {}\n                }\n            },\n            prefix: prefix,\n            iconName: iconName,\n            transform: _objectSpread2(_objectSpread2({}, meaninglessTransform), transform),\n            symbol: symbol,\n            title: title,\n            maskId: maskId,\n            titleId: titleId,\n            extra: {\n                attributes: attributes,\n                styles: styles,\n                classes: classes\n            }\n        });\n    });\n};\nvar ReplaceElements = {\n    mixout: function mixout() {\n        return {\n            icon: resolveIcons(render)\n        };\n    },\n    hooks: function hooks() {\n        return {\n            mutationObserverCallbacks: function mutationObserverCallbacks(accumulator) {\n                accumulator.treeCallback = onTree;\n                accumulator.nodeCallback = onNode;\n                return accumulator;\n            }\n        };\n    },\n    provides: function provides(providers$$1) {\n        providers$$1.i2svg = function(params) {\n            var _params$node = params.node, node = _params$node === void 0 ? DOCUMENT : _params$node, _params$callback = params.callback, callback = _params$callback === void 0 ? function() {} : _params$callback;\n            return onTree(node, callback);\n        };\n        providers$$1.generateSvgReplacementMutation = function(node, nodeMeta) {\n            var iconName = nodeMeta.iconName, title = nodeMeta.title, titleId = nodeMeta.titleId, prefix = nodeMeta.prefix, transform = nodeMeta.transform, symbol = nodeMeta.symbol, mask = nodeMeta.mask, maskId = nodeMeta.maskId, extra = nodeMeta.extra;\n            return new Promise(function(resolve, reject) {\n                Promise.all([\n                    findIcon(iconName, prefix),\n                    mask.iconName ? findIcon(mask.iconName, mask.prefix) : Promise.resolve({\n                        found: false,\n                        width: 512,\n                        height: 512,\n                        icon: {}\n                    })\n                ]).then(function(_ref) {\n                    var _ref2 = _slicedToArray(_ref, 2), main = _ref2[0], mask = _ref2[1];\n                    resolve([\n                        node,\n                        makeInlineSvgAbstract({\n                            icons: {\n                                main: main,\n                                mask: mask\n                            },\n                            prefix: prefix,\n                            iconName: iconName,\n                            transform: transform,\n                            symbol: symbol,\n                            maskId: maskId,\n                            title: title,\n                            titleId: titleId,\n                            extra: extra,\n                            watchable: true\n                        })\n                    ]);\n                }).catch(reject);\n            });\n        };\n        providers$$1.generateAbstractIcon = function(_ref3) {\n            var children = _ref3.children, attributes = _ref3.attributes, main = _ref3.main, transform = _ref3.transform, styles = _ref3.styles;\n            var styleString = joinStyles(styles);\n            if (styleString.length > 0) {\n                attributes[\"style\"] = styleString;\n            }\n            var nextChild;\n            if (transformIsMeaningful(transform)) {\n                nextChild = callProvided(\"generateAbstractTransformGrouping\", {\n                    main: main,\n                    transform: transform,\n                    containerWidth: main.width,\n                    iconWidth: main.width\n                });\n            }\n            children.push(nextChild || main.icon);\n            return {\n                children: children,\n                attributes: attributes\n            };\n        };\n    }\n};\nvar Layers = {\n    mixout: function mixout() {\n        return {\n            layer: function layer(assembler) {\n                var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes;\n                return domVariants({\n                    type: \"layer\"\n                }, function() {\n                    callHooks(\"beforeDOMElementCreation\", {\n                        assembler: assembler,\n                        params: params\n                    });\n                    var children = [];\n                    assembler(function(args) {\n                        Array.isArray(args) ? args.map(function(a) {\n                            children = children.concat(a.abstract);\n                        }) : children = children.concat(args.abstract);\n                    });\n                    return [\n                        {\n                            tag: \"span\",\n                            attributes: {\n                                class: [\n                                    \"\".concat(config.cssPrefix, \"-layers\")\n                                ].concat(_toConsumableArray(classes)).join(\" \")\n                            },\n                            children: children\n                        }\n                    ];\n                });\n            }\n        };\n    }\n};\nvar LayersCounter = {\n    mixout: function mixout() {\n        return {\n            counter: function counter(content) {\n                var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var _params$title = params.title, title = _params$title === void 0 ? null : _params$title, _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes, _params$attributes = params.attributes, attributes = _params$attributes === void 0 ? {} : _params$attributes, _params$styles = params.styles, styles = _params$styles === void 0 ? {} : _params$styles;\n                return domVariants({\n                    type: \"counter\",\n                    content: content\n                }, function() {\n                    callHooks(\"beforeDOMElementCreation\", {\n                        content: content,\n                        params: params\n                    });\n                    return makeLayersCounterAbstract({\n                        content: content.toString(),\n                        title: title,\n                        extra: {\n                            attributes: attributes,\n                            styles: styles,\n                            classes: [\n                                \"\".concat(config.cssPrefix, \"-layers-counter\")\n                            ].concat(_toConsumableArray(classes))\n                        }\n                    });\n                });\n            }\n        };\n    }\n};\nvar LayersText = {\n    mixout: function mixout() {\n        return {\n            text: function text(content) {\n                var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var _params$transform = params.transform, transform = _params$transform === void 0 ? meaninglessTransform : _params$transform, _params$title = params.title, title = _params$title === void 0 ? null : _params$title, _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes, _params$attributes = params.attributes, attributes = _params$attributes === void 0 ? {} : _params$attributes, _params$styles = params.styles, styles = _params$styles === void 0 ? {} : _params$styles;\n                return domVariants({\n                    type: \"text\",\n                    content: content\n                }, function() {\n                    callHooks(\"beforeDOMElementCreation\", {\n                        content: content,\n                        params: params\n                    });\n                    return makeLayersTextAbstract({\n                        content: content,\n                        transform: _objectSpread2(_objectSpread2({}, meaninglessTransform), transform),\n                        title: title,\n                        extra: {\n                            attributes: attributes,\n                            styles: styles,\n                            classes: [\n                                \"\".concat(config.cssPrefix, \"-layers-text\")\n                            ].concat(_toConsumableArray(classes))\n                        }\n                    });\n                });\n            }\n        };\n    },\n    provides: function provides(providers$$1) {\n        providers$$1.generateLayersText = function(node, nodeMeta) {\n            var title = nodeMeta.title, transform = nodeMeta.transform, extra = nodeMeta.extra;\n            var width = null;\n            var height = null;\n            if (IS_IE) {\n                var computedFontSize = parseInt(getComputedStyle(node).fontSize, 10);\n                var boundingClientRect = node.getBoundingClientRect();\n                width = boundingClientRect.width / computedFontSize;\n                height = boundingClientRect.height / computedFontSize;\n            }\n            if (config.autoA11y && !title) {\n                extra.attributes[\"aria-hidden\"] = \"true\";\n            }\n            return Promise.resolve([\n                node,\n                makeLayersTextAbstract({\n                    content: node.innerHTML,\n                    width: width,\n                    height: height,\n                    transform: transform,\n                    title: title,\n                    extra: extra,\n                    watchable: true\n                })\n            ]);\n        };\n    }\n};\nvar CLEAN_CONTENT_PATTERN = new RegExp('\"', \"ug\");\nvar SECONDARY_UNICODE_RANGE = [\n    1105920,\n    1112319\n];\nfunction hexValueFromContent(content) {\n    var cleaned = content.replace(CLEAN_CONTENT_PATTERN, \"\");\n    var codePoint = codePointAt(cleaned, 0);\n    var isPrependTen = codePoint >= SECONDARY_UNICODE_RANGE[0] && codePoint <= SECONDARY_UNICODE_RANGE[1];\n    var isDoubled = cleaned.length === 2 ? cleaned[0] === cleaned[1] : false;\n    return {\n        value: isDoubled ? toHex(cleaned[0]) : toHex(cleaned),\n        isSecondary: isPrependTen || isDoubled\n    };\n}\nfunction replaceForPosition(node, position) {\n    var pendingAttribute = \"\".concat(DATA_FA_PSEUDO_ELEMENT_PENDING).concat(position.replace(\":\", \"-\"));\n    return new Promise(function(resolve, reject) {\n        if (node.getAttribute(pendingAttribute) !== null) {\n            // This node is already being processed\n            return resolve();\n        }\n        var children = toArray(node.children);\n        var alreadyProcessedPseudoElement = children.filter(function(c) {\n            return c.getAttribute(DATA_FA_PSEUDO_ELEMENT) === position;\n        })[0];\n        var styles = WINDOW.getComputedStyle(node, position);\n        var fontFamily = styles.getPropertyValue(\"font-family\").match(FONT_FAMILY_PATTERN);\n        var fontWeight = styles.getPropertyValue(\"font-weight\");\n        var content = styles.getPropertyValue(\"content\");\n        if (alreadyProcessedPseudoElement && !fontFamily) {\n            // If we've already processed it but the current computed style does not result in a font-family,\n            // that probably means that a class name that was previously present to make the icon has been\n            // removed. So we now should delete the icon.\n            node.removeChild(alreadyProcessedPseudoElement);\n            return resolve();\n        } else if (fontFamily && content !== \"none\" && content !== \"\") {\n            var _content = styles.getPropertyValue(\"content\");\n            var family = ~[\n                \"Sharp\"\n            ].indexOf(fontFamily[2]) ? FAMILY_SHARP : FAMILY_CLASSIC;\n            var prefix = ~[\n                \"Solid\",\n                \"Regular\",\n                \"Light\",\n                \"Thin\",\n                \"Duotone\",\n                \"Brands\",\n                \"Kit\"\n            ].indexOf(fontFamily[2]) ? STYLE_TO_PREFIX[family][fontFamily[2].toLowerCase()] : FONT_WEIGHT_TO_PREFIX[family][fontWeight];\n            var _hexValueFromContent = hexValueFromContent(_content), hexValue = _hexValueFromContent.value, isSecondary = _hexValueFromContent.isSecondary;\n            var isV4 = fontFamily[0].startsWith(\"FontAwesome\");\n            var iconName = byUnicode(prefix, hexValue);\n            var iconIdentifier = iconName;\n            if (isV4) {\n                var iconName4 = byOldUnicode(hexValue);\n                if (iconName4.iconName && iconName4.prefix) {\n                    iconName = iconName4.iconName;\n                    prefix = iconName4.prefix;\n                }\n            } // Only convert the pseudo element in this ::before/::after position into an icon if we haven't\n            // already done so with the same prefix and iconName\n            if (iconName && !isSecondary && (!alreadyProcessedPseudoElement || alreadyProcessedPseudoElement.getAttribute(DATA_PREFIX) !== prefix || alreadyProcessedPseudoElement.getAttribute(DATA_ICON) !== iconIdentifier)) {\n                node.setAttribute(pendingAttribute, iconIdentifier);\n                if (alreadyProcessedPseudoElement) {\n                    // Delete the old one, since we're replacing it with a new one\n                    node.removeChild(alreadyProcessedPseudoElement);\n                }\n                var meta = blankMeta();\n                var extra = meta.extra;\n                extra.attributes[DATA_FA_PSEUDO_ELEMENT] = position;\n                findIcon(iconName, prefix).then(function(main) {\n                    var _abstract = makeInlineSvgAbstract(_objectSpread2(_objectSpread2({}, meta), {}, {\n                        icons: {\n                            main: main,\n                            mask: emptyCanonicalIcon()\n                        },\n                        prefix: prefix,\n                        iconName: iconIdentifier,\n                        extra: extra,\n                        watchable: true\n                    }));\n                    var element = DOCUMENT.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n                    if (position === \"::before\") {\n                        node.insertBefore(element, node.firstChild);\n                    } else {\n                        node.appendChild(element);\n                    }\n                    element.outerHTML = _abstract.map(function(a) {\n                        return toHtml(a);\n                    }).join(\"\\n\");\n                    node.removeAttribute(pendingAttribute);\n                    resolve();\n                }).catch(reject);\n            } else {\n                resolve();\n            }\n        } else {\n            resolve();\n        }\n    });\n}\nfunction replace(node) {\n    return Promise.all([\n        replaceForPosition(node, \"::before\"),\n        replaceForPosition(node, \"::after\")\n    ]);\n}\nfunction processable(node) {\n    return node.parentNode !== document.head && !~TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS.indexOf(node.tagName.toUpperCase()) && !node.getAttribute(DATA_FA_PSEUDO_ELEMENT) && (!node.parentNode || node.parentNode.tagName !== \"svg\");\n}\nfunction searchPseudoElements(root) {\n    if (!IS_DOM) return;\n    return new Promise(function(resolve, reject) {\n        var operations = toArray(root.querySelectorAll(\"*\")).filter(processable).map(replace);\n        var end = perf.begin(\"searchPseudoElements\");\n        disableObservation();\n        Promise.all(operations).then(function() {\n            end();\n            enableObservation();\n            resolve();\n        }).catch(function() {\n            end();\n            enableObservation();\n            reject();\n        });\n    });\n}\nvar PseudoElements = {\n    hooks: function hooks() {\n        return {\n            mutationObserverCallbacks: function mutationObserverCallbacks(accumulator) {\n                accumulator.pseudoElementsCallback = searchPseudoElements;\n                return accumulator;\n            }\n        };\n    },\n    provides: function provides(providers$$1) {\n        providers$$1.pseudoElements2svg = function(params) {\n            var _params$node = params.node, node = _params$node === void 0 ? DOCUMENT : _params$node;\n            if (config.searchPseudoElements) {\n                searchPseudoElements(node);\n            }\n        };\n    }\n};\nvar _unwatched = false;\nvar MutationObserver$1 = {\n    mixout: function mixout() {\n        return {\n            dom: {\n                unwatch: function unwatch() {\n                    disableObservation();\n                    _unwatched = true;\n                }\n            }\n        };\n    },\n    hooks: function hooks() {\n        return {\n            bootstrap: function bootstrap() {\n                observe(chainHooks(\"mutationObserverCallbacks\", {}));\n            },\n            noAuto: function noAuto() {\n                disconnect();\n            },\n            watch: function watch(params) {\n                var observeMutationsRoot = params.observeMutationsRoot;\n                if (_unwatched) {\n                    enableObservation();\n                } else {\n                    observe(chainHooks(\"mutationObserverCallbacks\", {\n                        observeMutationsRoot: observeMutationsRoot\n                    }));\n                }\n            }\n        };\n    }\n};\nvar parseTransformString = function parseTransformString(transformString) {\n    var transform = {\n        size: 16,\n        x: 0,\n        y: 0,\n        flipX: false,\n        flipY: false,\n        rotate: 0\n    };\n    return transformString.toLowerCase().split(\" \").reduce(function(acc, n) {\n        var parts = n.toLowerCase().split(\"-\");\n        var first = parts[0];\n        var rest = parts.slice(1).join(\"-\");\n        if (first && rest === \"h\") {\n            acc.flipX = true;\n            return acc;\n        }\n        if (first && rest === \"v\") {\n            acc.flipY = true;\n            return acc;\n        }\n        rest = parseFloat(rest);\n        if (isNaN(rest)) {\n            return acc;\n        }\n        switch(first){\n            case \"grow\":\n                acc.size = acc.size + rest;\n                break;\n            case \"shrink\":\n                acc.size = acc.size - rest;\n                break;\n            case \"left\":\n                acc.x = acc.x - rest;\n                break;\n            case \"right\":\n                acc.x = acc.x + rest;\n                break;\n            case \"up\":\n                acc.y = acc.y - rest;\n                break;\n            case \"down\":\n                acc.y = acc.y + rest;\n                break;\n            case \"rotate\":\n                acc.rotate = acc.rotate + rest;\n                break;\n        }\n        return acc;\n    }, transform);\n};\nvar PowerTransforms = {\n    mixout: function mixout() {\n        return {\n            parse: {\n                transform: function transform(transformString) {\n                    return parseTransformString(transformString);\n                }\n            }\n        };\n    },\n    hooks: function hooks() {\n        return {\n            parseNodeAttributes: function parseNodeAttributes(accumulator, node) {\n                var transformString = node.getAttribute(\"data-fa-transform\");\n                if (transformString) {\n                    accumulator.transform = parseTransformString(transformString);\n                }\n                return accumulator;\n            }\n        };\n    },\n    provides: function provides(providers) {\n        providers.generateAbstractTransformGrouping = function(_ref) {\n            var main = _ref.main, transform = _ref.transform, containerWidth = _ref.containerWidth, iconWidth = _ref.iconWidth;\n            var outer = {\n                transform: \"translate(\".concat(containerWidth / 2, \" 256)\")\n            };\n            var innerTranslate = \"translate(\".concat(transform.x * 32, \", \").concat(transform.y * 32, \") \");\n            var innerScale = \"scale(\".concat(transform.size / 16 * (transform.flipX ? -1 : 1), \", \").concat(transform.size / 16 * (transform.flipY ? -1 : 1), \") \");\n            var innerRotate = \"rotate(\".concat(transform.rotate, \" 0 0)\");\n            var inner = {\n                transform: \"\".concat(innerTranslate, \" \").concat(innerScale, \" \").concat(innerRotate)\n            };\n            var path = {\n                transform: \"translate(\".concat(iconWidth / 2 * -1, \" -256)\")\n            };\n            var operations = {\n                outer: outer,\n                inner: inner,\n                path: path\n            };\n            return {\n                tag: \"g\",\n                attributes: _objectSpread2({}, operations.outer),\n                children: [\n                    {\n                        tag: \"g\",\n                        attributes: _objectSpread2({}, operations.inner),\n                        children: [\n                            {\n                                tag: main.icon.tag,\n                                children: main.icon.children,\n                                attributes: _objectSpread2(_objectSpread2({}, main.icon.attributes), operations.path)\n                            }\n                        ]\n                    }\n                ]\n            };\n        };\n    }\n};\nvar ALL_SPACE = {\n    x: 0,\n    y: 0,\n    width: \"100%\",\n    height: \"100%\"\n};\nfunction fillBlack(_abstract) {\n    var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (_abstract.attributes && (_abstract.attributes.fill || force)) {\n        _abstract.attributes.fill = \"black\";\n    }\n    return _abstract;\n}\nfunction deGroup(_abstract2) {\n    if (_abstract2.tag === \"g\") {\n        return _abstract2.children;\n    } else {\n        return [\n            _abstract2\n        ];\n    }\n}\nvar Masks = {\n    hooks: function hooks() {\n        return {\n            parseNodeAttributes: function parseNodeAttributes(accumulator, node) {\n                var maskData = node.getAttribute(\"data-fa-mask\");\n                var mask = !maskData ? emptyCanonicalIcon() : getCanonicalIcon(maskData.split(\" \").map(function(i) {\n                    return i.trim();\n                }));\n                if (!mask.prefix) {\n                    mask.prefix = getDefaultUsablePrefix();\n                }\n                accumulator.mask = mask;\n                accumulator.maskId = node.getAttribute(\"data-fa-mask-id\");\n                return accumulator;\n            }\n        };\n    },\n    provides: function provides(providers) {\n        providers.generateAbstractMask = function(_ref) {\n            var children = _ref.children, attributes = _ref.attributes, main = _ref.main, mask = _ref.mask, explicitMaskId = _ref.maskId, transform = _ref.transform;\n            var mainWidth = main.width, mainPath = main.icon;\n            var maskWidth = mask.width, maskPath = mask.icon;\n            var trans = transformForSvg({\n                transform: transform,\n                containerWidth: maskWidth,\n                iconWidth: mainWidth\n            });\n            var maskRect = {\n                tag: \"rect\",\n                attributes: _objectSpread2(_objectSpread2({}, ALL_SPACE), {}, {\n                    fill: \"white\"\n                })\n            };\n            var maskInnerGroupChildrenMixin = mainPath.children ? {\n                children: mainPath.children.map(fillBlack)\n            } : {};\n            var maskInnerGroup = {\n                tag: \"g\",\n                attributes: _objectSpread2({}, trans.inner),\n                children: [\n                    fillBlack(_objectSpread2({\n                        tag: mainPath.tag,\n                        attributes: _objectSpread2(_objectSpread2({}, mainPath.attributes), trans.path)\n                    }, maskInnerGroupChildrenMixin))\n                ]\n            };\n            var maskOuterGroup = {\n                tag: \"g\",\n                attributes: _objectSpread2({}, trans.outer),\n                children: [\n                    maskInnerGroup\n                ]\n            };\n            var maskId = \"mask-\".concat(explicitMaskId || nextUniqueId());\n            var clipId = \"clip-\".concat(explicitMaskId || nextUniqueId());\n            var maskTag = {\n                tag: \"mask\",\n                attributes: _objectSpread2(_objectSpread2({}, ALL_SPACE), {}, {\n                    id: maskId,\n                    maskUnits: \"userSpaceOnUse\",\n                    maskContentUnits: \"userSpaceOnUse\"\n                }),\n                children: [\n                    maskRect,\n                    maskOuterGroup\n                ]\n            };\n            var defs = {\n                tag: \"defs\",\n                children: [\n                    {\n                        tag: \"clipPath\",\n                        attributes: {\n                            id: clipId\n                        },\n                        children: deGroup(maskPath)\n                    },\n                    maskTag\n                ]\n            };\n            children.push(defs, {\n                tag: \"rect\",\n                attributes: _objectSpread2({\n                    fill: \"currentColor\",\n                    \"clip-path\": \"url(#\".concat(clipId, \")\"),\n                    mask: \"url(#\".concat(maskId, \")\")\n                }, ALL_SPACE)\n            });\n            return {\n                children: children,\n                attributes: attributes\n            };\n        };\n    }\n};\nvar MissingIconIndicator = {\n    provides: function provides(providers) {\n        var reduceMotion = false;\n        if (WINDOW.matchMedia) {\n            reduceMotion = WINDOW.matchMedia(\"(prefers-reduced-motion: reduce)\").matches;\n        }\n        providers.missingIconAbstract = function() {\n            var gChildren = [];\n            var FILL = {\n                fill: \"currentColor\"\n            };\n            var ANIMATION_BASE = {\n                attributeType: \"XML\",\n                repeatCount: \"indefinite\",\n                dur: \"2s\"\n            }; // Ring\n            gChildren.push({\n                tag: \"path\",\n                attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {\n                    d: \"M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z\"\n                })\n            });\n            var OPACITY_ANIMATE = _objectSpread2(_objectSpread2({}, ANIMATION_BASE), {}, {\n                attributeName: \"opacity\"\n            });\n            var dot = {\n                tag: \"circle\",\n                attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {\n                    cx: \"256\",\n                    cy: \"364\",\n                    r: \"28\"\n                }),\n                children: []\n            };\n            if (!reduceMotion) {\n                dot.children.push({\n                    tag: \"animate\",\n                    attributes: _objectSpread2(_objectSpread2({}, ANIMATION_BASE), {}, {\n                        attributeName: \"r\",\n                        values: \"28;14;28;28;14;28;\"\n                    })\n                }, {\n                    tag: \"animate\",\n                    attributes: _objectSpread2(_objectSpread2({}, OPACITY_ANIMATE), {}, {\n                        values: \"1;0;1;1;0;1;\"\n                    })\n                });\n            }\n            gChildren.push(dot);\n            gChildren.push({\n                tag: \"path\",\n                attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {\n                    opacity: \"1\",\n                    d: \"M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z\"\n                }),\n                children: reduceMotion ? [] : [\n                    {\n                        tag: \"animate\",\n                        attributes: _objectSpread2(_objectSpread2({}, OPACITY_ANIMATE), {}, {\n                            values: \"1;0;0;0;0;1;\"\n                        })\n                    }\n                ]\n            });\n            if (!reduceMotion) {\n                // Exclamation\n                gChildren.push({\n                    tag: \"path\",\n                    attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {\n                        opacity: \"0\",\n                        d: \"M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z\"\n                    }),\n                    children: [\n                        {\n                            tag: \"animate\",\n                            attributes: _objectSpread2(_objectSpread2({}, OPACITY_ANIMATE), {}, {\n                                values: \"0;0;1;1;0;0;\"\n                            })\n                        }\n                    ]\n                });\n            }\n            return {\n                tag: \"g\",\n                attributes: {\n                    \"class\": \"missing\"\n                },\n                children: gChildren\n            };\n        };\n    }\n};\nvar SvgSymbols = {\n    hooks: function hooks() {\n        return {\n            parseNodeAttributes: function parseNodeAttributes(accumulator, node) {\n                var symbolData = node.getAttribute(\"data-fa-symbol\");\n                var symbol = symbolData === null ? false : symbolData === \"\" ? true : symbolData;\n                accumulator[\"symbol\"] = symbol;\n                return accumulator;\n            }\n        };\n    }\n};\nvar plugins = [\n    InjectCSS,\n    ReplaceElements,\n    Layers,\n    LayersCounter,\n    LayersText,\n    PseudoElements,\n    MutationObserver$1,\n    PowerTransforms,\n    Masks,\n    MissingIconIndicator,\n    SvgSymbols\n];\nregisterPlugins(plugins, {\n    mixoutsTo: api\n});\nvar noAuto$1 = api.noAuto;\nvar config$1 = api.config;\nvar library$1 = api.library;\nvar dom$1 = api.dom;\nvar parse$1 = api.parse;\nvar findIconDefinition$1 = api.findIconDefinition;\nvar toHtml$1 = api.toHtml;\nvar icon = api.icon;\nvar layer = api.layer;\nvar text = api.text;\nvar counter = api.counter;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@fortawesome+fontawesome-svg-core@6.5.1/node_modules/@fortawesome/fontawesome-svg-core/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@fortawesome+fontawesome-svg-core@6.5.1/node_modules/@fortawesome/fontawesome-svg-core/index.mjs":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@fortawesome+fontawesome-svg-core@6.5.1/node_modules/@fortawesome/fontawesome-svg-core/index.mjs ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   api: () => (/* binding */ api),\n/* harmony export */   config: () => (/* binding */ config$1),\n/* harmony export */   counter: () => (/* binding */ counter),\n/* harmony export */   dom: () => (/* binding */ dom$1),\n/* harmony export */   findIconDefinition: () => (/* binding */ findIconDefinition$1),\n/* harmony export */   icon: () => (/* binding */ icon),\n/* harmony export */   layer: () => (/* binding */ layer),\n/* harmony export */   library: () => (/* binding */ library$1),\n/* harmony export */   noAuto: () => (/* binding */ noAuto$1),\n/* harmony export */   parse: () => (/* binding */ parse$1),\n/* harmony export */   text: () => (/* binding */ text),\n/* harmony export */   toHtml: () => (/* binding */ toHtml$1)\n/* harmony export */ });\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction _wrapRegExp() {\n    _wrapRegExp = function(re, groups) {\n        return new BabelRegExp(re, void 0, groups);\n    };\n    var _super = RegExp.prototype, _groups = new WeakMap();\n    function BabelRegExp(re, flags, groups) {\n        var _this = new RegExp(re, flags);\n        return _groups.set(_this, groups || _groups.get(re)), _setPrototypeOf(_this, BabelRegExp.prototype);\n    }\n    function buildGroups(result, re) {\n        var g = _groups.get(re);\n        return Object.keys(g).reduce(function(groups, name) {\n            return groups[name] = result[g[name]], groups;\n        }, Object.create(null));\n    }\n    return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function(str) {\n        var result = _super.exec.call(this, str);\n        return result && (result.groups = buildGroups(result, this)), result;\n    }, BabelRegExp.prototype[Symbol.replace] = function(str, substitution) {\n        if (\"string\" == typeof substitution) {\n            var groups = _groups.get(this);\n            return _super[Symbol.replace].call(this, str, substitution.replace(/\\$<([^>]+)>/g, function(_, name) {\n                return \"$\" + groups[name];\n            }));\n        }\n        if (\"function\" == typeof substitution) {\n            var _this = this;\n            return _super[Symbol.replace].call(this, str, function() {\n                var args = arguments;\n                return \"object\" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args);\n            });\n        }\n        return _super[Symbol.replace].call(this, str, substitution);\n    }, _wrapRegExp.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n        writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nvar noop = function noop() {};\nvar _WINDOW = {};\nvar _DOCUMENT = {};\nvar _MUTATION_OBSERVER = null;\nvar _PERFORMANCE = {\n    mark: noop,\n    measure: noop\n};\ntry {\n    if (false) {}\n    if (typeof document !== \"undefined\") _DOCUMENT = document;\n    if (typeof MutationObserver !== \"undefined\") _MUTATION_OBSERVER = MutationObserver;\n    if (typeof performance !== \"undefined\") _PERFORMANCE = performance;\n} catch (e) {}\nvar _ref = _WINDOW.navigator || {}, _ref$userAgent = _ref.userAgent, userAgent = _ref$userAgent === void 0 ? \"\" : _ref$userAgent;\nvar WINDOW = _WINDOW;\nvar DOCUMENT = _DOCUMENT;\nvar MUTATION_OBSERVER = _MUTATION_OBSERVER;\nvar PERFORMANCE = _PERFORMANCE;\nvar IS_BROWSER = !!WINDOW.document;\nvar IS_DOM = !!DOCUMENT.documentElement && !!DOCUMENT.head && typeof DOCUMENT.addEventListener === \"function\" && typeof DOCUMENT.createElement === \"function\";\nvar IS_IE = ~userAgent.indexOf(\"MSIE\") || ~userAgent.indexOf(\"Trident/\");\nvar _familyProxy, _familyProxy2, _familyProxy3, _familyProxy4, _familyProxy5;\nvar NAMESPACE_IDENTIFIER = \"___FONT_AWESOME___\";\nvar UNITS_IN_GRID = 16;\nvar DEFAULT_CSS_PREFIX = \"fa\";\nvar DEFAULT_REPLACEMENT_CLASS = \"svg-inline--fa\";\nvar DATA_FA_I2SVG = \"data-fa-i2svg\";\nvar DATA_FA_PSEUDO_ELEMENT = \"data-fa-pseudo-element\";\nvar DATA_FA_PSEUDO_ELEMENT_PENDING = \"data-fa-pseudo-element-pending\";\nvar DATA_PREFIX = \"data-prefix\";\nvar DATA_ICON = \"data-icon\";\nvar HTML_CLASS_I2SVG_BASE_CLASS = \"fontawesome-i2svg\";\nvar MUTATION_APPROACH_ASYNC = \"async\";\nvar TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS = [\n    \"HTML\",\n    \"HEAD\",\n    \"STYLE\",\n    \"SCRIPT\"\n];\nvar PRODUCTION = function() {\n    try {\n        return \"development\" === \"production\";\n    } catch (e) {\n        return false;\n    }\n}();\nvar FAMILY_CLASSIC = \"classic\";\nvar FAMILY_SHARP = \"sharp\";\nvar FAMILIES = [\n    FAMILY_CLASSIC,\n    FAMILY_SHARP\n];\nfunction familyProxy(obj) {\n    // Defaults to the classic family if family is not available\n    return new Proxy(obj, {\n        get: function get(target, prop) {\n            return prop in target ? target[prop] : target[FAMILY_CLASSIC];\n        }\n    });\n}\nvar PREFIX_TO_STYLE = familyProxy((_familyProxy = {}, _defineProperty(_familyProxy, FAMILY_CLASSIC, {\n    \"fa\": \"solid\",\n    \"fas\": \"solid\",\n    \"fa-solid\": \"solid\",\n    \"far\": \"regular\",\n    \"fa-regular\": \"regular\",\n    \"fal\": \"light\",\n    \"fa-light\": \"light\",\n    \"fat\": \"thin\",\n    \"fa-thin\": \"thin\",\n    \"fad\": \"duotone\",\n    \"fa-duotone\": \"duotone\",\n    \"fab\": \"brands\",\n    \"fa-brands\": \"brands\",\n    \"fak\": \"kit\",\n    \"fakd\": \"kit\",\n    \"fa-kit\": \"kit\",\n    \"fa-kit-duotone\": \"kit\"\n}), _defineProperty(_familyProxy, FAMILY_SHARP, {\n    \"fa\": \"solid\",\n    \"fass\": \"solid\",\n    \"fa-solid\": \"solid\",\n    \"fasr\": \"regular\",\n    \"fa-regular\": \"regular\",\n    \"fasl\": \"light\",\n    \"fa-light\": \"light\",\n    \"fast\": \"thin\",\n    \"fa-thin\": \"thin\"\n}), _familyProxy));\nvar STYLE_TO_PREFIX = familyProxy((_familyProxy2 = {}, _defineProperty(_familyProxy2, FAMILY_CLASSIC, {\n    solid: \"fas\",\n    regular: \"far\",\n    light: \"fal\",\n    thin: \"fat\",\n    duotone: \"fad\",\n    brands: \"fab\",\n    kit: \"fak\"\n}), _defineProperty(_familyProxy2, FAMILY_SHARP, {\n    solid: \"fass\",\n    regular: \"fasr\",\n    light: \"fasl\",\n    thin: \"fast\"\n}), _familyProxy2));\nvar PREFIX_TO_LONG_STYLE = familyProxy((_familyProxy3 = {}, _defineProperty(_familyProxy3, FAMILY_CLASSIC, {\n    fab: \"fa-brands\",\n    fad: \"fa-duotone\",\n    fak: \"fa-kit\",\n    fal: \"fa-light\",\n    far: \"fa-regular\",\n    fas: \"fa-solid\",\n    fat: \"fa-thin\"\n}), _defineProperty(_familyProxy3, FAMILY_SHARP, {\n    fass: \"fa-solid\",\n    fasr: \"fa-regular\",\n    fasl: \"fa-light\",\n    fast: \"fa-thin\"\n}), _familyProxy3));\nvar LONG_STYLE_TO_PREFIX = familyProxy((_familyProxy4 = {}, _defineProperty(_familyProxy4, FAMILY_CLASSIC, {\n    \"fa-brands\": \"fab\",\n    \"fa-duotone\": \"fad\",\n    \"fa-kit\": \"fak\",\n    \"fa-light\": \"fal\",\n    \"fa-regular\": \"far\",\n    \"fa-solid\": \"fas\",\n    \"fa-thin\": \"fat\"\n}), _defineProperty(_familyProxy4, FAMILY_SHARP, {\n    \"fa-solid\": \"fass\",\n    \"fa-regular\": \"fasr\",\n    \"fa-light\": \"fasl\",\n    \"fa-thin\": \"fast\"\n}), _familyProxy4));\nvar ICON_SELECTION_SYNTAX_PATTERN = /fa(s|r|l|t|d|b|k|ss|sr|sl|st)?[\\-\\ ]/; // eslint-disable-line no-useless-escape\nvar LAYERS_TEXT_CLASSNAME = \"fa-layers-text\";\nvar FONT_FAMILY_PATTERN = /Font ?Awesome ?([56 ]*)(Solid|Regular|Light|Thin|Duotone|Brands|Free|Pro|Sharp|Kit)?.*/i;\nvar FONT_WEIGHT_TO_PREFIX = familyProxy((_familyProxy5 = {}, _defineProperty(_familyProxy5, FAMILY_CLASSIC, {\n    900: \"fas\",\n    400: \"far\",\n    normal: \"far\",\n    300: \"fal\",\n    100: \"fat\"\n}), _defineProperty(_familyProxy5, FAMILY_SHARP, {\n    900: \"fass\",\n    400: \"fasr\",\n    300: \"fasl\",\n    100: \"fast\"\n}), _familyProxy5));\nvar oneToTen = [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10\n];\nvar oneToTwenty = oneToTen.concat([\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20\n]);\nvar ATTRIBUTES_WATCHED_FOR_MUTATION = [\n    \"class\",\n    \"data-prefix\",\n    \"data-icon\",\n    \"data-fa-transform\",\n    \"data-fa-mask\"\n];\nvar DUOTONE_CLASSES = {\n    GROUP: \"duotone-group\",\n    SWAP_OPACITY: \"swap-opacity\",\n    PRIMARY: \"primary\",\n    SECONDARY: \"secondary\"\n};\nvar prefixes = new Set();\nObject.keys(STYLE_TO_PREFIX[FAMILY_CLASSIC]).map(prefixes.add.bind(prefixes));\nObject.keys(STYLE_TO_PREFIX[FAMILY_SHARP]).map(prefixes.add.bind(prefixes));\nvar RESERVED_CLASSES = [].concat(FAMILIES, _toConsumableArray(prefixes), [\n    \"2xs\",\n    \"xs\",\n    \"sm\",\n    \"lg\",\n    \"xl\",\n    \"2xl\",\n    \"beat\",\n    \"border\",\n    \"fade\",\n    \"beat-fade\",\n    \"bounce\",\n    \"flip-both\",\n    \"flip-horizontal\",\n    \"flip-vertical\",\n    \"flip\",\n    \"fw\",\n    \"inverse\",\n    \"layers-counter\",\n    \"layers-text\",\n    \"layers\",\n    \"li\",\n    \"pull-left\",\n    \"pull-right\",\n    \"pulse\",\n    \"rotate-180\",\n    \"rotate-270\",\n    \"rotate-90\",\n    \"rotate-by\",\n    \"shake\",\n    \"spin-pulse\",\n    \"spin-reverse\",\n    \"spin\",\n    \"stack-1x\",\n    \"stack-2x\",\n    \"stack\",\n    \"ul\",\n    DUOTONE_CLASSES.GROUP,\n    DUOTONE_CLASSES.SWAP_OPACITY,\n    DUOTONE_CLASSES.PRIMARY,\n    DUOTONE_CLASSES.SECONDARY\n]).concat(oneToTen.map(function(n) {\n    return \"\".concat(n, \"x\");\n})).concat(oneToTwenty.map(function(n) {\n    return \"w-\".concat(n);\n}));\nvar initial = WINDOW.FontAwesomeConfig || {};\nfunction getAttrConfig(attr) {\n    var element = DOCUMENT.querySelector(\"script[\" + attr + \"]\");\n    if (element) {\n        return element.getAttribute(attr);\n    }\n}\nfunction coerce(val) {\n    // Getting an empty string will occur if the attribute is set on the HTML tag but without a value\n    // We'll assume that this is an indication that it should be toggled to true\n    if (val === \"\") return true;\n    if (val === \"false\") return false;\n    if (val === \"true\") return true;\n    return val;\n}\nif (DOCUMENT && typeof DOCUMENT.querySelector === \"function\") {\n    var attrs = [\n        [\n            \"data-family-prefix\",\n            \"familyPrefix\"\n        ],\n        [\n            \"data-css-prefix\",\n            \"cssPrefix\"\n        ],\n        [\n            \"data-family-default\",\n            \"familyDefault\"\n        ],\n        [\n            \"data-style-default\",\n            \"styleDefault\"\n        ],\n        [\n            \"data-replacement-class\",\n            \"replacementClass\"\n        ],\n        [\n            \"data-auto-replace-svg\",\n            \"autoReplaceSvg\"\n        ],\n        [\n            \"data-auto-add-css\",\n            \"autoAddCss\"\n        ],\n        [\n            \"data-auto-a11y\",\n            \"autoA11y\"\n        ],\n        [\n            \"data-search-pseudo-elements\",\n            \"searchPseudoElements\"\n        ],\n        [\n            \"data-observe-mutations\",\n            \"observeMutations\"\n        ],\n        [\n            \"data-mutate-approach\",\n            \"mutateApproach\"\n        ],\n        [\n            \"data-keep-original-source\",\n            \"keepOriginalSource\"\n        ],\n        [\n            \"data-measure-performance\",\n            \"measurePerformance\"\n        ],\n        [\n            \"data-show-missing-icons\",\n            \"showMissingIcons\"\n        ]\n    ];\n    attrs.forEach(function(_ref) {\n        var _ref2 = _slicedToArray(_ref, 2), attr = _ref2[0], key = _ref2[1];\n        var val = coerce(getAttrConfig(attr));\n        if (val !== undefined && val !== null) {\n            initial[key] = val;\n        }\n    });\n}\nvar _default = {\n    styleDefault: \"solid\",\n    familyDefault: \"classic\",\n    cssPrefix: DEFAULT_CSS_PREFIX,\n    replacementClass: DEFAULT_REPLACEMENT_CLASS,\n    autoReplaceSvg: true,\n    autoAddCss: true,\n    autoA11y: true,\n    searchPseudoElements: false,\n    observeMutations: true,\n    mutateApproach: \"async\",\n    keepOriginalSource: true,\n    measurePerformance: false,\n    showMissingIcons: true\n}; // familyPrefix is deprecated but we must still support it if present\nif (initial.familyPrefix) {\n    initial.cssPrefix = initial.familyPrefix;\n}\nvar _config = _objectSpread2(_objectSpread2({}, _default), initial);\nif (!_config.autoReplaceSvg) _config.observeMutations = false;\nvar config = {};\nObject.keys(_default).forEach(function(key) {\n    Object.defineProperty(config, key, {\n        enumerable: true,\n        set: function set(val) {\n            _config[key] = val;\n            _onChangeCb.forEach(function(cb) {\n                return cb(config);\n            });\n        },\n        get: function get() {\n            return _config[key];\n        }\n    });\n}); // familyPrefix is deprecated as of 6.2.0 and should be removed in 7.0.0\nObject.defineProperty(config, \"familyPrefix\", {\n    enumerable: true,\n    set: function set(val) {\n        _config.cssPrefix = val;\n        _onChangeCb.forEach(function(cb) {\n            return cb(config);\n        });\n    },\n    get: function get() {\n        return _config.cssPrefix;\n    }\n});\nWINDOW.FontAwesomeConfig = config;\nvar _onChangeCb = [];\nfunction onChange(cb) {\n    _onChangeCb.push(cb);\n    return function() {\n        _onChangeCb.splice(_onChangeCb.indexOf(cb), 1);\n    };\n}\nvar d = UNITS_IN_GRID;\nvar meaninglessTransform = {\n    size: 16,\n    x: 0,\n    y: 0,\n    rotate: 0,\n    flipX: false,\n    flipY: false\n};\nfunction insertCss(css) {\n    if (!css || !IS_DOM) {\n        return;\n    }\n    var style = DOCUMENT.createElement(\"style\");\n    style.setAttribute(\"type\", \"text/css\");\n    style.innerHTML = css;\n    var headChildren = DOCUMENT.head.childNodes;\n    var beforeChild = null;\n    for(var i = headChildren.length - 1; i > -1; i--){\n        var child = headChildren[i];\n        var tagName = (child.tagName || \"\").toUpperCase();\n        if ([\n            \"STYLE\",\n            \"LINK\"\n        ].indexOf(tagName) > -1) {\n            beforeChild = child;\n        }\n    }\n    DOCUMENT.head.insertBefore(style, beforeChild);\n    return css;\n}\nvar idPool = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nfunction nextUniqueId() {\n    var size = 12;\n    var id = \"\";\n    while(size-- > 0){\n        id += idPool[Math.random() * 62 | 0];\n    }\n    return id;\n}\nfunction toArray(obj) {\n    var array = [];\n    for(var i = (obj || []).length >>> 0; i--;){\n        array[i] = obj[i];\n    }\n    return array;\n}\nfunction classArray(node) {\n    if (node.classList) {\n        return toArray(node.classList);\n    } else {\n        return (node.getAttribute(\"class\") || \"\").split(\" \").filter(function(i) {\n            return i;\n        });\n    }\n}\nfunction htmlEscape(str) {\n    return \"\".concat(str).replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\nfunction joinAttributes(attributes) {\n    return Object.keys(attributes || {}).reduce(function(acc, attributeName) {\n        return acc + \"\".concat(attributeName, '=\"').concat(htmlEscape(attributes[attributeName]), '\" ');\n    }, \"\").trim();\n}\nfunction joinStyles(styles) {\n    return Object.keys(styles || {}).reduce(function(acc, styleName) {\n        return acc + \"\".concat(styleName, \": \").concat(styles[styleName].trim(), \";\");\n    }, \"\");\n}\nfunction transformIsMeaningful(transform) {\n    return transform.size !== meaninglessTransform.size || transform.x !== meaninglessTransform.x || transform.y !== meaninglessTransform.y || transform.rotate !== meaninglessTransform.rotate || transform.flipX || transform.flipY;\n}\nfunction transformForSvg(_ref) {\n    var transform = _ref.transform, containerWidth = _ref.containerWidth, iconWidth = _ref.iconWidth;\n    var outer = {\n        transform: \"translate(\".concat(containerWidth / 2, \" 256)\")\n    };\n    var innerTranslate = \"translate(\".concat(transform.x * 32, \", \").concat(transform.y * 32, \") \");\n    var innerScale = \"scale(\".concat(transform.size / 16 * (transform.flipX ? -1 : 1), \", \").concat(transform.size / 16 * (transform.flipY ? -1 : 1), \") \");\n    var innerRotate = \"rotate(\".concat(transform.rotate, \" 0 0)\");\n    var inner = {\n        transform: \"\".concat(innerTranslate, \" \").concat(innerScale, \" \").concat(innerRotate)\n    };\n    var path = {\n        transform: \"translate(\".concat(iconWidth / 2 * -1, \" -256)\")\n    };\n    return {\n        outer: outer,\n        inner: inner,\n        path: path\n    };\n}\nfunction transformForCss(_ref2) {\n    var transform = _ref2.transform, _ref2$width = _ref2.width, width = _ref2$width === void 0 ? UNITS_IN_GRID : _ref2$width, _ref2$height = _ref2.height, height = _ref2$height === void 0 ? UNITS_IN_GRID : _ref2$height, _ref2$startCentered = _ref2.startCentered, startCentered = _ref2$startCentered === void 0 ? false : _ref2$startCentered;\n    var val = \"\";\n    if (startCentered && IS_IE) {\n        val += \"translate(\".concat(transform.x / d - width / 2, \"em, \").concat(transform.y / d - height / 2, \"em) \");\n    } else if (startCentered) {\n        val += \"translate(calc(-50% + \".concat(transform.x / d, \"em), calc(-50% + \").concat(transform.y / d, \"em)) \");\n    } else {\n        val += \"translate(\".concat(transform.x / d, \"em, \").concat(transform.y / d, \"em) \");\n    }\n    val += \"scale(\".concat(transform.size / d * (transform.flipX ? -1 : 1), \", \").concat(transform.size / d * (transform.flipY ? -1 : 1), \") \");\n    val += \"rotate(\".concat(transform.rotate, \"deg) \");\n    return val;\n}\nvar baseStyles = ':root, :host {\\n  --fa-font-solid: normal 900 1em/1 \"Font Awesome 6 Solid\";\\n  --fa-font-regular: normal 400 1em/1 \"Font Awesome 6 Regular\";\\n  --fa-font-light: normal 300 1em/1 \"Font Awesome 6 Light\";\\n  --fa-font-thin: normal 100 1em/1 \"Font Awesome 6 Thin\";\\n  --fa-font-duotone: normal 900 1em/1 \"Font Awesome 6 Duotone\";\\n  --fa-font-sharp-solid: normal 900 1em/1 \"Font Awesome 6 Sharp\";\\n  --fa-font-sharp-regular: normal 400 1em/1 \"Font Awesome 6 Sharp\";\\n  --fa-font-sharp-light: normal 300 1em/1 \"Font Awesome 6 Sharp\";\\n  --fa-font-sharp-thin: normal 100 1em/1 \"Font Awesome 6 Sharp\";\\n  --fa-font-brands: normal 400 1em/1 \"Font Awesome 6 Brands\";\\n}\\n\\nsvg:not(:root).svg-inline--fa, svg:not(:host).svg-inline--fa {\\n  overflow: visible;\\n  box-sizing: content-box;\\n}\\n\\n.svg-inline--fa {\\n  display: var(--fa-display, inline-block);\\n  height: 1em;\\n  overflow: visible;\\n  vertical-align: -0.125em;\\n}\\n.svg-inline--fa.fa-2xs {\\n  vertical-align: 0.1em;\\n}\\n.svg-inline--fa.fa-xs {\\n  vertical-align: 0em;\\n}\\n.svg-inline--fa.fa-sm {\\n  vertical-align: -0.0714285705em;\\n}\\n.svg-inline--fa.fa-lg {\\n  vertical-align: -0.2em;\\n}\\n.svg-inline--fa.fa-xl {\\n  vertical-align: -0.25em;\\n}\\n.svg-inline--fa.fa-2xl {\\n  vertical-align: -0.3125em;\\n}\\n.svg-inline--fa.fa-pull-left {\\n  margin-right: var(--fa-pull-margin, 0.3em);\\n  width: auto;\\n}\\n.svg-inline--fa.fa-pull-right {\\n  margin-left: var(--fa-pull-margin, 0.3em);\\n  width: auto;\\n}\\n.svg-inline--fa.fa-li {\\n  width: var(--fa-li-width, 2em);\\n  top: 0.25em;\\n}\\n.svg-inline--fa.fa-fw {\\n  width: var(--fa-fw-width, 1.25em);\\n}\\n\\n.fa-layers svg.svg-inline--fa {\\n  bottom: 0;\\n  left: 0;\\n  margin: auto;\\n  position: absolute;\\n  right: 0;\\n  top: 0;\\n}\\n\\n.fa-layers-counter, .fa-layers-text {\\n  display: inline-block;\\n  position: absolute;\\n  text-align: center;\\n}\\n\\n.fa-layers {\\n  display: inline-block;\\n  height: 1em;\\n  position: relative;\\n  text-align: center;\\n  vertical-align: -0.125em;\\n  width: 1em;\\n}\\n.fa-layers svg.svg-inline--fa {\\n  -webkit-transform-origin: center center;\\n          transform-origin: center center;\\n}\\n\\n.fa-layers-text {\\n  left: 50%;\\n  top: 50%;\\n  -webkit-transform: translate(-50%, -50%);\\n          transform: translate(-50%, -50%);\\n  -webkit-transform-origin: center center;\\n          transform-origin: center center;\\n}\\n\\n.fa-layers-counter {\\n  background-color: var(--fa-counter-background-color, #ff253a);\\n  border-radius: var(--fa-counter-border-radius, 1em);\\n  box-sizing: border-box;\\n  color: var(--fa-inverse, #fff);\\n  line-height: var(--fa-counter-line-height, 1);\\n  max-width: var(--fa-counter-max-width, 5em);\\n  min-width: var(--fa-counter-min-width, 1.5em);\\n  overflow: hidden;\\n  padding: var(--fa-counter-padding, 0.25em 0.5em);\\n  right: var(--fa-right, 0);\\n  text-overflow: ellipsis;\\n  top: var(--fa-top, 0);\\n  -webkit-transform: scale(var(--fa-counter-scale, 0.25));\\n          transform: scale(var(--fa-counter-scale, 0.25));\\n  -webkit-transform-origin: top right;\\n          transform-origin: top right;\\n}\\n\\n.fa-layers-bottom-right {\\n  bottom: var(--fa-bottom, 0);\\n  right: var(--fa-right, 0);\\n  top: auto;\\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\\n          transform: scale(var(--fa-layers-scale, 0.25));\\n  -webkit-transform-origin: bottom right;\\n          transform-origin: bottom right;\\n}\\n\\n.fa-layers-bottom-left {\\n  bottom: var(--fa-bottom, 0);\\n  left: var(--fa-left, 0);\\n  right: auto;\\n  top: auto;\\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\\n          transform: scale(var(--fa-layers-scale, 0.25));\\n  -webkit-transform-origin: bottom left;\\n          transform-origin: bottom left;\\n}\\n\\n.fa-layers-top-right {\\n  top: var(--fa-top, 0);\\n  right: var(--fa-right, 0);\\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\\n          transform: scale(var(--fa-layers-scale, 0.25));\\n  -webkit-transform-origin: top right;\\n          transform-origin: top right;\\n}\\n\\n.fa-layers-top-left {\\n  left: var(--fa-left, 0);\\n  right: auto;\\n  top: var(--fa-top, 0);\\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\\n          transform: scale(var(--fa-layers-scale, 0.25));\\n  -webkit-transform-origin: top left;\\n          transform-origin: top left;\\n}\\n\\n.fa-1x {\\n  font-size: 1em;\\n}\\n\\n.fa-2x {\\n  font-size: 2em;\\n}\\n\\n.fa-3x {\\n  font-size: 3em;\\n}\\n\\n.fa-4x {\\n  font-size: 4em;\\n}\\n\\n.fa-5x {\\n  font-size: 5em;\\n}\\n\\n.fa-6x {\\n  font-size: 6em;\\n}\\n\\n.fa-7x {\\n  font-size: 7em;\\n}\\n\\n.fa-8x {\\n  font-size: 8em;\\n}\\n\\n.fa-9x {\\n  font-size: 9em;\\n}\\n\\n.fa-10x {\\n  font-size: 10em;\\n}\\n\\n.fa-2xs {\\n  font-size: 0.625em;\\n  line-height: 0.1em;\\n  vertical-align: 0.225em;\\n}\\n\\n.fa-xs {\\n  font-size: 0.75em;\\n  line-height: 0.0833333337em;\\n  vertical-align: 0.125em;\\n}\\n\\n.fa-sm {\\n  font-size: 0.875em;\\n  line-height: 0.0714285718em;\\n  vertical-align: 0.0535714295em;\\n}\\n\\n.fa-lg {\\n  font-size: 1.25em;\\n  line-height: 0.05em;\\n  vertical-align: -0.075em;\\n}\\n\\n.fa-xl {\\n  font-size: 1.5em;\\n  line-height: 0.0416666682em;\\n  vertical-align: -0.125em;\\n}\\n\\n.fa-2xl {\\n  font-size: 2em;\\n  line-height: 0.03125em;\\n  vertical-align: -0.1875em;\\n}\\n\\n.fa-fw {\\n  text-align: center;\\n  width: 1.25em;\\n}\\n\\n.fa-ul {\\n  list-style-type: none;\\n  margin-left: var(--fa-li-margin, 2.5em);\\n  padding-left: 0;\\n}\\n.fa-ul > li {\\n  position: relative;\\n}\\n\\n.fa-li {\\n  left: calc(var(--fa-li-width, 2em) * -1);\\n  position: absolute;\\n  text-align: center;\\n  width: var(--fa-li-width, 2em);\\n  line-height: inherit;\\n}\\n\\n.fa-border {\\n  border-color: var(--fa-border-color, #eee);\\n  border-radius: var(--fa-border-radius, 0.1em);\\n  border-style: var(--fa-border-style, solid);\\n  border-width: var(--fa-border-width, 0.08em);\\n  padding: var(--fa-border-padding, 0.2em 0.25em 0.15em);\\n}\\n\\n.fa-pull-left {\\n  float: left;\\n  margin-right: var(--fa-pull-margin, 0.3em);\\n}\\n\\n.fa-pull-right {\\n  float: right;\\n  margin-left: var(--fa-pull-margin, 0.3em);\\n}\\n\\n.fa-beat {\\n  -webkit-animation-name: fa-beat;\\n          animation-name: fa-beat;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\\n}\\n\\n.fa-bounce {\\n  -webkit-animation-name: fa-bounce;\\n          animation-name: fa-bounce;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\\n}\\n\\n.fa-fade {\\n  -webkit-animation-name: fa-fade;\\n          animation-name: fa-fade;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\\n}\\n\\n.fa-beat-fade {\\n  -webkit-animation-name: fa-beat-fade;\\n          animation-name: fa-beat-fade;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\\n}\\n\\n.fa-flip {\\n  -webkit-animation-name: fa-flip;\\n          animation-name: fa-flip;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\\n}\\n\\n.fa-shake {\\n  -webkit-animation-name: fa-shake;\\n          animation-name: fa-shake;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\\n          animation-timing-function: var(--fa-animation-timing, linear);\\n}\\n\\n.fa-spin {\\n  -webkit-animation-name: fa-spin;\\n          animation-name: fa-spin;\\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\\n          animation-delay: var(--fa-animation-delay, 0s);\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 2s);\\n          animation-duration: var(--fa-animation-duration, 2s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\\n          animation-timing-function: var(--fa-animation-timing, linear);\\n}\\n\\n.fa-spin-reverse {\\n  --fa-animation-direction: reverse;\\n}\\n\\n.fa-pulse,\\n.fa-spin-pulse {\\n  -webkit-animation-name: fa-spin;\\n          animation-name: fa-spin;\\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\\n          animation-direction: var(--fa-animation-direction, normal);\\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\\n          animation-duration: var(--fa-animation-duration, 1s);\\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\\n  -webkit-animation-timing-function: var(--fa-animation-timing, steps(8));\\n          animation-timing-function: var(--fa-animation-timing, steps(8));\\n}\\n\\n@media (prefers-reduced-motion: reduce) {\\n  .fa-beat,\\n.fa-bounce,\\n.fa-fade,\\n.fa-beat-fade,\\n.fa-flip,\\n.fa-pulse,\\n.fa-shake,\\n.fa-spin,\\n.fa-spin-pulse {\\n    -webkit-animation-delay: -1ms;\\n            animation-delay: -1ms;\\n    -webkit-animation-duration: 1ms;\\n            animation-duration: 1ms;\\n    -webkit-animation-iteration-count: 1;\\n            animation-iteration-count: 1;\\n    -webkit-transition-delay: 0s;\\n            transition-delay: 0s;\\n    -webkit-transition-duration: 0s;\\n            transition-duration: 0s;\\n  }\\n}\\n@-webkit-keyframes fa-beat {\\n  0%, 90% {\\n    -webkit-transform: scale(1);\\n            transform: scale(1);\\n  }\\n  45% {\\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\\n            transform: scale(var(--fa-beat-scale, 1.25));\\n  }\\n}\\n@keyframes fa-beat {\\n  0%, 90% {\\n    -webkit-transform: scale(1);\\n            transform: scale(1);\\n  }\\n  45% {\\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\\n            transform: scale(var(--fa-beat-scale, 1.25));\\n  }\\n}\\n@-webkit-keyframes fa-bounce {\\n  0% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n  10% {\\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\\n  }\\n  30% {\\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\\n  }\\n  50% {\\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\\n  }\\n  57% {\\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\\n  }\\n  64% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n  100% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n}\\n@keyframes fa-bounce {\\n  0% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n  10% {\\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\\n  }\\n  30% {\\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\\n  }\\n  50% {\\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\\n  }\\n  57% {\\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\\n  }\\n  64% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n  100% {\\n    -webkit-transform: scale(1, 1) translateY(0);\\n            transform: scale(1, 1) translateY(0);\\n  }\\n}\\n@-webkit-keyframes fa-fade {\\n  50% {\\n    opacity: var(--fa-fade-opacity, 0.4);\\n  }\\n}\\n@keyframes fa-fade {\\n  50% {\\n    opacity: var(--fa-fade-opacity, 0.4);\\n  }\\n}\\n@-webkit-keyframes fa-beat-fade {\\n  0%, 100% {\\n    opacity: var(--fa-beat-fade-opacity, 0.4);\\n    -webkit-transform: scale(1);\\n            transform: scale(1);\\n  }\\n  50% {\\n    opacity: 1;\\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\\n  }\\n}\\n@keyframes fa-beat-fade {\\n  0%, 100% {\\n    opacity: var(--fa-beat-fade-opacity, 0.4);\\n    -webkit-transform: scale(1);\\n            transform: scale(1);\\n  }\\n  50% {\\n    opacity: 1;\\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\\n  }\\n}\\n@-webkit-keyframes fa-flip {\\n  50% {\\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\\n  }\\n}\\n@keyframes fa-flip {\\n  50% {\\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\\n  }\\n}\\n@-webkit-keyframes fa-shake {\\n  0% {\\n    -webkit-transform: rotate(-15deg);\\n            transform: rotate(-15deg);\\n  }\\n  4% {\\n    -webkit-transform: rotate(15deg);\\n            transform: rotate(15deg);\\n  }\\n  8%, 24% {\\n    -webkit-transform: rotate(-18deg);\\n            transform: rotate(-18deg);\\n  }\\n  12%, 28% {\\n    -webkit-transform: rotate(18deg);\\n            transform: rotate(18deg);\\n  }\\n  16% {\\n    -webkit-transform: rotate(-22deg);\\n            transform: rotate(-22deg);\\n  }\\n  20% {\\n    -webkit-transform: rotate(22deg);\\n            transform: rotate(22deg);\\n  }\\n  32% {\\n    -webkit-transform: rotate(-12deg);\\n            transform: rotate(-12deg);\\n  }\\n  36% {\\n    -webkit-transform: rotate(12deg);\\n            transform: rotate(12deg);\\n  }\\n  40%, 100% {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n  }\\n}\\n@keyframes fa-shake {\\n  0% {\\n    -webkit-transform: rotate(-15deg);\\n            transform: rotate(-15deg);\\n  }\\n  4% {\\n    -webkit-transform: rotate(15deg);\\n            transform: rotate(15deg);\\n  }\\n  8%, 24% {\\n    -webkit-transform: rotate(-18deg);\\n            transform: rotate(-18deg);\\n  }\\n  12%, 28% {\\n    -webkit-transform: rotate(18deg);\\n            transform: rotate(18deg);\\n  }\\n  16% {\\n    -webkit-transform: rotate(-22deg);\\n            transform: rotate(-22deg);\\n  }\\n  20% {\\n    -webkit-transform: rotate(22deg);\\n            transform: rotate(22deg);\\n  }\\n  32% {\\n    -webkit-transform: rotate(-12deg);\\n            transform: rotate(-12deg);\\n  }\\n  36% {\\n    -webkit-transform: rotate(12deg);\\n            transform: rotate(12deg);\\n  }\\n  40%, 100% {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n  }\\n}\\n@-webkit-keyframes fa-spin {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n            transform: rotate(360deg);\\n  }\\n}\\n@keyframes fa-spin {\\n  0% {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n  }\\n  100% {\\n    -webkit-transform: rotate(360deg);\\n            transform: rotate(360deg);\\n  }\\n}\\n.fa-rotate-90 {\\n  -webkit-transform: rotate(90deg);\\n          transform: rotate(90deg);\\n}\\n\\n.fa-rotate-180 {\\n  -webkit-transform: rotate(180deg);\\n          transform: rotate(180deg);\\n}\\n\\n.fa-rotate-270 {\\n  -webkit-transform: rotate(270deg);\\n          transform: rotate(270deg);\\n}\\n\\n.fa-flip-horizontal {\\n  -webkit-transform: scale(-1, 1);\\n          transform: scale(-1, 1);\\n}\\n\\n.fa-flip-vertical {\\n  -webkit-transform: scale(1, -1);\\n          transform: scale(1, -1);\\n}\\n\\n.fa-flip-both,\\n.fa-flip-horizontal.fa-flip-vertical {\\n  -webkit-transform: scale(-1, -1);\\n          transform: scale(-1, -1);\\n}\\n\\n.fa-rotate-by {\\n  -webkit-transform: rotate(var(--fa-rotate-angle, none));\\n          transform: rotate(var(--fa-rotate-angle, none));\\n}\\n\\n.fa-stack {\\n  display: inline-block;\\n  vertical-align: middle;\\n  height: 2em;\\n  position: relative;\\n  width: 2.5em;\\n}\\n\\n.fa-stack-1x,\\n.fa-stack-2x {\\n  bottom: 0;\\n  left: 0;\\n  margin: auto;\\n  position: absolute;\\n  right: 0;\\n  top: 0;\\n  z-index: var(--fa-stack-z-index, auto);\\n}\\n\\n.svg-inline--fa.fa-stack-1x {\\n  height: 1em;\\n  width: 1.25em;\\n}\\n.svg-inline--fa.fa-stack-2x {\\n  height: 2em;\\n  width: 2.5em;\\n}\\n\\n.fa-inverse {\\n  color: var(--fa-inverse, #fff);\\n}\\n\\n.sr-only,\\n.fa-sr-only {\\n  position: absolute;\\n  width: 1px;\\n  height: 1px;\\n  padding: 0;\\n  margin: -1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0);\\n  white-space: nowrap;\\n  border-width: 0;\\n}\\n\\n.sr-only-focusable:not(:focus),\\n.fa-sr-only-focusable:not(:focus) {\\n  position: absolute;\\n  width: 1px;\\n  height: 1px;\\n  padding: 0;\\n  margin: -1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0);\\n  white-space: nowrap;\\n  border-width: 0;\\n}\\n\\n.svg-inline--fa .fa-primary {\\n  fill: var(--fa-primary-color, currentColor);\\n  opacity: var(--fa-primary-opacity, 1);\\n}\\n\\n.svg-inline--fa .fa-secondary {\\n  fill: var(--fa-secondary-color, currentColor);\\n  opacity: var(--fa-secondary-opacity, 0.4);\\n}\\n\\n.svg-inline--fa.fa-swap-opacity .fa-primary {\\n  opacity: var(--fa-secondary-opacity, 0.4);\\n}\\n\\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\\n  opacity: var(--fa-primary-opacity, 1);\\n}\\n\\n.svg-inline--fa mask .fa-primary,\\n.svg-inline--fa mask .fa-secondary {\\n  fill: black;\\n}\\n\\n.fad.fa-inverse,\\n.fa-duotone.fa-inverse {\\n  color: var(--fa-inverse, #fff);\\n}';\nfunction css() {\n    var dcp = DEFAULT_CSS_PREFIX;\n    var drc = DEFAULT_REPLACEMENT_CLASS;\n    var fp = config.cssPrefix;\n    var rc = config.replacementClass;\n    var s = baseStyles;\n    if (fp !== dcp || rc !== drc) {\n        var dPatt = new RegExp(\"\\\\.\".concat(dcp, \"\\\\-\"), \"g\");\n        var customPropPatt = new RegExp(\"\\\\--\".concat(dcp, \"\\\\-\"), \"g\");\n        var rPatt = new RegExp(\"\\\\.\".concat(drc), \"g\");\n        s = s.replace(dPatt, \".\".concat(fp, \"-\")).replace(customPropPatt, \"--\".concat(fp, \"-\")).replace(rPatt, \".\".concat(rc));\n    }\n    return s;\n}\nvar _cssInserted = false;\nfunction ensureCss() {\n    if (config.autoAddCss && !_cssInserted) {\n        insertCss(css());\n        _cssInserted = true;\n    }\n}\nvar InjectCSS = {\n    mixout: function mixout() {\n        return {\n            dom: {\n                css: css,\n                insertCss: ensureCss\n            }\n        };\n    },\n    hooks: function hooks() {\n        return {\n            beforeDOMElementCreation: function beforeDOMElementCreation() {\n                ensureCss();\n            },\n            beforeI2svg: function beforeI2svg() {\n                ensureCss();\n            }\n        };\n    }\n};\nvar w = WINDOW || {};\nif (!w[NAMESPACE_IDENTIFIER]) w[NAMESPACE_IDENTIFIER] = {};\nif (!w[NAMESPACE_IDENTIFIER].styles) w[NAMESPACE_IDENTIFIER].styles = {};\nif (!w[NAMESPACE_IDENTIFIER].hooks) w[NAMESPACE_IDENTIFIER].hooks = {};\nif (!w[NAMESPACE_IDENTIFIER].shims) w[NAMESPACE_IDENTIFIER].shims = [];\nvar namespace = w[NAMESPACE_IDENTIFIER];\nvar functions = [];\nvar listener = function listener() {\n    DOCUMENT.removeEventListener(\"DOMContentLoaded\", listener);\n    loaded = 1;\n    functions.map(function(fn) {\n        return fn();\n    });\n};\nvar loaded = false;\nif (IS_DOM) {\n    loaded = (DOCUMENT.documentElement.doScroll ? /^loaded|^c/ : /^loaded|^i|^c/).test(DOCUMENT.readyState);\n    if (!loaded) DOCUMENT.addEventListener(\"DOMContentLoaded\", listener);\n}\nfunction domready(fn) {\n    if (!IS_DOM) return;\n    loaded ? setTimeout(fn, 0) : functions.push(fn);\n}\nfunction toHtml(abstractNodes) {\n    var tag = abstractNodes.tag, _abstractNodes$attrib = abstractNodes.attributes, attributes = _abstractNodes$attrib === void 0 ? {} : _abstractNodes$attrib, _abstractNodes$childr = abstractNodes.children, children = _abstractNodes$childr === void 0 ? [] : _abstractNodes$childr;\n    if (typeof abstractNodes === \"string\") {\n        return htmlEscape(abstractNodes);\n    } else {\n        return \"<\".concat(tag, \" \").concat(joinAttributes(attributes), \">\").concat(children.map(toHtml).join(\"\"), \"</\").concat(tag, \">\");\n    }\n}\nfunction iconFromMapping(mapping, prefix, iconName) {\n    if (mapping && mapping[prefix] && mapping[prefix][iconName]) {\n        return {\n            prefix: prefix,\n            iconName: iconName,\n            icon: mapping[prefix][iconName]\n        };\n    }\n}\n/**\n * Internal helper to bind a function known to have 4 arguments\n * to a given context.\n */ var bindInternal4 = function bindInternal4(func, thisContext) {\n    return function(a, b, c, d) {\n        return func.call(thisContext, a, b, c, d);\n    };\n};\n/**\n * # Reduce\n *\n * A fast object `.reduce()` implementation.\n *\n * @param  {Object}   subject      The object to reduce over.\n * @param  {Function} fn           The reducer function.\n * @param  {mixed}    initialValue The initial value for the reducer, defaults to subject[0].\n * @param  {Object}   thisContext  The context for the reducer.\n * @return {mixed}                 The final result.\n */ var reduce = function fastReduceObject(subject, fn, initialValue, thisContext) {\n    var keys = Object.keys(subject), length = keys.length, iterator = thisContext !== undefined ? bindInternal4(fn, thisContext) : fn, i, key, result;\n    if (initialValue === undefined) {\n        i = 1;\n        result = subject[keys[0]];\n    } else {\n        i = 0;\n        result = initialValue;\n    }\n    for(; i < length; i++){\n        key = keys[i];\n        result = iterator(result, subject[key], key, subject);\n    }\n    return result;\n};\n/**\n * ucs2decode() and codePointAt() are both works of Mathias Bynens and licensed under MIT\n *\n * Copyright Mathias Bynens <https://mathiasbynens.be/>\n\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */ function ucs2decode(string) {\n    var output = [];\n    var counter = 0;\n    var length = string.length;\n    while(counter < length){\n        var value = string.charCodeAt(counter++);\n        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n            var extra = string.charCodeAt(counter++);\n            if ((extra & 0xFC00) == 0xDC00) {\n                // eslint-disable-line eqeqeq\n                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n            } else {\n                output.push(value);\n                counter--;\n            }\n        } else {\n            output.push(value);\n        }\n    }\n    return output;\n}\nfunction toHex(unicode) {\n    var decoded = ucs2decode(unicode);\n    return decoded.length === 1 ? decoded[0].toString(16) : null;\n}\nfunction codePointAt(string, index) {\n    var size = string.length;\n    var first = string.charCodeAt(index);\n    var second;\n    if (first >= 0xD800 && first <= 0xDBFF && size > index + 1) {\n        second = string.charCodeAt(index + 1);\n        if (second >= 0xDC00 && second <= 0xDFFF) {\n            return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        }\n    }\n    return first;\n}\nfunction normalizeIcons(icons) {\n    return Object.keys(icons).reduce(function(acc, iconName) {\n        var icon = icons[iconName];\n        var expanded = !!icon.icon;\n        if (expanded) {\n            acc[icon.iconName] = icon.icon;\n        } else {\n            acc[iconName] = icon;\n        }\n        return acc;\n    }, {});\n}\nfunction defineIcons(prefix, icons) {\n    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var _params$skipHooks = params.skipHooks, skipHooks = _params$skipHooks === void 0 ? false : _params$skipHooks;\n    var normalized = normalizeIcons(icons);\n    if (typeof namespace.hooks.addPack === \"function\" && !skipHooks) {\n        namespace.hooks.addPack(prefix, normalizeIcons(icons));\n    } else {\n        namespace.styles[prefix] = _objectSpread2(_objectSpread2({}, namespace.styles[prefix] || {}), normalized);\n    }\n    /**\n   * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction\n   * of new styles we needed to differentiate between them. Prefix `fa` is now an alias\n   * for `fas` so we'll ease the upgrade process for our users by automatically defining\n   * this as well.\n   */ if (prefix === \"fas\") {\n        defineIcons(\"fa\", icons);\n    }\n}\nvar duotonePathRe = [\n    /*#__PURE__*/ _wrapRegExp(/path d=\"((?:(?!\")[\\s\\S])+)\".*path d=\"((?:(?!\")[\\s\\S])+)\"/, {\n        d1: 1,\n        d2: 2\n    }),\n    /*#__PURE__*/ _wrapRegExp(/path class=\"((?:(?!\")[\\s\\S])+)\".*d=\"((?:(?!\")[\\s\\S])+)\".*path class=\"((?:(?!\")[\\s\\S])+)\".*d=\"((?:(?!\")[\\s\\S])+)\"/, {\n        cls1: 1,\n        d1: 2,\n        cls2: 3,\n        d2: 4\n    }),\n    /*#__PURE__*/ _wrapRegExp(/path class=\"((?:(?!\")[\\s\\S])+)\".*d=\"((?:(?!\")[\\s\\S])+)\"/, {\n        cls1: 1,\n        d1: 2\n    })\n];\nvar _LONG_STYLE, _PREFIXES, _PREFIXES_FOR_FAMILY;\nvar styles = namespace.styles, shims = namespace.shims;\nvar LONG_STYLE = (_LONG_STYLE = {}, _defineProperty(_LONG_STYLE, FAMILY_CLASSIC, Object.values(PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC])), _defineProperty(_LONG_STYLE, FAMILY_SHARP, Object.values(PREFIX_TO_LONG_STYLE[FAMILY_SHARP])), _LONG_STYLE);\nvar _defaultUsablePrefix = null;\nvar _byUnicode = {};\nvar _byLigature = {};\nvar _byOldName = {};\nvar _byOldUnicode = {};\nvar _byAlias = {};\nvar PREFIXES = (_PREFIXES = {}, _defineProperty(_PREFIXES, FAMILY_CLASSIC, Object.keys(PREFIX_TO_STYLE[FAMILY_CLASSIC])), _defineProperty(_PREFIXES, FAMILY_SHARP, Object.keys(PREFIX_TO_STYLE[FAMILY_SHARP])), _PREFIXES);\nfunction isReserved(name) {\n    return ~RESERVED_CLASSES.indexOf(name);\n}\nfunction getIconName(cssPrefix, cls) {\n    var parts = cls.split(\"-\");\n    var prefix = parts[0];\n    var iconName = parts.slice(1).join(\"-\");\n    if (prefix === cssPrefix && iconName !== \"\" && !isReserved(iconName)) {\n        return iconName;\n    } else {\n        return null;\n    }\n}\nvar build = function build() {\n    var lookup = function lookup(reducer) {\n        return reduce(styles, function(o, style, prefix) {\n            o[prefix] = reduce(style, reducer, {});\n            return o;\n        }, {});\n    };\n    _byUnicode = lookup(function(acc, icon, iconName) {\n        if (icon[3]) {\n            acc[icon[3]] = iconName;\n        }\n        if (icon[2]) {\n            var aliases = icon[2].filter(function(a) {\n                return typeof a === \"number\";\n            });\n            aliases.forEach(function(alias) {\n                acc[alias.toString(16)] = iconName;\n            });\n        }\n        return acc;\n    });\n    _byLigature = lookup(function(acc, icon, iconName) {\n        acc[iconName] = iconName;\n        if (icon[2]) {\n            var aliases = icon[2].filter(function(a) {\n                return typeof a === \"string\";\n            });\n            aliases.forEach(function(alias) {\n                acc[alias] = iconName;\n            });\n        }\n        return acc;\n    });\n    _byAlias = lookup(function(acc, icon, iconName) {\n        var aliases = icon[2];\n        acc[iconName] = iconName;\n        aliases.forEach(function(alias) {\n            acc[alias] = iconName;\n        });\n        return acc;\n    }); // If we have a Kit, we can't determine if regular is available since we\n    // could be auto-fetching it. We'll have to assume that it is available.\n    var hasRegular = \"far\" in styles || config.autoFetchSvg;\n    var shimLookups = reduce(shims, function(acc, shim) {\n        var maybeNameMaybeUnicode = shim[0];\n        var prefix = shim[1];\n        var iconName = shim[2];\n        if (prefix === \"far\" && !hasRegular) {\n            prefix = \"fas\";\n        }\n        if (typeof maybeNameMaybeUnicode === \"string\") {\n            acc.names[maybeNameMaybeUnicode] = {\n                prefix: prefix,\n                iconName: iconName\n            };\n        }\n        if (typeof maybeNameMaybeUnicode === \"number\") {\n            acc.unicodes[maybeNameMaybeUnicode.toString(16)] = {\n                prefix: prefix,\n                iconName: iconName\n            };\n        }\n        return acc;\n    }, {\n        names: {},\n        unicodes: {}\n    });\n    _byOldName = shimLookups.names;\n    _byOldUnicode = shimLookups.unicodes;\n    _defaultUsablePrefix = getCanonicalPrefix(config.styleDefault, {\n        family: config.familyDefault\n    });\n};\nonChange(function(c) {\n    _defaultUsablePrefix = getCanonicalPrefix(c.styleDefault, {\n        family: config.familyDefault\n    });\n});\nbuild();\nfunction byUnicode(prefix, unicode) {\n    return (_byUnicode[prefix] || {})[unicode];\n}\nfunction byLigature(prefix, ligature) {\n    return (_byLigature[prefix] || {})[ligature];\n}\nfunction byAlias(prefix, alias) {\n    return (_byAlias[prefix] || {})[alias];\n}\nfunction byOldName(name) {\n    return _byOldName[name] || {\n        prefix: null,\n        iconName: null\n    };\n}\nfunction byOldUnicode(unicode) {\n    var oldUnicode = _byOldUnicode[unicode];\n    var newUnicode = byUnicode(\"fas\", unicode);\n    return oldUnicode || (newUnicode ? {\n        prefix: \"fas\",\n        iconName: newUnicode\n    } : null) || {\n        prefix: null,\n        iconName: null\n    };\n}\nfunction getDefaultUsablePrefix() {\n    return _defaultUsablePrefix;\n}\nvar emptyCanonicalIcon = function emptyCanonicalIcon() {\n    return {\n        prefix: null,\n        iconName: null,\n        rest: []\n    };\n};\nfunction getCanonicalPrefix(styleOrPrefix) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _params$family = params.family, family = _params$family === void 0 ? FAMILY_CLASSIC : _params$family;\n    var style = PREFIX_TO_STYLE[family][styleOrPrefix];\n    var prefix = STYLE_TO_PREFIX[family][styleOrPrefix] || STYLE_TO_PREFIX[family][style];\n    var defined = styleOrPrefix in namespace.styles ? styleOrPrefix : null;\n    return prefix || defined || null;\n}\nvar PREFIXES_FOR_FAMILY = (_PREFIXES_FOR_FAMILY = {}, _defineProperty(_PREFIXES_FOR_FAMILY, FAMILY_CLASSIC, Object.keys(PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC])), _defineProperty(_PREFIXES_FOR_FAMILY, FAMILY_SHARP, Object.keys(PREFIX_TO_LONG_STYLE[FAMILY_SHARP])), _PREFIXES_FOR_FAMILY);\nfunction getCanonicalIcon(values) {\n    var _famProps;\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _params$skipLookups = params.skipLookups, skipLookups = _params$skipLookups === void 0 ? false : _params$skipLookups;\n    var famProps = (_famProps = {}, _defineProperty(_famProps, FAMILY_CLASSIC, \"\".concat(config.cssPrefix, \"-\").concat(FAMILY_CLASSIC)), _defineProperty(_famProps, FAMILY_SHARP, \"\".concat(config.cssPrefix, \"-\").concat(FAMILY_SHARP)), _famProps);\n    var givenPrefix = null;\n    var family = FAMILY_CLASSIC;\n    if (values.includes(famProps[FAMILY_CLASSIC]) || values.some(function(v) {\n        return PREFIXES_FOR_FAMILY[FAMILY_CLASSIC].includes(v);\n    })) {\n        family = FAMILY_CLASSIC;\n    }\n    if (values.includes(famProps[FAMILY_SHARP]) || values.some(function(v) {\n        return PREFIXES_FOR_FAMILY[FAMILY_SHARP].includes(v);\n    })) {\n        family = FAMILY_SHARP;\n    }\n    var canonical = values.reduce(function(acc, cls) {\n        var iconName = getIconName(config.cssPrefix, cls);\n        if (styles[cls]) {\n            cls = LONG_STYLE[family].includes(cls) ? LONG_STYLE_TO_PREFIX[family][cls] : cls;\n            givenPrefix = cls;\n            acc.prefix = cls;\n        } else if (PREFIXES[family].indexOf(cls) > -1) {\n            givenPrefix = cls;\n            acc.prefix = getCanonicalPrefix(cls, {\n                family: family\n            });\n        } else if (iconName) {\n            acc.iconName = iconName;\n        } else if (cls !== config.replacementClass && cls !== famProps[FAMILY_CLASSIC] && cls !== famProps[FAMILY_SHARP]) {\n            acc.rest.push(cls);\n        }\n        if (!skipLookups && acc.prefix && acc.iconName) {\n            var shim = givenPrefix === \"fa\" ? byOldName(acc.iconName) : {};\n            var aliasIconName = byAlias(acc.prefix, acc.iconName);\n            if (shim.prefix) {\n                givenPrefix = null;\n            }\n            acc.iconName = shim.iconName || aliasIconName || acc.iconName;\n            acc.prefix = shim.prefix || acc.prefix;\n            if (acc.prefix === \"far\" && !styles[\"far\"] && styles[\"fas\"] && !config.autoFetchSvg) {\n                // Allow a fallback from the regular style to solid if regular is not available\n                // but only if we aren't auto-fetching SVGs\n                acc.prefix = \"fas\";\n            }\n        }\n        return acc;\n    }, emptyCanonicalIcon());\n    if (values.includes(\"fa-brands\") || values.includes(\"fab\")) {\n        canonical.prefix = \"fab\";\n    }\n    if (values.includes(\"fa-duotone\") || values.includes(\"fad\")) {\n        canonical.prefix = \"fad\";\n    }\n    if (!canonical.prefix && family === FAMILY_SHARP && (styles[\"fass\"] || config.autoFetchSvg)) {\n        canonical.prefix = \"fass\";\n        canonical.iconName = byAlias(canonical.prefix, canonical.iconName) || canonical.iconName;\n    }\n    if (canonical.prefix === \"fa\" || givenPrefix === \"fa\") {\n        // The fa prefix is not canonical. So if it has made it through until this point\n        // we will shift it to the correct prefix.\n        canonical.prefix = getDefaultUsablePrefix() || \"fas\";\n    }\n    return canonical;\n}\nvar Library = /*#__PURE__*/ function() {\n    function Library() {\n        _classCallCheck(this, Library);\n        this.definitions = {};\n    }\n    _createClass(Library, [\n        {\n            key: \"add\",\n            value: function add() {\n                var _this = this;\n                for(var _len = arguments.length, definitions = new Array(_len), _key = 0; _key < _len; _key++){\n                    definitions[_key] = arguments[_key];\n                }\n                var additions = definitions.reduce(this._pullDefinitions, {});\n                Object.keys(additions).forEach(function(key) {\n                    _this.definitions[key] = _objectSpread2(_objectSpread2({}, _this.definitions[key] || {}), additions[key]);\n                    defineIcons(key, additions[key]); // TODO can we stop doing this? We can't get the icons by 'fa-solid' any longer so this probably needs to change\n                    var longPrefix = PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC][key];\n                    if (longPrefix) defineIcons(longPrefix, additions[key]);\n                    build();\n                });\n            }\n        },\n        {\n            key: \"reset\",\n            value: function reset() {\n                this.definitions = {};\n            }\n        },\n        {\n            key: \"_pullDefinitions\",\n            value: function _pullDefinitions(additions, definition) {\n                var normalized = definition.prefix && definition.iconName && definition.icon ? {\n                    0: definition\n                } : definition;\n                Object.keys(normalized).map(function(key) {\n                    var _normalized$key = normalized[key], prefix = _normalized$key.prefix, iconName = _normalized$key.iconName, icon = _normalized$key.icon;\n                    var aliases = icon[2];\n                    if (!additions[prefix]) additions[prefix] = {};\n                    if (aliases.length > 0) {\n                        aliases.forEach(function(alias) {\n                            if (typeof alias === \"string\") {\n                                additions[prefix][alias] = icon;\n                            }\n                        });\n                    }\n                    additions[prefix][iconName] = icon;\n                });\n                return additions;\n            }\n        }\n    ]);\n    return Library;\n}();\nvar _plugins = [];\nvar _hooks = {};\nvar providers = {};\nvar defaultProviderKeys = Object.keys(providers);\nfunction registerPlugins(nextPlugins, _ref) {\n    var obj = _ref.mixoutsTo;\n    _plugins = nextPlugins;\n    _hooks = {};\n    Object.keys(providers).forEach(function(k) {\n        if (defaultProviderKeys.indexOf(k) === -1) {\n            delete providers[k];\n        }\n    });\n    _plugins.forEach(function(plugin) {\n        var mixout = plugin.mixout ? plugin.mixout() : {};\n        Object.keys(mixout).forEach(function(tk) {\n            if (typeof mixout[tk] === \"function\") {\n                obj[tk] = mixout[tk];\n            }\n            if (_typeof(mixout[tk]) === \"object\") {\n                Object.keys(mixout[tk]).forEach(function(sk) {\n                    if (!obj[tk]) {\n                        obj[tk] = {};\n                    }\n                    obj[tk][sk] = mixout[tk][sk];\n                });\n            }\n        });\n        if (plugin.hooks) {\n            var hooks = plugin.hooks();\n            Object.keys(hooks).forEach(function(hook) {\n                if (!_hooks[hook]) {\n                    _hooks[hook] = [];\n                }\n                _hooks[hook].push(hooks[hook]);\n            });\n        }\n        if (plugin.provides) {\n            plugin.provides(providers);\n        }\n    });\n    return obj;\n}\nfunction chainHooks(hook, accumulator) {\n    for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n        args[_key - 2] = arguments[_key];\n    }\n    var hookFns = _hooks[hook] || [];\n    hookFns.forEach(function(hookFn) {\n        accumulator = hookFn.apply(null, [\n            accumulator\n        ].concat(args)); // eslint-disable-line no-useless-call\n    });\n    return accumulator;\n}\nfunction callHooks(hook) {\n    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n        args[_key2 - 1] = arguments[_key2];\n    }\n    var hookFns = _hooks[hook] || [];\n    hookFns.forEach(function(hookFn) {\n        hookFn.apply(null, args);\n    });\n    return undefined;\n}\nfunction callProvided() {\n    var hook = arguments[0];\n    var args = Array.prototype.slice.call(arguments, 1);\n    return providers[hook] ? providers[hook].apply(null, args) : undefined;\n}\nfunction findIconDefinition(iconLookup) {\n    if (iconLookup.prefix === \"fa\") {\n        iconLookup.prefix = \"fas\";\n    }\n    var iconName = iconLookup.iconName;\n    var prefix = iconLookup.prefix || getDefaultUsablePrefix();\n    if (!iconName) return;\n    iconName = byAlias(prefix, iconName) || iconName;\n    return iconFromMapping(library.definitions, prefix, iconName) || iconFromMapping(namespace.styles, prefix, iconName);\n}\nvar library = new Library();\nvar noAuto = function noAuto() {\n    config.autoReplaceSvg = false;\n    config.observeMutations = false;\n    callHooks(\"noAuto\");\n};\nvar dom = {\n    i2svg: function i2svg() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (IS_DOM) {\n            callHooks(\"beforeI2svg\", params);\n            callProvided(\"pseudoElements2svg\", params);\n            return callProvided(\"i2svg\", params);\n        } else {\n            return Promise.reject(\"Operation requires a DOM of some kind.\");\n        }\n    },\n    watch: function watch() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var autoReplaceSvgRoot = params.autoReplaceSvgRoot;\n        if (config.autoReplaceSvg === false) {\n            config.autoReplaceSvg = true;\n        }\n        config.observeMutations = true;\n        domready(function() {\n            autoReplace({\n                autoReplaceSvgRoot: autoReplaceSvgRoot\n            });\n            callHooks(\"watch\", params);\n        });\n    }\n};\nvar parse = {\n    icon: function icon(_icon) {\n        if (_icon === null) {\n            return null;\n        }\n        if (_typeof(_icon) === \"object\" && _icon.prefix && _icon.iconName) {\n            return {\n                prefix: _icon.prefix,\n                iconName: byAlias(_icon.prefix, _icon.iconName) || _icon.iconName\n            };\n        }\n        if (Array.isArray(_icon) && _icon.length === 2) {\n            var iconName = _icon[1].indexOf(\"fa-\") === 0 ? _icon[1].slice(3) : _icon[1];\n            var prefix = getCanonicalPrefix(_icon[0]);\n            return {\n                prefix: prefix,\n                iconName: byAlias(prefix, iconName) || iconName\n            };\n        }\n        if (typeof _icon === \"string\" && (_icon.indexOf(\"\".concat(config.cssPrefix, \"-\")) > -1 || _icon.match(ICON_SELECTION_SYNTAX_PATTERN))) {\n            var canonicalIcon = getCanonicalIcon(_icon.split(\" \"), {\n                skipLookups: true\n            });\n            return {\n                prefix: canonicalIcon.prefix || getDefaultUsablePrefix(),\n                iconName: byAlias(canonicalIcon.prefix, canonicalIcon.iconName) || canonicalIcon.iconName\n            };\n        }\n        if (typeof _icon === \"string\") {\n            var _prefix = getDefaultUsablePrefix();\n            return {\n                prefix: _prefix,\n                iconName: byAlias(_prefix, _icon) || _icon\n            };\n        }\n    }\n};\nvar api = {\n    noAuto: noAuto,\n    config: config,\n    dom: dom,\n    parse: parse,\n    library: library,\n    findIconDefinition: findIconDefinition,\n    toHtml: toHtml\n};\nvar autoReplace = function autoReplace() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _params$autoReplaceSv = params.autoReplaceSvgRoot, autoReplaceSvgRoot = _params$autoReplaceSv === void 0 ? DOCUMENT : _params$autoReplaceSv;\n    if ((Object.keys(namespace.styles).length > 0 || config.autoFetchSvg) && IS_DOM && config.autoReplaceSvg) api.dom.i2svg({\n        node: autoReplaceSvgRoot\n    });\n};\nfunction domVariants(val, abstractCreator) {\n    Object.defineProperty(val, \"abstract\", {\n        get: abstractCreator\n    });\n    Object.defineProperty(val, \"html\", {\n        get: function get() {\n            return val.abstract.map(function(a) {\n                return toHtml(a);\n            });\n        }\n    });\n    Object.defineProperty(val, \"node\", {\n        get: function get() {\n            if (!IS_DOM) return;\n            var container = DOCUMENT.createElement(\"div\");\n            container.innerHTML = val.html;\n            return container.children;\n        }\n    });\n    return val;\n}\nfunction asIcon(_ref) {\n    var children = _ref.children, main = _ref.main, mask = _ref.mask, attributes = _ref.attributes, styles = _ref.styles, transform = _ref.transform;\n    if (transformIsMeaningful(transform) && main.found && !mask.found) {\n        var width = main.width, height = main.height;\n        var offset = {\n            x: width / height / 2,\n            y: 0.5\n        };\n        attributes[\"style\"] = joinStyles(_objectSpread2(_objectSpread2({}, styles), {}, {\n            \"transform-origin\": \"\".concat(offset.x + transform.x / 16, \"em \").concat(offset.y + transform.y / 16, \"em\")\n        }));\n    }\n    return [\n        {\n            tag: \"svg\",\n            attributes: attributes,\n            children: children\n        }\n    ];\n}\nfunction asSymbol(_ref) {\n    var prefix = _ref.prefix, iconName = _ref.iconName, children = _ref.children, attributes = _ref.attributes, symbol = _ref.symbol;\n    var id = symbol === true ? \"\".concat(prefix, \"-\").concat(config.cssPrefix, \"-\").concat(iconName) : symbol;\n    return [\n        {\n            tag: \"svg\",\n            attributes: {\n                style: \"display: none;\"\n            },\n            children: [\n                {\n                    tag: \"symbol\",\n                    attributes: _objectSpread2(_objectSpread2({}, attributes), {}, {\n                        id: id\n                    }),\n                    children: children\n                }\n            ]\n        }\n    ];\n}\nfunction makeInlineSvgAbstract(params) {\n    var _params$icons = params.icons, main = _params$icons.main, mask = _params$icons.mask, prefix = params.prefix, iconName = params.iconName, transform = params.transform, symbol = params.symbol, title = params.title, maskId = params.maskId, titleId = params.titleId, extra = params.extra, _params$watchable = params.watchable, watchable = _params$watchable === void 0 ? false : _params$watchable;\n    var _ref = mask.found ? mask : main, width = _ref.width, height = _ref.height;\n    var isUploadedIcon = prefix === \"fak\";\n    var attrClass = [\n        config.replacementClass,\n        iconName ? \"\".concat(config.cssPrefix, \"-\").concat(iconName) : \"\"\n    ].filter(function(c) {\n        return extra.classes.indexOf(c) === -1;\n    }).filter(function(c) {\n        return c !== \"\" || !!c;\n    }).concat(extra.classes).join(\" \");\n    var content = {\n        children: [],\n        attributes: _objectSpread2(_objectSpread2({}, extra.attributes), {}, {\n            \"data-prefix\": prefix,\n            \"data-icon\": iconName,\n            \"class\": attrClass,\n            \"role\": extra.attributes.role || \"img\",\n            \"xmlns\": \"http://www.w3.org/2000/svg\",\n            \"viewBox\": \"0 0 \".concat(width, \" \").concat(height)\n        })\n    };\n    var uploadedIconWidthStyle = isUploadedIcon && !~extra.classes.indexOf(\"fa-fw\") ? {\n        width: \"\".concat(width / height * 16 * 0.0625, \"em\")\n    } : {};\n    if (watchable) {\n        content.attributes[DATA_FA_I2SVG] = \"\";\n    }\n    if (title) {\n        content.children.push({\n            tag: \"title\",\n            attributes: {\n                id: content.attributes[\"aria-labelledby\"] || \"title-\".concat(titleId || nextUniqueId())\n            },\n            children: [\n                title\n            ]\n        });\n        delete content.attributes.title;\n    }\n    var args = _objectSpread2(_objectSpread2({}, content), {}, {\n        prefix: prefix,\n        iconName: iconName,\n        main: main,\n        mask: mask,\n        maskId: maskId,\n        transform: transform,\n        symbol: symbol,\n        styles: _objectSpread2(_objectSpread2({}, uploadedIconWidthStyle), extra.styles)\n    });\n    var _ref2 = mask.found && main.found ? callProvided(\"generateAbstractMask\", args) || {\n        children: [],\n        attributes: {}\n    } : callProvided(\"generateAbstractIcon\", args) || {\n        children: [],\n        attributes: {}\n    }, children = _ref2.children, attributes = _ref2.attributes;\n    args.children = children;\n    args.attributes = attributes;\n    if (symbol) {\n        return asSymbol(args);\n    } else {\n        return asIcon(args);\n    }\n}\nfunction makeLayersTextAbstract(params) {\n    var content = params.content, width = params.width, height = params.height, transform = params.transform, title = params.title, extra = params.extra, _params$watchable2 = params.watchable, watchable = _params$watchable2 === void 0 ? false : _params$watchable2;\n    var attributes = _objectSpread2(_objectSpread2(_objectSpread2({}, extra.attributes), title ? {\n        \"title\": title\n    } : {}), {}, {\n        \"class\": extra.classes.join(\" \")\n    });\n    if (watchable) {\n        attributes[DATA_FA_I2SVG] = \"\";\n    }\n    var styles = _objectSpread2({}, extra.styles);\n    if (transformIsMeaningful(transform)) {\n        styles[\"transform\"] = transformForCss({\n            transform: transform,\n            startCentered: true,\n            width: width,\n            height: height\n        });\n        styles[\"-webkit-transform\"] = styles[\"transform\"];\n    }\n    var styleString = joinStyles(styles);\n    if (styleString.length > 0) {\n        attributes[\"style\"] = styleString;\n    }\n    var val = [];\n    val.push({\n        tag: \"span\",\n        attributes: attributes,\n        children: [\n            content\n        ]\n    });\n    if (title) {\n        val.push({\n            tag: \"span\",\n            attributes: {\n                class: \"sr-only\"\n            },\n            children: [\n                title\n            ]\n        });\n    }\n    return val;\n}\nfunction makeLayersCounterAbstract(params) {\n    var content = params.content, title = params.title, extra = params.extra;\n    var attributes = _objectSpread2(_objectSpread2(_objectSpread2({}, extra.attributes), title ? {\n        \"title\": title\n    } : {}), {}, {\n        \"class\": extra.classes.join(\" \")\n    });\n    var styleString = joinStyles(extra.styles);\n    if (styleString.length > 0) {\n        attributes[\"style\"] = styleString;\n    }\n    var val = [];\n    val.push({\n        tag: \"span\",\n        attributes: attributes,\n        children: [\n            content\n        ]\n    });\n    if (title) {\n        val.push({\n            tag: \"span\",\n            attributes: {\n                class: \"sr-only\"\n            },\n            children: [\n                title\n            ]\n        });\n    }\n    return val;\n}\nvar styles$1 = namespace.styles;\nfunction asFoundIcon(icon) {\n    var width = icon[0];\n    var height = icon[1];\n    var _icon$slice = icon.slice(4), _icon$slice2 = _slicedToArray(_icon$slice, 1), vectorData = _icon$slice2[0];\n    var element = null;\n    if (Array.isArray(vectorData)) {\n        element = {\n            tag: \"g\",\n            attributes: {\n                class: \"\".concat(config.cssPrefix, \"-\").concat(DUOTONE_CLASSES.GROUP)\n            },\n            children: [\n                {\n                    tag: \"path\",\n                    attributes: {\n                        class: \"\".concat(config.cssPrefix, \"-\").concat(DUOTONE_CLASSES.SECONDARY),\n                        fill: \"currentColor\",\n                        d: vectorData[0]\n                    }\n                },\n                {\n                    tag: \"path\",\n                    attributes: {\n                        class: \"\".concat(config.cssPrefix, \"-\").concat(DUOTONE_CLASSES.PRIMARY),\n                        fill: \"currentColor\",\n                        d: vectorData[1]\n                    }\n                }\n            ]\n        };\n    } else {\n        element = {\n            tag: \"path\",\n            attributes: {\n                fill: \"currentColor\",\n                d: vectorData\n            }\n        };\n    }\n    return {\n        found: true,\n        width: width,\n        height: height,\n        icon: element\n    };\n}\nvar missingIconResolutionMixin = {\n    found: false,\n    width: 512,\n    height: 512\n};\nfunction maybeNotifyMissing(iconName, prefix) {\n    if (!PRODUCTION && !config.showMissingIcons && iconName) {\n        console.error('Icon with name \"'.concat(iconName, '\" and prefix \"').concat(prefix, '\" is missing.'));\n    }\n}\nfunction findIcon(iconName, prefix) {\n    var givenPrefix = prefix;\n    if (prefix === \"fa\" && config.styleDefault !== null) {\n        prefix = getDefaultUsablePrefix();\n    }\n    return new Promise(function(resolve, reject) {\n        var val = {\n            found: false,\n            width: 512,\n            height: 512,\n            icon: callProvided(\"missingIconAbstract\") || {}\n        };\n        if (givenPrefix === \"fa\") {\n            var shim = byOldName(iconName) || {};\n            iconName = shim.iconName || iconName;\n            prefix = shim.prefix || prefix;\n        }\n        if (iconName && prefix && styles$1[prefix] && styles$1[prefix][iconName]) {\n            var icon = styles$1[prefix][iconName];\n            return resolve(asFoundIcon(icon));\n        }\n        maybeNotifyMissing(iconName, prefix);\n        resolve(_objectSpread2(_objectSpread2({}, missingIconResolutionMixin), {}, {\n            icon: config.showMissingIcons && iconName ? callProvided(\"missingIconAbstract\") || {} : {}\n        }));\n    });\n}\nvar noop$1 = function noop() {};\nvar p = config.measurePerformance && PERFORMANCE && PERFORMANCE.mark && PERFORMANCE.measure ? PERFORMANCE : {\n    mark: noop$1,\n    measure: noop$1\n};\nvar preamble = 'FA \"6.5.1\"';\nvar begin = function begin(name) {\n    p.mark(\"\".concat(preamble, \" \").concat(name, \" begins\"));\n    return function() {\n        return end(name);\n    };\n};\nvar end = function end(name) {\n    p.mark(\"\".concat(preamble, \" \").concat(name, \" ends\"));\n    p.measure(\"\".concat(preamble, \" \").concat(name), \"\".concat(preamble, \" \").concat(name, \" begins\"), \"\".concat(preamble, \" \").concat(name, \" ends\"));\n};\nvar perf = {\n    begin: begin,\n    end: end\n};\nvar noop$2 = function noop() {};\nfunction isWatched(node) {\n    var i2svg = node.getAttribute ? node.getAttribute(DATA_FA_I2SVG) : null;\n    return typeof i2svg === \"string\";\n}\nfunction hasPrefixAndIcon(node) {\n    var prefix = node.getAttribute ? node.getAttribute(DATA_PREFIX) : null;\n    var icon = node.getAttribute ? node.getAttribute(DATA_ICON) : null;\n    return prefix && icon;\n}\nfunction hasBeenReplaced(node) {\n    return node && node.classList && node.classList.contains && node.classList.contains(config.replacementClass);\n}\nfunction getMutator() {\n    if (config.autoReplaceSvg === true) {\n        return mutators.replace;\n    }\n    var mutator = mutators[config.autoReplaceSvg];\n    return mutator || mutators.replace;\n}\nfunction createElementNS(tag) {\n    return DOCUMENT.createElementNS(\"http://www.w3.org/2000/svg\", tag);\n}\nfunction createElement(tag) {\n    return DOCUMENT.createElement(tag);\n}\nfunction convertSVG(abstractObj) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _params$ceFn = params.ceFn, ceFn = _params$ceFn === void 0 ? abstractObj.tag === \"svg\" ? createElementNS : createElement : _params$ceFn;\n    if (typeof abstractObj === \"string\") {\n        return DOCUMENT.createTextNode(abstractObj);\n    }\n    var tag = ceFn(abstractObj.tag);\n    Object.keys(abstractObj.attributes || []).forEach(function(key) {\n        tag.setAttribute(key, abstractObj.attributes[key]);\n    });\n    var children = abstractObj.children || [];\n    children.forEach(function(child) {\n        tag.appendChild(convertSVG(child, {\n            ceFn: ceFn\n        }));\n    });\n    return tag;\n}\nfunction nodeAsComment(node) {\n    var comment = \" \".concat(node.outerHTML, \" \");\n    /* BEGIN.ATTRIBUTION */ comment = \"\".concat(comment, \"Font Awesome fontawesome.com \");\n    /* END.ATTRIBUTION */ return comment;\n}\nvar mutators = {\n    replace: function replace(mutation) {\n        var node = mutation[0];\n        if (node.parentNode) {\n            mutation[1].forEach(function(_abstract) {\n                node.parentNode.insertBefore(convertSVG(_abstract), node);\n            });\n            if (node.getAttribute(DATA_FA_I2SVG) === null && config.keepOriginalSource) {\n                var comment = DOCUMENT.createComment(nodeAsComment(node));\n                node.parentNode.replaceChild(comment, node);\n            } else {\n                node.remove();\n            }\n        }\n    },\n    nest: function nest(mutation) {\n        var node = mutation[0];\n        var _abstract2 = mutation[1]; // If we already have a replaced node we do not want to continue nesting within it.\n        // Short-circuit to the standard replacement\n        if (~classArray(node).indexOf(config.replacementClass)) {\n            return mutators.replace(mutation);\n        }\n        var forSvg = new RegExp(\"\".concat(config.cssPrefix, \"-.*\"));\n        delete _abstract2[0].attributes.id;\n        if (_abstract2[0].attributes.class) {\n            var splitClasses = _abstract2[0].attributes.class.split(\" \").reduce(function(acc, cls) {\n                if (cls === config.replacementClass || cls.match(forSvg)) {\n                    acc.toSvg.push(cls);\n                } else {\n                    acc.toNode.push(cls);\n                }\n                return acc;\n            }, {\n                toNode: [],\n                toSvg: []\n            });\n            _abstract2[0].attributes.class = splitClasses.toSvg.join(\" \");\n            if (splitClasses.toNode.length === 0) {\n                node.removeAttribute(\"class\");\n            } else {\n                node.setAttribute(\"class\", splitClasses.toNode.join(\" \"));\n            }\n        }\n        var newInnerHTML = _abstract2.map(function(a) {\n            return toHtml(a);\n        }).join(\"\\n\");\n        node.setAttribute(DATA_FA_I2SVG, \"\");\n        node.innerHTML = newInnerHTML;\n    }\n};\nfunction performOperationSync(op) {\n    op();\n}\nfunction perform(mutations, callback) {\n    var callbackFunction = typeof callback === \"function\" ? callback : noop$2;\n    if (mutations.length === 0) {\n        callbackFunction();\n    } else {\n        var frame = performOperationSync;\n        if (config.mutateApproach === MUTATION_APPROACH_ASYNC) {\n            frame = WINDOW.requestAnimationFrame || performOperationSync;\n        }\n        frame(function() {\n            var mutator = getMutator();\n            var mark = perf.begin(\"mutate\");\n            mutations.map(mutator);\n            mark();\n            callbackFunction();\n        });\n    }\n}\nvar disabled = false;\nfunction disableObservation() {\n    disabled = true;\n}\nfunction enableObservation() {\n    disabled = false;\n}\nvar mo = null;\nfunction observe(options) {\n    if (!MUTATION_OBSERVER) {\n        return;\n    }\n    if (!config.observeMutations) {\n        return;\n    }\n    var _options$treeCallback = options.treeCallback, treeCallback = _options$treeCallback === void 0 ? noop$2 : _options$treeCallback, _options$nodeCallback = options.nodeCallback, nodeCallback = _options$nodeCallback === void 0 ? noop$2 : _options$nodeCallback, _options$pseudoElemen = options.pseudoElementsCallback, pseudoElementsCallback = _options$pseudoElemen === void 0 ? noop$2 : _options$pseudoElemen, _options$observeMutat = options.observeMutationsRoot, observeMutationsRoot = _options$observeMutat === void 0 ? DOCUMENT : _options$observeMutat;\n    mo = new MUTATION_OBSERVER(function(objects) {\n        if (disabled) return;\n        var defaultPrefix = getDefaultUsablePrefix();\n        toArray(objects).forEach(function(mutationRecord) {\n            if (mutationRecord.type === \"childList\" && mutationRecord.addedNodes.length > 0 && !isWatched(mutationRecord.addedNodes[0])) {\n                if (config.searchPseudoElements) {\n                    pseudoElementsCallback(mutationRecord.target);\n                }\n                treeCallback(mutationRecord.target);\n            }\n            if (mutationRecord.type === \"attributes\" && mutationRecord.target.parentNode && config.searchPseudoElements) {\n                pseudoElementsCallback(mutationRecord.target.parentNode);\n            }\n            if (mutationRecord.type === \"attributes\" && isWatched(mutationRecord.target) && ~ATTRIBUTES_WATCHED_FOR_MUTATION.indexOf(mutationRecord.attributeName)) {\n                if (mutationRecord.attributeName === \"class\" && hasPrefixAndIcon(mutationRecord.target)) {\n                    var _getCanonicalIcon = getCanonicalIcon(classArray(mutationRecord.target)), prefix = _getCanonicalIcon.prefix, iconName = _getCanonicalIcon.iconName;\n                    mutationRecord.target.setAttribute(DATA_PREFIX, prefix || defaultPrefix);\n                    if (iconName) mutationRecord.target.setAttribute(DATA_ICON, iconName);\n                } else if (hasBeenReplaced(mutationRecord.target)) {\n                    nodeCallback(mutationRecord.target);\n                }\n            }\n        });\n    });\n    if (!IS_DOM) return;\n    mo.observe(observeMutationsRoot, {\n        childList: true,\n        attributes: true,\n        characterData: true,\n        subtree: true\n    });\n}\nfunction disconnect() {\n    if (!mo) return;\n    mo.disconnect();\n}\nfunction styleParser(node) {\n    var style = node.getAttribute(\"style\");\n    var val = [];\n    if (style) {\n        val = style.split(\";\").reduce(function(acc, style) {\n            var styles = style.split(\":\");\n            var prop = styles[0];\n            var value = styles.slice(1);\n            if (prop && value.length > 0) {\n                acc[prop] = value.join(\":\").trim();\n            }\n            return acc;\n        }, {});\n    }\n    return val;\n}\nfunction classParser(node) {\n    var existingPrefix = node.getAttribute(\"data-prefix\");\n    var existingIconName = node.getAttribute(\"data-icon\");\n    var innerText = node.innerText !== undefined ? node.innerText.trim() : \"\";\n    var val = getCanonicalIcon(classArray(node));\n    if (!val.prefix) {\n        val.prefix = getDefaultUsablePrefix();\n    }\n    if (existingPrefix && existingIconName) {\n        val.prefix = existingPrefix;\n        val.iconName = existingIconName;\n    }\n    if (val.iconName && val.prefix) {\n        return val;\n    }\n    if (val.prefix && innerText.length > 0) {\n        val.iconName = byLigature(val.prefix, node.innerText) || byUnicode(val.prefix, toHex(node.innerText));\n    }\n    if (!val.iconName && config.autoFetchSvg && node.firstChild && node.firstChild.nodeType === Node.TEXT_NODE) {\n        val.iconName = node.firstChild.data;\n    }\n    return val;\n}\nfunction attributesParser(node) {\n    var extraAttributes = toArray(node.attributes).reduce(function(acc, attr) {\n        if (acc.name !== \"class\" && acc.name !== \"style\") {\n            acc[attr.name] = attr.value;\n        }\n        return acc;\n    }, {});\n    var title = node.getAttribute(\"title\");\n    var titleId = node.getAttribute(\"data-fa-title-id\");\n    if (config.autoA11y) {\n        if (title) {\n            extraAttributes[\"aria-labelledby\"] = \"\".concat(config.replacementClass, \"-title-\").concat(titleId || nextUniqueId());\n        } else {\n            extraAttributes[\"aria-hidden\"] = \"true\";\n            extraAttributes[\"focusable\"] = \"false\";\n        }\n    }\n    return extraAttributes;\n}\nfunction blankMeta() {\n    return {\n        iconName: null,\n        title: null,\n        titleId: null,\n        prefix: null,\n        transform: meaninglessTransform,\n        symbol: false,\n        mask: {\n            iconName: null,\n            prefix: null,\n            rest: []\n        },\n        maskId: null,\n        extra: {\n            classes: [],\n            styles: {},\n            attributes: {}\n        }\n    };\n}\nfunction parseMeta(node) {\n    var parser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        styleParser: true\n    };\n    var _classParser = classParser(node), iconName = _classParser.iconName, prefix = _classParser.prefix, extraClasses = _classParser.rest;\n    var extraAttributes = attributesParser(node);\n    var pluginMeta = chainHooks(\"parseNodeAttributes\", {}, node);\n    var extraStyles = parser.styleParser ? styleParser(node) : [];\n    return _objectSpread2({\n        iconName: iconName,\n        title: node.getAttribute(\"title\"),\n        titleId: node.getAttribute(\"data-fa-title-id\"),\n        prefix: prefix,\n        transform: meaninglessTransform,\n        mask: {\n            iconName: null,\n            prefix: null,\n            rest: []\n        },\n        maskId: null,\n        symbol: false,\n        extra: {\n            classes: extraClasses,\n            styles: extraStyles,\n            attributes: extraAttributes\n        }\n    }, pluginMeta);\n}\nvar styles$2 = namespace.styles;\nfunction generateMutation(node) {\n    var nodeMeta = config.autoReplaceSvg === \"nest\" ? parseMeta(node, {\n        styleParser: false\n    }) : parseMeta(node);\n    if (~nodeMeta.extra.classes.indexOf(LAYERS_TEXT_CLASSNAME)) {\n        return callProvided(\"generateLayersText\", node, nodeMeta);\n    } else {\n        return callProvided(\"generateSvgReplacementMutation\", node, nodeMeta);\n    }\n}\nvar knownPrefixes = new Set();\nFAMILIES.map(function(family) {\n    knownPrefixes.add(\"fa-\".concat(family));\n});\nObject.keys(PREFIX_TO_STYLE[FAMILY_CLASSIC]).map(knownPrefixes.add.bind(knownPrefixes));\nObject.keys(PREFIX_TO_STYLE[FAMILY_SHARP]).map(knownPrefixes.add.bind(knownPrefixes));\nknownPrefixes = _toConsumableArray(knownPrefixes);\nfunction onTree(root) {\n    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    if (!IS_DOM) return Promise.resolve();\n    var htmlClassList = DOCUMENT.documentElement.classList;\n    var hclAdd = function hclAdd(suffix) {\n        return htmlClassList.add(\"\".concat(HTML_CLASS_I2SVG_BASE_CLASS, \"-\").concat(suffix));\n    };\n    var hclRemove = function hclRemove(suffix) {\n        return htmlClassList.remove(\"\".concat(HTML_CLASS_I2SVG_BASE_CLASS, \"-\").concat(suffix));\n    };\n    var prefixes = config.autoFetchSvg ? knownPrefixes : FAMILIES.map(function(f) {\n        return \"fa-\".concat(f);\n    }).concat(Object.keys(styles$2));\n    if (!prefixes.includes(\"fa\")) {\n        prefixes.push(\"fa\");\n    }\n    var prefixesDomQuery = [\n        \".\".concat(LAYERS_TEXT_CLASSNAME, \":not([\").concat(DATA_FA_I2SVG, \"])\")\n    ].concat(prefixes.map(function(p) {\n        return \".\".concat(p, \":not([\").concat(DATA_FA_I2SVG, \"])\");\n    })).join(\", \");\n    if (prefixesDomQuery.length === 0) {\n        return Promise.resolve();\n    }\n    var candidates = [];\n    try {\n        candidates = toArray(root.querySelectorAll(prefixesDomQuery));\n    } catch (e) {}\n    if (candidates.length > 0) {\n        hclAdd(\"pending\");\n        hclRemove(\"complete\");\n    } else {\n        return Promise.resolve();\n    }\n    var mark = perf.begin(\"onTree\");\n    var mutations = candidates.reduce(function(acc, node) {\n        try {\n            var mutation = generateMutation(node);\n            if (mutation) {\n                acc.push(mutation);\n            }\n        } catch (e) {\n            if (!PRODUCTION) {\n                if (e.name === \"MissingIcon\") {\n                    console.error(e);\n                }\n            }\n        }\n        return acc;\n    }, []);\n    return new Promise(function(resolve, reject) {\n        Promise.all(mutations).then(function(resolvedMutations) {\n            perform(resolvedMutations, function() {\n                hclAdd(\"active\");\n                hclAdd(\"complete\");\n                hclRemove(\"pending\");\n                if (typeof callback === \"function\") callback();\n                mark();\n                resolve();\n            });\n        }).catch(function(e) {\n            mark();\n            reject(e);\n        });\n    });\n}\nfunction onNode(node) {\n    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    generateMutation(node).then(function(mutation) {\n        if (mutation) {\n            perform([\n                mutation\n            ], callback);\n        }\n    });\n}\nfunction resolveIcons(next) {\n    return function(maybeIconDefinition) {\n        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var iconDefinition = (maybeIconDefinition || {}).icon ? maybeIconDefinition : findIconDefinition(maybeIconDefinition || {});\n        var mask = params.mask;\n        if (mask) {\n            mask = (mask || {}).icon ? mask : findIconDefinition(mask || {});\n        }\n        return next(iconDefinition, _objectSpread2(_objectSpread2({}, params), {}, {\n            mask: mask\n        }));\n    };\n}\nvar render = function render(iconDefinition) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _params$transform = params.transform, transform = _params$transform === void 0 ? meaninglessTransform : _params$transform, _params$symbol = params.symbol, symbol = _params$symbol === void 0 ? false : _params$symbol, _params$mask = params.mask, mask = _params$mask === void 0 ? null : _params$mask, _params$maskId = params.maskId, maskId = _params$maskId === void 0 ? null : _params$maskId, _params$title = params.title, title = _params$title === void 0 ? null : _params$title, _params$titleId = params.titleId, titleId = _params$titleId === void 0 ? null : _params$titleId, _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes, _params$attributes = params.attributes, attributes = _params$attributes === void 0 ? {} : _params$attributes, _params$styles = params.styles, styles = _params$styles === void 0 ? {} : _params$styles;\n    if (!iconDefinition) return;\n    var prefix = iconDefinition.prefix, iconName = iconDefinition.iconName, icon = iconDefinition.icon;\n    return domVariants(_objectSpread2({\n        type: \"icon\"\n    }, iconDefinition), function() {\n        callHooks(\"beforeDOMElementCreation\", {\n            iconDefinition: iconDefinition,\n            params: params\n        });\n        if (config.autoA11y) {\n            if (title) {\n                attributes[\"aria-labelledby\"] = \"\".concat(config.replacementClass, \"-title-\").concat(titleId || nextUniqueId());\n            } else {\n                attributes[\"aria-hidden\"] = \"true\";\n                attributes[\"focusable\"] = \"false\";\n            }\n        }\n        return makeInlineSvgAbstract({\n            icons: {\n                main: asFoundIcon(icon),\n                mask: mask ? asFoundIcon(mask.icon) : {\n                    found: false,\n                    width: null,\n                    height: null,\n                    icon: {}\n                }\n            },\n            prefix: prefix,\n            iconName: iconName,\n            transform: _objectSpread2(_objectSpread2({}, meaninglessTransform), transform),\n            symbol: symbol,\n            title: title,\n            maskId: maskId,\n            titleId: titleId,\n            extra: {\n                attributes: attributes,\n                styles: styles,\n                classes: classes\n            }\n        });\n    });\n};\nvar ReplaceElements = {\n    mixout: function mixout() {\n        return {\n            icon: resolveIcons(render)\n        };\n    },\n    hooks: function hooks() {\n        return {\n            mutationObserverCallbacks: function mutationObserverCallbacks(accumulator) {\n                accumulator.treeCallback = onTree;\n                accumulator.nodeCallback = onNode;\n                return accumulator;\n            }\n        };\n    },\n    provides: function provides(providers$$1) {\n        providers$$1.i2svg = function(params) {\n            var _params$node = params.node, node = _params$node === void 0 ? DOCUMENT : _params$node, _params$callback = params.callback, callback = _params$callback === void 0 ? function() {} : _params$callback;\n            return onTree(node, callback);\n        };\n        providers$$1.generateSvgReplacementMutation = function(node, nodeMeta) {\n            var iconName = nodeMeta.iconName, title = nodeMeta.title, titleId = nodeMeta.titleId, prefix = nodeMeta.prefix, transform = nodeMeta.transform, symbol = nodeMeta.symbol, mask = nodeMeta.mask, maskId = nodeMeta.maskId, extra = nodeMeta.extra;\n            return new Promise(function(resolve, reject) {\n                Promise.all([\n                    findIcon(iconName, prefix),\n                    mask.iconName ? findIcon(mask.iconName, mask.prefix) : Promise.resolve({\n                        found: false,\n                        width: 512,\n                        height: 512,\n                        icon: {}\n                    })\n                ]).then(function(_ref) {\n                    var _ref2 = _slicedToArray(_ref, 2), main = _ref2[0], mask = _ref2[1];\n                    resolve([\n                        node,\n                        makeInlineSvgAbstract({\n                            icons: {\n                                main: main,\n                                mask: mask\n                            },\n                            prefix: prefix,\n                            iconName: iconName,\n                            transform: transform,\n                            symbol: symbol,\n                            maskId: maskId,\n                            title: title,\n                            titleId: titleId,\n                            extra: extra,\n                            watchable: true\n                        })\n                    ]);\n                }).catch(reject);\n            });\n        };\n        providers$$1.generateAbstractIcon = function(_ref3) {\n            var children = _ref3.children, attributes = _ref3.attributes, main = _ref3.main, transform = _ref3.transform, styles = _ref3.styles;\n            var styleString = joinStyles(styles);\n            if (styleString.length > 0) {\n                attributes[\"style\"] = styleString;\n            }\n            var nextChild;\n            if (transformIsMeaningful(transform)) {\n                nextChild = callProvided(\"generateAbstractTransformGrouping\", {\n                    main: main,\n                    transform: transform,\n                    containerWidth: main.width,\n                    iconWidth: main.width\n                });\n            }\n            children.push(nextChild || main.icon);\n            return {\n                children: children,\n                attributes: attributes\n            };\n        };\n    }\n};\nvar Layers = {\n    mixout: function mixout() {\n        return {\n            layer: function layer(assembler) {\n                var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes;\n                return domVariants({\n                    type: \"layer\"\n                }, function() {\n                    callHooks(\"beforeDOMElementCreation\", {\n                        assembler: assembler,\n                        params: params\n                    });\n                    var children = [];\n                    assembler(function(args) {\n                        Array.isArray(args) ? args.map(function(a) {\n                            children = children.concat(a.abstract);\n                        }) : children = children.concat(args.abstract);\n                    });\n                    return [\n                        {\n                            tag: \"span\",\n                            attributes: {\n                                class: [\n                                    \"\".concat(config.cssPrefix, \"-layers\")\n                                ].concat(_toConsumableArray(classes)).join(\" \")\n                            },\n                            children: children\n                        }\n                    ];\n                });\n            }\n        };\n    }\n};\nvar LayersCounter = {\n    mixout: function mixout() {\n        return {\n            counter: function counter(content) {\n                var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var _params$title = params.title, title = _params$title === void 0 ? null : _params$title, _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes, _params$attributes = params.attributes, attributes = _params$attributes === void 0 ? {} : _params$attributes, _params$styles = params.styles, styles = _params$styles === void 0 ? {} : _params$styles;\n                return domVariants({\n                    type: \"counter\",\n                    content: content\n                }, function() {\n                    callHooks(\"beforeDOMElementCreation\", {\n                        content: content,\n                        params: params\n                    });\n                    return makeLayersCounterAbstract({\n                        content: content.toString(),\n                        title: title,\n                        extra: {\n                            attributes: attributes,\n                            styles: styles,\n                            classes: [\n                                \"\".concat(config.cssPrefix, \"-layers-counter\")\n                            ].concat(_toConsumableArray(classes))\n                        }\n                    });\n                });\n            }\n        };\n    }\n};\nvar LayersText = {\n    mixout: function mixout() {\n        return {\n            text: function text(content) {\n                var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var _params$transform = params.transform, transform = _params$transform === void 0 ? meaninglessTransform : _params$transform, _params$title = params.title, title = _params$title === void 0 ? null : _params$title, _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes, _params$attributes = params.attributes, attributes = _params$attributes === void 0 ? {} : _params$attributes, _params$styles = params.styles, styles = _params$styles === void 0 ? {} : _params$styles;\n                return domVariants({\n                    type: \"text\",\n                    content: content\n                }, function() {\n                    callHooks(\"beforeDOMElementCreation\", {\n                        content: content,\n                        params: params\n                    });\n                    return makeLayersTextAbstract({\n                        content: content,\n                        transform: _objectSpread2(_objectSpread2({}, meaninglessTransform), transform),\n                        title: title,\n                        extra: {\n                            attributes: attributes,\n                            styles: styles,\n                            classes: [\n                                \"\".concat(config.cssPrefix, \"-layers-text\")\n                            ].concat(_toConsumableArray(classes))\n                        }\n                    });\n                });\n            }\n        };\n    },\n    provides: function provides(providers$$1) {\n        providers$$1.generateLayersText = function(node, nodeMeta) {\n            var title = nodeMeta.title, transform = nodeMeta.transform, extra = nodeMeta.extra;\n            var width = null;\n            var height = null;\n            if (IS_IE) {\n                var computedFontSize = parseInt(getComputedStyle(node).fontSize, 10);\n                var boundingClientRect = node.getBoundingClientRect();\n                width = boundingClientRect.width / computedFontSize;\n                height = boundingClientRect.height / computedFontSize;\n            }\n            if (config.autoA11y && !title) {\n                extra.attributes[\"aria-hidden\"] = \"true\";\n            }\n            return Promise.resolve([\n                node,\n                makeLayersTextAbstract({\n                    content: node.innerHTML,\n                    width: width,\n                    height: height,\n                    transform: transform,\n                    title: title,\n                    extra: extra,\n                    watchable: true\n                })\n            ]);\n        };\n    }\n};\nvar CLEAN_CONTENT_PATTERN = new RegExp('\"', \"ug\");\nvar SECONDARY_UNICODE_RANGE = [\n    1105920,\n    1112319\n];\nfunction hexValueFromContent(content) {\n    var cleaned = content.replace(CLEAN_CONTENT_PATTERN, \"\");\n    var codePoint = codePointAt(cleaned, 0);\n    var isPrependTen = codePoint >= SECONDARY_UNICODE_RANGE[0] && codePoint <= SECONDARY_UNICODE_RANGE[1];\n    var isDoubled = cleaned.length === 2 ? cleaned[0] === cleaned[1] : false;\n    return {\n        value: isDoubled ? toHex(cleaned[0]) : toHex(cleaned),\n        isSecondary: isPrependTen || isDoubled\n    };\n}\nfunction replaceForPosition(node, position) {\n    var pendingAttribute = \"\".concat(DATA_FA_PSEUDO_ELEMENT_PENDING).concat(position.replace(\":\", \"-\"));\n    return new Promise(function(resolve, reject) {\n        if (node.getAttribute(pendingAttribute) !== null) {\n            // This node is already being processed\n            return resolve();\n        }\n        var children = toArray(node.children);\n        var alreadyProcessedPseudoElement = children.filter(function(c) {\n            return c.getAttribute(DATA_FA_PSEUDO_ELEMENT) === position;\n        })[0];\n        var styles = WINDOW.getComputedStyle(node, position);\n        var fontFamily = styles.getPropertyValue(\"font-family\").match(FONT_FAMILY_PATTERN);\n        var fontWeight = styles.getPropertyValue(\"font-weight\");\n        var content = styles.getPropertyValue(\"content\");\n        if (alreadyProcessedPseudoElement && !fontFamily) {\n            // If we've already processed it but the current computed style does not result in a font-family,\n            // that probably means that a class name that was previously present to make the icon has been\n            // removed. So we now should delete the icon.\n            node.removeChild(alreadyProcessedPseudoElement);\n            return resolve();\n        } else if (fontFamily && content !== \"none\" && content !== \"\") {\n            var _content = styles.getPropertyValue(\"content\");\n            var family = ~[\n                \"Sharp\"\n            ].indexOf(fontFamily[2]) ? FAMILY_SHARP : FAMILY_CLASSIC;\n            var prefix = ~[\n                \"Solid\",\n                \"Regular\",\n                \"Light\",\n                \"Thin\",\n                \"Duotone\",\n                \"Brands\",\n                \"Kit\"\n            ].indexOf(fontFamily[2]) ? STYLE_TO_PREFIX[family][fontFamily[2].toLowerCase()] : FONT_WEIGHT_TO_PREFIX[family][fontWeight];\n            var _hexValueFromContent = hexValueFromContent(_content), hexValue = _hexValueFromContent.value, isSecondary = _hexValueFromContent.isSecondary;\n            var isV4 = fontFamily[0].startsWith(\"FontAwesome\");\n            var iconName = byUnicode(prefix, hexValue);\n            var iconIdentifier = iconName;\n            if (isV4) {\n                var iconName4 = byOldUnicode(hexValue);\n                if (iconName4.iconName && iconName4.prefix) {\n                    iconName = iconName4.iconName;\n                    prefix = iconName4.prefix;\n                }\n            } // Only convert the pseudo element in this ::before/::after position into an icon if we haven't\n            // already done so with the same prefix and iconName\n            if (iconName && !isSecondary && (!alreadyProcessedPseudoElement || alreadyProcessedPseudoElement.getAttribute(DATA_PREFIX) !== prefix || alreadyProcessedPseudoElement.getAttribute(DATA_ICON) !== iconIdentifier)) {\n                node.setAttribute(pendingAttribute, iconIdentifier);\n                if (alreadyProcessedPseudoElement) {\n                    // Delete the old one, since we're replacing it with a new one\n                    node.removeChild(alreadyProcessedPseudoElement);\n                }\n                var meta = blankMeta();\n                var extra = meta.extra;\n                extra.attributes[DATA_FA_PSEUDO_ELEMENT] = position;\n                findIcon(iconName, prefix).then(function(main) {\n                    var _abstract = makeInlineSvgAbstract(_objectSpread2(_objectSpread2({}, meta), {}, {\n                        icons: {\n                            main: main,\n                            mask: emptyCanonicalIcon()\n                        },\n                        prefix: prefix,\n                        iconName: iconIdentifier,\n                        extra: extra,\n                        watchable: true\n                    }));\n                    var element = DOCUMENT.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n                    if (position === \"::before\") {\n                        node.insertBefore(element, node.firstChild);\n                    } else {\n                        node.appendChild(element);\n                    }\n                    element.outerHTML = _abstract.map(function(a) {\n                        return toHtml(a);\n                    }).join(\"\\n\");\n                    node.removeAttribute(pendingAttribute);\n                    resolve();\n                }).catch(reject);\n            } else {\n                resolve();\n            }\n        } else {\n            resolve();\n        }\n    });\n}\nfunction replace(node) {\n    return Promise.all([\n        replaceForPosition(node, \"::before\"),\n        replaceForPosition(node, \"::after\")\n    ]);\n}\nfunction processable(node) {\n    return node.parentNode !== document.head && !~TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS.indexOf(node.tagName.toUpperCase()) && !node.getAttribute(DATA_FA_PSEUDO_ELEMENT) && (!node.parentNode || node.parentNode.tagName !== \"svg\");\n}\nfunction searchPseudoElements(root) {\n    if (!IS_DOM) return;\n    return new Promise(function(resolve, reject) {\n        var operations = toArray(root.querySelectorAll(\"*\")).filter(processable).map(replace);\n        var end = perf.begin(\"searchPseudoElements\");\n        disableObservation();\n        Promise.all(operations).then(function() {\n            end();\n            enableObservation();\n            resolve();\n        }).catch(function() {\n            end();\n            enableObservation();\n            reject();\n        });\n    });\n}\nvar PseudoElements = {\n    hooks: function hooks() {\n        return {\n            mutationObserverCallbacks: function mutationObserverCallbacks(accumulator) {\n                accumulator.pseudoElementsCallback = searchPseudoElements;\n                return accumulator;\n            }\n        };\n    },\n    provides: function provides(providers$$1) {\n        providers$$1.pseudoElements2svg = function(params) {\n            var _params$node = params.node, node = _params$node === void 0 ? DOCUMENT : _params$node;\n            if (config.searchPseudoElements) {\n                searchPseudoElements(node);\n            }\n        };\n    }\n};\nvar _unwatched = false;\nvar MutationObserver$1 = {\n    mixout: function mixout() {\n        return {\n            dom: {\n                unwatch: function unwatch() {\n                    disableObservation();\n                    _unwatched = true;\n                }\n            }\n        };\n    },\n    hooks: function hooks() {\n        return {\n            bootstrap: function bootstrap() {\n                observe(chainHooks(\"mutationObserverCallbacks\", {}));\n            },\n            noAuto: function noAuto() {\n                disconnect();\n            },\n            watch: function watch(params) {\n                var observeMutationsRoot = params.observeMutationsRoot;\n                if (_unwatched) {\n                    enableObservation();\n                } else {\n                    observe(chainHooks(\"mutationObserverCallbacks\", {\n                        observeMutationsRoot: observeMutationsRoot\n                    }));\n                }\n            }\n        };\n    }\n};\nvar parseTransformString = function parseTransformString(transformString) {\n    var transform = {\n        size: 16,\n        x: 0,\n        y: 0,\n        flipX: false,\n        flipY: false,\n        rotate: 0\n    };\n    return transformString.toLowerCase().split(\" \").reduce(function(acc, n) {\n        var parts = n.toLowerCase().split(\"-\");\n        var first = parts[0];\n        var rest = parts.slice(1).join(\"-\");\n        if (first && rest === \"h\") {\n            acc.flipX = true;\n            return acc;\n        }\n        if (first && rest === \"v\") {\n            acc.flipY = true;\n            return acc;\n        }\n        rest = parseFloat(rest);\n        if (isNaN(rest)) {\n            return acc;\n        }\n        switch(first){\n            case \"grow\":\n                acc.size = acc.size + rest;\n                break;\n            case \"shrink\":\n                acc.size = acc.size - rest;\n                break;\n            case \"left\":\n                acc.x = acc.x - rest;\n                break;\n            case \"right\":\n                acc.x = acc.x + rest;\n                break;\n            case \"up\":\n                acc.y = acc.y - rest;\n                break;\n            case \"down\":\n                acc.y = acc.y + rest;\n                break;\n            case \"rotate\":\n                acc.rotate = acc.rotate + rest;\n                break;\n        }\n        return acc;\n    }, transform);\n};\nvar PowerTransforms = {\n    mixout: function mixout() {\n        return {\n            parse: {\n                transform: function transform(transformString) {\n                    return parseTransformString(transformString);\n                }\n            }\n        };\n    },\n    hooks: function hooks() {\n        return {\n            parseNodeAttributes: function parseNodeAttributes(accumulator, node) {\n                var transformString = node.getAttribute(\"data-fa-transform\");\n                if (transformString) {\n                    accumulator.transform = parseTransformString(transformString);\n                }\n                return accumulator;\n            }\n        };\n    },\n    provides: function provides(providers) {\n        providers.generateAbstractTransformGrouping = function(_ref) {\n            var main = _ref.main, transform = _ref.transform, containerWidth = _ref.containerWidth, iconWidth = _ref.iconWidth;\n            var outer = {\n                transform: \"translate(\".concat(containerWidth / 2, \" 256)\")\n            };\n            var innerTranslate = \"translate(\".concat(transform.x * 32, \", \").concat(transform.y * 32, \") \");\n            var innerScale = \"scale(\".concat(transform.size / 16 * (transform.flipX ? -1 : 1), \", \").concat(transform.size / 16 * (transform.flipY ? -1 : 1), \") \");\n            var innerRotate = \"rotate(\".concat(transform.rotate, \" 0 0)\");\n            var inner = {\n                transform: \"\".concat(innerTranslate, \" \").concat(innerScale, \" \").concat(innerRotate)\n            };\n            var path = {\n                transform: \"translate(\".concat(iconWidth / 2 * -1, \" -256)\")\n            };\n            var operations = {\n                outer: outer,\n                inner: inner,\n                path: path\n            };\n            return {\n                tag: \"g\",\n                attributes: _objectSpread2({}, operations.outer),\n                children: [\n                    {\n                        tag: \"g\",\n                        attributes: _objectSpread2({}, operations.inner),\n                        children: [\n                            {\n                                tag: main.icon.tag,\n                                children: main.icon.children,\n                                attributes: _objectSpread2(_objectSpread2({}, main.icon.attributes), operations.path)\n                            }\n                        ]\n                    }\n                ]\n            };\n        };\n    }\n};\nvar ALL_SPACE = {\n    x: 0,\n    y: 0,\n    width: \"100%\",\n    height: \"100%\"\n};\nfunction fillBlack(_abstract) {\n    var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (_abstract.attributes && (_abstract.attributes.fill || force)) {\n        _abstract.attributes.fill = \"black\";\n    }\n    return _abstract;\n}\nfunction deGroup(_abstract2) {\n    if (_abstract2.tag === \"g\") {\n        return _abstract2.children;\n    } else {\n        return [\n            _abstract2\n        ];\n    }\n}\nvar Masks = {\n    hooks: function hooks() {\n        return {\n            parseNodeAttributes: function parseNodeAttributes(accumulator, node) {\n                var maskData = node.getAttribute(\"data-fa-mask\");\n                var mask = !maskData ? emptyCanonicalIcon() : getCanonicalIcon(maskData.split(\" \").map(function(i) {\n                    return i.trim();\n                }));\n                if (!mask.prefix) {\n                    mask.prefix = getDefaultUsablePrefix();\n                }\n                accumulator.mask = mask;\n                accumulator.maskId = node.getAttribute(\"data-fa-mask-id\");\n                return accumulator;\n            }\n        };\n    },\n    provides: function provides(providers) {\n        providers.generateAbstractMask = function(_ref) {\n            var children = _ref.children, attributes = _ref.attributes, main = _ref.main, mask = _ref.mask, explicitMaskId = _ref.maskId, transform = _ref.transform;\n            var mainWidth = main.width, mainPath = main.icon;\n            var maskWidth = mask.width, maskPath = mask.icon;\n            var trans = transformForSvg({\n                transform: transform,\n                containerWidth: maskWidth,\n                iconWidth: mainWidth\n            });\n            var maskRect = {\n                tag: \"rect\",\n                attributes: _objectSpread2(_objectSpread2({}, ALL_SPACE), {}, {\n                    fill: \"white\"\n                })\n            };\n            var maskInnerGroupChildrenMixin = mainPath.children ? {\n                children: mainPath.children.map(fillBlack)\n            } : {};\n            var maskInnerGroup = {\n                tag: \"g\",\n                attributes: _objectSpread2({}, trans.inner),\n                children: [\n                    fillBlack(_objectSpread2({\n                        tag: mainPath.tag,\n                        attributes: _objectSpread2(_objectSpread2({}, mainPath.attributes), trans.path)\n                    }, maskInnerGroupChildrenMixin))\n                ]\n            };\n            var maskOuterGroup = {\n                tag: \"g\",\n                attributes: _objectSpread2({}, trans.outer),\n                children: [\n                    maskInnerGroup\n                ]\n            };\n            var maskId = \"mask-\".concat(explicitMaskId || nextUniqueId());\n            var clipId = \"clip-\".concat(explicitMaskId || nextUniqueId());\n            var maskTag = {\n                tag: \"mask\",\n                attributes: _objectSpread2(_objectSpread2({}, ALL_SPACE), {}, {\n                    id: maskId,\n                    maskUnits: \"userSpaceOnUse\",\n                    maskContentUnits: \"userSpaceOnUse\"\n                }),\n                children: [\n                    maskRect,\n                    maskOuterGroup\n                ]\n            };\n            var defs = {\n                tag: \"defs\",\n                children: [\n                    {\n                        tag: \"clipPath\",\n                        attributes: {\n                            id: clipId\n                        },\n                        children: deGroup(maskPath)\n                    },\n                    maskTag\n                ]\n            };\n            children.push(defs, {\n                tag: \"rect\",\n                attributes: _objectSpread2({\n                    fill: \"currentColor\",\n                    \"clip-path\": \"url(#\".concat(clipId, \")\"),\n                    mask: \"url(#\".concat(maskId, \")\")\n                }, ALL_SPACE)\n            });\n            return {\n                children: children,\n                attributes: attributes\n            };\n        };\n    }\n};\nvar MissingIconIndicator = {\n    provides: function provides(providers) {\n        var reduceMotion = false;\n        if (WINDOW.matchMedia) {\n            reduceMotion = WINDOW.matchMedia(\"(prefers-reduced-motion: reduce)\").matches;\n        }\n        providers.missingIconAbstract = function() {\n            var gChildren = [];\n            var FILL = {\n                fill: \"currentColor\"\n            };\n            var ANIMATION_BASE = {\n                attributeType: \"XML\",\n                repeatCount: \"indefinite\",\n                dur: \"2s\"\n            }; // Ring\n            gChildren.push({\n                tag: \"path\",\n                attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {\n                    d: \"M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z\"\n                })\n            });\n            var OPACITY_ANIMATE = _objectSpread2(_objectSpread2({}, ANIMATION_BASE), {}, {\n                attributeName: \"opacity\"\n            });\n            var dot = {\n                tag: \"circle\",\n                attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {\n                    cx: \"256\",\n                    cy: \"364\",\n                    r: \"28\"\n                }),\n                children: []\n            };\n            if (!reduceMotion) {\n                dot.children.push({\n                    tag: \"animate\",\n                    attributes: _objectSpread2(_objectSpread2({}, ANIMATION_BASE), {}, {\n                        attributeName: \"r\",\n                        values: \"28;14;28;28;14;28;\"\n                    })\n                }, {\n                    tag: \"animate\",\n                    attributes: _objectSpread2(_objectSpread2({}, OPACITY_ANIMATE), {}, {\n                        values: \"1;0;1;1;0;1;\"\n                    })\n                });\n            }\n            gChildren.push(dot);\n            gChildren.push({\n                tag: \"path\",\n                attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {\n                    opacity: \"1\",\n                    d: \"M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z\"\n                }),\n                children: reduceMotion ? [] : [\n                    {\n                        tag: \"animate\",\n                        attributes: _objectSpread2(_objectSpread2({}, OPACITY_ANIMATE), {}, {\n                            values: \"1;0;0;0;0;1;\"\n                        })\n                    }\n                ]\n            });\n            if (!reduceMotion) {\n                // Exclamation\n                gChildren.push({\n                    tag: \"path\",\n                    attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {\n                        opacity: \"0\",\n                        d: \"M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z\"\n                    }),\n                    children: [\n                        {\n                            tag: \"animate\",\n                            attributes: _objectSpread2(_objectSpread2({}, OPACITY_ANIMATE), {}, {\n                                values: \"0;0;1;1;0;0;\"\n                            })\n                        }\n                    ]\n                });\n            }\n            return {\n                tag: \"g\",\n                attributes: {\n                    \"class\": \"missing\"\n                },\n                children: gChildren\n            };\n        };\n    }\n};\nvar SvgSymbols = {\n    hooks: function hooks() {\n        return {\n            parseNodeAttributes: function parseNodeAttributes(accumulator, node) {\n                var symbolData = node.getAttribute(\"data-fa-symbol\");\n                var symbol = symbolData === null ? false : symbolData === \"\" ? true : symbolData;\n                accumulator[\"symbol\"] = symbol;\n                return accumulator;\n            }\n        };\n    }\n};\nvar plugins = [\n    InjectCSS,\n    ReplaceElements,\n    Layers,\n    LayersCounter,\n    LayersText,\n    PseudoElements,\n    MutationObserver$1,\n    PowerTransforms,\n    Masks,\n    MissingIconIndicator,\n    SvgSymbols\n];\nregisterPlugins(plugins, {\n    mixoutsTo: api\n});\nvar noAuto$1 = api.noAuto;\nvar config$1 = api.config;\nvar library$1 = api.library;\nvar dom$1 = api.dom;\nvar parse$1 = api.parse;\nvar findIconDefinition$1 = api.findIconDefinition;\nvar toHtml$1 = api.toHtml;\nvar icon = api.icon;\nvar layer = api.layer;\nvar text = api.text;\nvar counter = api.counter;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@fortawesome+fontawesome-svg-core@6.5.1/node_modules/@fortawesome/fontawesome-svg-core/index.mjs\n");

/***/ })

};
;